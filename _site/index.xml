<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/index.html</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description>A data science blog by Danielle Navarro</description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/index.html</link>
</image>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Wed, 14 Jun 2023 14:00:00 GMT</lastBuildDate>
<item>
  <title>On living in dark times</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-15_dark-times/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As a rule, I don’t do politics on this blog. In fact, I have never previously discussed political or social issues on this blog. I’ve scrupulously avoided discussing anything that might carry the hint of politics, because I don’t wish to be drawn into the fray. I’m a data scientist, a statistician, and a generative artist. I do not have the temperament required to involve myself in matters political, and it is fundamentally not what I wish to be doing with this blog. However, sometimes exceptions need to be made, and this post is one such exception.</p>
<p>One of the feeds I follow fairly regularly is <a href="https://www.erininthemorning.com/">Erin in the Morning</a>, a substack written by <a href="https://en.wikipedia.org/wiki/Erin_Reed_(journalist)">Erin Reed</a>. Erin is an activist and independent journalist who writes about transgender issues, and one of the few people who diligently attempts to document the full scope of the anti-trans laws that are currently being passed across large swathes of the United States, and the consequences that those laws are having on transgender people who live there. It’s grim reading.</p>
<p>A couple of days ago she published a very depressing post entitled <a href="https://www.erininthemorning.com/p/us-internal-refugee-crisis-130-260k">US internal refugee crisis: 130-260k trans people have already fled</a>, documenting the scale of the crisis currently affecting trans people in the US, and presenting personalised accounts from people who have been forced to leave their lives behind and flee to safer territory. A staggeringly large number of trans people have been internally displaced. They are so frightened by what is happening right now that they have upended their lives and moved in the hope of finding safety.</p>
<p>If you haven’t read the article yet, read it first… I’ll wait.</p>
<p>Okay, you’ve read it now, right? Good.</p>
<p>At this point, if you’re a statistician (or any other data-focused person) you have one of two reactions. If you’re a decent human being, your reaction will be something like this:</p>
<blockquote class="blockquote">
<p>Fucking fuck fuck fuck this is horrible. What can I do to help?</p>
</blockquote>
<p>Unfortunately, many statisticians will have this reaction:</p>
<blockquote class="blockquote">
<p>That’s not how you should construct the estimate. Those numbers aren’t quite right, and probably an overestimate. So instead of being a decent human being I’m going to be a smug asshole, shove my head back in the sand, and ignore the very real crisis unfolding.</p>
</blockquote>
<p>Admittedly the second group would probably choose to phrase their reaction differently, because they don’t want to admit that statistical pedantry is not an appropriate response to a catastrophic situation. Nevertheless, I’ve met statisticians before. We all have. We know perfectly well that pedantry is precisely what many of them will resort to when presented with an article like this one.</p>
<p>And so, in order to cut that off at the pass and do my best to forestall anyone who might be tempted to dismiss the substance of Erin’s point by nitpicking the statistics I’m going to redo her calculations in a somewhat more statistically careful way, and you can decide for yourself whether you want to be an asshole about it.</p>
<section id="what-proportion-of-the-transgender-population-has-been-displaced" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-transgender-population-has-been-displaced">What proportion of the transgender population has been displaced?</h2>
<p>The data source is this <a href="https://www.dataforprogress.org/blog/2023/6/8/lgbtq-adults-do-not-feel-safe-and-do-not-think-the-democratic-party-is-doing-enough-to-protect-their-rights">article by Data For Progress</a>.</p>
<p>From the pdf report embedded at the bottom of the page, the point estimate suggests 8% of transgender adults (defined here as people aged 18+) in the United States have been forced to migrate interstate. However, the weighted N associated with that point estimate is only 166, because sampling transgender people is hard. We don’t have any more detailed breakdown to work with, but as a “back of the envelope” style calculation, I’ll treat this as if it were a simple random sample in which 13 of 166 transgender adults indicated that they have already been forced to move interstate because of the current crisis. To the extent that this is a reasonable first-pass approximation, a simple beta-binomial model will suffice to provide an uncertainty estimate:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Ctheta%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBeta%7D(1,%201)%20%5C%5C%0An%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBinomial%7D(%5Ctheta,%20N%20=%20166)%0A%5Cend%7Barray%7D%0A"></p>
<p>Given <img src="https://latex.codecogs.com/png.latex?n%20=%2013"> displaced people from a simple random sample of <img src="https://latex.codecogs.com/png.latex?N%20=%20166"> transgender people, the posterior proportion of displaced trans people is given by a Beta(14, 154) distribution.<sup>1</sup> As such our 95% equal-tail credible interval is straightforwardly calculated as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0465905 0.1294375</code></pre>
</div>
</div>
<p>In other words, the data from this survey suggest that somewhere between 5% and 13% of all transgender adults in the United States have been internally displaced as a consequence of the deluge of anti-trans legislation in the last few years.<sup>2</sup> How many people is that, really? To answer that question we need to know something about how many trans people there are in the United States.</p>
</section>
<section id="what-proportion-of-the-us-population-is-transgender" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-us-population-is-transgender">What proportion of the US population is transgender?</h2>
<p>For this we can use a relatively recent <a href="https://williamsinstitute.law.ucla.edu/publications/trans-adults-united-states">survey by the Williams Institute</a>. The webpage provides point estimates in a digestible form, but Tables 4 and A4 of the associated <a href="https://williamsinstitute.law.ucla.edu/wp-content/uploads/Trans-Pop-Update-Jun-2022.pdf">pdf report</a> includes a 95% credible interval that suggests the adult transgender population in the United States (where again age 18+ is used as the cutoff) is somewhere between 816,644 and 1,964,330 people. Or, to express it as a percentage, somewhere between 0.32% and 0.77% of the US adult population of 255,201,250 persons identifies as transgender (the point estimate is 0.52%).</p>
<p>In my ideal world I’d have access to the actual posterior distribution from the Williams Institute modelling, but alas I do not. However, since this is intended as a back-of-the-envelope style calculation, I’ll again try to make some sensible assumptions. In most situations I’d be willing to assume that the posterior is approximately normal, but that doesn’t work here because the percentages are too close to zero. Instead what I’ll do is use a beta distribution and choose parameters that ensure the relevant quantiles approximately mirror the numbers from the Williams Institute study:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3880</span>), </span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>)</span>
<span id="cb3-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       2.5%         50%       97.5% 
0.003193342 0.005125918 0.007695911 </code></pre>
</div>
</div>
<p>It’s awfully crude, but it works: the 95% equal-tail intervals that you’d get if this were the real posterior match the numbers reported by the Williams Institute, the distribution is bounded appropriately, and the point estimate (in this case the median) is pretty decent too. Good enough for the back of an envelope calculation I’d say.</p>
</section>
<section id="estimating-the-number-of-displaced-persons" class="level2">
<h2 class="anchored" data-anchor-id="estimating-the-number-of-displaced-persons">Estimating the number of displaced persons</h2>
<p>Okay, now I have some (slightly crude) posterior densities to express what we know about (a) the proportion of adults in the United States are transgender, and (b) the proportion of transgender adults in the United States that have been displaced courtesy of the anti-trans legislation sweeping the nation. Again using the numbers from the Williams Institute study as the basis for the calculation, I’ll assume that the adult population of the US is approximately 255,201,250 persons. Now, I personally don’t know how to convolve two beta distributions analytically, but it’s not even slightly hard to do numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">sim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_adults =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255201250</span>,</span>
<span id="cb5-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_trans =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3880</span>),</span>
<span id="cb5-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_displaced =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>),</span>
<span id="cb5-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_displaced =</span> n_adults <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_trans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_displaced</span>
<span id="cb5-6">)</span></code></pre></div>
</div>
<p>Having done so, we can plot a distribution reflecting what we know about the number of transgender adults who have been displaced:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(sim, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_displaced)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_comma</span>())</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-06-15_dark-times/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So… how many transgender people within the United States do we estimate have already been forced from their homes as a consequence of the dire political climate there? Here’s the headline number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 110693.9</code></pre>
</div>
</div>
<p>About 111000 people. That’s… a lot, and that number doesn’t even include the families of transgender adults, or transgender children, or the families of transgender children. I mean, there aren’t many of us. We are a small population, and this is a humanitarian disaster for transgender people in the United States. It’s something that has been building for several years now, and every trans person knows it.</p>
<p>The precise scale of the disaster isn’t entirely clear from the data. The point estimate of 111k people could be out by a factor of 2 in either direction, which you can see by calculating the 95% credible interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%     97.5% 
 51674.64 198492.39 </code></pre>
</div>
</div>
<p>Between 52000 and 198000 transgender adults have been displaced. No matter how you look at it, a <em>lot</em> of people have been forced to flee already.</p>
<p>At some point the rest of the American population will start to actually <em>do</em> something about this, right? I mean, something <strong>other</strong> than make it worse or waste your time and effort by <a href="https://statmodeling.stat.columbia.edu/2021/07/18/what-is-a-woman/">whining about the threat to society posed by trans women in sports and asking “what is a woman?”</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Huge thank you to Martin Modrák for noticing the mistake in which I’d originally specified a Beta(14, 167) distribution here like an idiot.↩︎</p></li>
<li id="fn2"><p>You could do the same thing in a frequentist way, of course, but that would be no less crude than this Bayesian method, and anyway I already did that and found essentially the same answer. This isn’t a situation where Bayes-vs-orthodox matters very much. In the real world, the nuance is entirely around the SRS assumption and the accuracy of the responses. In that respect I’m of course oversimplifying, but let’s be honest… how much do you <em>really</em> think this would change things? Be honest.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {On Living in Dark Times},
  date = {2023-06-15},
  url = {https://blog.djnavarro.net/posts/2023-06-15_dark-times},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“On Living in Dark Times.”</span> June
15, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-15_dark-times">https://blog.djnavarro.net/posts/2023-06-15_dark-times</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Statistics</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-15_dark-times/index.html</guid>
  <pubDate>Wed, 14 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-15_dark-times/map.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A little ANSI trickery</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>On mastodon today I wrote cute little <a href="https://fosstodon.org/@djnavarro/110540314955265024">post</a> showing what my R startup message currently looks like:</p>
<p align="center" style="padding: 10px;">
<iframe src="https://fosstodon.org/@djnavarro/110540314955265024/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen">
</iframe>
<script src="https://fosstodon.org/embed.js" async="async"></script>
</p>
<p>In the replies, I included the code showing how to generate the rainbow strip that appears at the bottom of the startup message. Calling this <code>rainbow_strip()</code> function from the R console will give you the result you’re looking for:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_527e641a2214b46c26543852ceae8538">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">rainbow_strip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e50000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff8d00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffee00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#028121"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004cff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#770088"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-3">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>make_ansi_style) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-4">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.x</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\u2583"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))))</span>
<span id="cb1-5">}</span></code></pre></div>
</div>
<p>The code isn’t very complicated, but it does rely on a few tricks. The most important trick is the one that occurs on the second line, in which I use the <a href="about:blank">cli</a> package to define a set of six styles, each of which colours the text in one of the colours from the LGBTIQ+ pride flag.<sup>1</sup> Each of these six styles is then applied to the UTF-8 character<sup>2</sup> string <code>"▃▃▃▃▃▃"</code> and the results are concatenated in the output. It’s very pretty. But suppose I wanted to reproduce the style out output within a quarto document like this one. Alas, it does not work, because information about text colour is not preserved in the output when the document is rendered:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_46d48e1489e413e9fbd81014cc0ab12f">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_strip</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃</code></pre>
</div>
</div>
<p>Hm. Well that’s annoying, but hardly surprising to anyone familiar with R markdown or quarto. But just to be sure, let’s try it again, shall we?</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-6_d87467b6413116321fd86361fb0a5448">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_strip</span>()</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color:#e50000;">▃▃▃▃▃▃</span><span style="color:#ff8d00;">▃▃▃▃▃▃</span><span style="color:#ffee00;">▃▃▃▃▃▃</span><span style="color:#028121;">▃▃▃▃▃▃</span><span style="color:#004cff;">▃▃▃▃▃▃</span><span style="color:#770088;">▃▃▃▃▃▃</span>                                            
</pre>
</div>
</div>
<p>Say what? It works the second time, but not the first? Peculiar. Someone – possibly me?<sup>3</sup> – must be engaged in some trickery that isn’t obvious from first inspection.</p>
<section id="the-trick-revealed" class="level2">
<h2 class="anchored" data-anchor-id="the-trick-revealed">The trick revealed</h2>
<p>If you were to take a look at the source code for this quarto document, the thing you’d immediately notice is that while both of these two code chunks contain R code, one of them is explicitly an R chunk and the other is… not. Here’s the first one again, with the quarto code fencing shown:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_9ff7cfcf39d3ab6ad43ce5e86d808d3e">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_strip</span>()</span>
<span id="cb5-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃</code></pre>
</div>
</div>
<p>The second one, however, is tagged as an “asciicast” code chunk. It still executes R code, but something extra is going on when the code runs, because now the output now preserves the text colour:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-9_7ad14db0db3e31d6ce1fdcfe4ff75ef8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{asciicast}</span></span>
<span id="cb7-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">rainbow_strip()</span></span>
<span id="cb7-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color:#e50000;">▃▃▃▃▃▃</span><span style="color:#ff8d00;">▃▃▃▃▃▃</span><span style="color:#ffee00;">▃▃▃▃▃▃</span><span style="color:#028121;">▃▃▃▃▃▃</span><span style="color:#004cff;">▃▃▃▃▃▃</span><span style="color:#770088;">▃▃▃▃▃▃</span>                                            
</pre>
</div>
</div>
<p>To be clear, there’s nothing special about my <code>rainbow_strip()</code> function here. You can see the same thing happening with any R function that produces coloured text in the output. For example, when printing a tibble at the R console you would normally expect to see the less important parts of the output printed in a muted grey colour. However, when we create a tibble in a quarto document the shading disappears:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-10_f85063e517b34ea041cf40e854bbc883">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is an R chunk</span></span>
<span id="cb8-2">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
      x y    
  &lt;int&gt; &lt;chr&gt;
1     1 a    
2     2 b    
3     3 c    </code></pre>
</div>
</div>
<p>The shading reappears when the same code is executed with the asciicast knitr engine:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-11_5dbfd9c141f4d7dd19c3ebcd98104930">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is an asciicast chunk</span></span>
<span id="cb10-2">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color: #999999;"># A tibble: 3 × 2</span>                                                               
      x y                                                                       
  <span style="font-style: italic;color: #999999;">&lt;int&gt;</span> <span style="font-style: italic;color: #999999;">&lt;chr&gt;</span>                                                                   
<span style="color: #c2c2c2;">1</span>     1 a                                                                       
<span style="color: #c2c2c2;">2</span>     2 b                                                                       
<span style="color: #c2c2c2;">3</span>     3 c                                                                       
</pre>
</div>
</div>
<p>The thing that makes this all work is the <a href="https://r-lib.github.io/asciicast/">asciicast</a> package. Typically, the asciicast package is used to create screencast from R code. I’ve used it before on this blog, actually. When I wrote the <a href="../../pretty-little-clis/">“pretty little CLIs”</a> post about the cli package, I used asciicast to create all the animations that appear in the post. However, you can also use asciicast in conjunction with the <a href="https://yihui.org/knitr/">knitr</a> engine that powers the code execution in quarto.<sup>4</sup> Here’s the code chunk I used to set it up for the current post:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-12_1c8f46d5cfb498fd1529ce59a6e87d85">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb11-2">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out.width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span>,</span>
<span id="cb11-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb11-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asciicast_knitr_output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span></span>
<span id="cb11-8">)</span>
<span id="cb11-9"></span>
<span id="cb11-10">asciicast<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init_knitr_engine</span>(</span>
<span id="cb11-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">echo =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb11-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">echo_input =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">same_process =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb11-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startup =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>({</span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cli)</span>
<span id="cb11-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(</span>
<span id="cb11-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cli.num_colors =</span> cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>truecolor,</span>
<span id="cb11-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asciicast_theme =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb11-19">    )</span>
<span id="cb11-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-21">  })</span>
<span id="cb11-22">)</span>
<span id="cb11-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</div>
<p>The first command sets the knitr options for R code chunks. The important line here is the one that sets <code>asciicast_knitr_output = "html"</code>, which ensures that asciicast produces HTML output. If you don’t set this, the output from asciicast chunks will be rendered as images rather than HTML. The second line does what you might expect: calling <code>asciicast::init_knitr_engine()</code> initialises the asciicast knitr engine.</p>
</section>
<section id="the-trick-explained" class="level2">
<h2 class="anchored" data-anchor-id="the-trick-explained">The trick explained</h2>
<p>In case you don’t already know this stuff, it’s probably worth explaining why the text colour in R output usually vanishes when R code is executed within a quarto or R markdown document. In fact, when I wrote the “pretty little CLIs” post I talked about precisely this:</p>
<blockquote class="blockquote">
<p>The R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the rmarkdown package is that most of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the law of leaky abstractions comes into play: text generated at the R console does not follow the same rules as text inserted into an HTML document, and R Markdown sometimes needs a little help when transforming one to the other.</p>
</blockquote>
<p>As regards colour:</p>
<blockquote class="blockquote">
<p>The colours and symbols used by cli, and supported in the R console, rely on <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</a>, but those escape codes aren’t recognised in HTML</p>
</blockquote>
<p>In that post I used the <a href="https://github.com/brodieG/fansi">fansi</a> package to write a knitr hook that translated the relevant ANSI characters into HTML, thereby preserving the colour information. In essence, the asciicast package allows me to do the same thing here.</p>
<p>Fun!</p>
<div class="tight-text">
<div class="cell" data-hash="index_cache/html/unnamed-chunk-13_896aa2e8360efa56344722b235d6ac55">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">rainbow_flag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e50000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff8d00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffee00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#028121"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004cff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#770088"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>make_ansi_style) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.x</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\u2588"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))))</span>
<span id="cb12-5">}</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_flag</span>()</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color:#e50000;">██████████████████</span>                                                              
<span style="color:#ff8d00;">██████████████████</span>                                                              
<span style="color:#ffee00;">██████████████████</span>                                                              
<span style="color:#028121;">██████████████████</span>                                                              
<span style="color:#004cff;">██████████████████</span>                                                              
<span style="color:#770088;">██████████████████</span>                                                              
</pre>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In the post on Mastodon I used <code>crayon::make_style ()</code> rather than <code>cli::make_ansi_style()</code>, but they do the same thing. After I wrote the post I remembered that the crayon package has been superseded by cli, so it’s generally better to use the cli version instead.↩︎</p></li>
<li id="fn2"><p>In the source code I use <code>"\u2583"</code> to produce the <a href="https://www.w3schools.com/charsets/ref_utf_block.asp">UTF-8 block character</a> <code>"▃"</code>.↩︎</p></li>
<li id="fn3"><p>Definitely me.↩︎</p></li>
<li id="fn4"><p>I mean, that’s assuming you’re using knitr as the engine, which I am in this post. There’s nothing stopping you from using jupyter as the execution engine, which I’ve done in the past for python-focused posts.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {A Little {ANSI} Trickery},
  date = {2023-06-14},
  url = {https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“A Little ANSI Trickery.”</span> June 14,
2023. <a href="https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks">https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks/index.html</guid>
  <pubDate>Tue, 13 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks/flag.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Pins and needles</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A few days ago <a href="https://youtu.be/GwQW3KW3DCc">I made a huge mistake</a>. I was working on a project that, quite rightly, I’d placed under version control. It lived within a git repository, and that git repository was hosted remotely on GitHub. That’s not the mistake: version control is a good thing. The mistake arrived when the project generated a large output files (about 300Mb in size), and because it’s not a good idea to have large files under version control with git,<sup>1</sup> I added that file to <code>.gitignore</code>. Again, not a mistake per se, but you can see the shape of the mistake already: the large file doesn’t exist anywhere except as an untracked file in my local git repo. Bad things can happen in this situation, and lo and behold a few hours later when I messed up something else and unthinkingly called <code>git reset --hard</code> to revert to an earlier state, the file – which took about two hours to generate in the first place – vanished.</p>
<p>Fuuuuuuuuuuck. I’m an idiot.</p>
<p>Okay, that’s not true. I’m not an idiot. But I what I am (or was), is a person who doesn’t have a workflow in place to manage data files that don’t really belong in a git repository, and I paid the price for that huge tiny mistake. Lesson learned.</p>
<p>This is the story of <a href="https://en.wikipedia.org/wiki/Dr._Strangelove">how I learned how to stop worrying and love pins</a>. It’s not a very thorough or detailed post. I’m trying to follow <a href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/">Julia Evans’ advice on blogging</a> and allow myself to tell personal stories, even if those stories are incomplete or imperfect. Not every post needs to be a goddamn monograph.</p>
<section id="storing-data-with-pins" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="storing-data-with-pins">Storing data with pins</h2>
<p>As with everything in data science, mine is a problem that can be solved in many different ways. In this instance I’m working within R, which influences how I think about this. Even within R there are multiple solutions, but I’m lazy and chose to use the <a href="https://pins.rstudio.com/">pins</a> package for this because I know the developers and it was the first option that came to mind. I don’t really want to write a full tutorial on the pins package because I’m fairly new to it myself, but in case you don’t already know pins, here’s a very quick summary:</p>
<ul>
<li><p>A <strong>pin</strong> is a serialised copy of an R object saved to disk along with accompanying metadata. The most obvious kind of object to store in this way is a data frame, but the general approach is broader. You can choose what format the object is stored in. For general R objects you can write to the native <a href="https://rdrr.io/r/base/readRDS.html">rds</a> format or the <a href="https://github.com/traversc/qs">qs</a> format. Lists can be saved as json. For rectangular objects like data frames you also have the options of writing to a csv file, a <a href="https://parquet.apache.org/">parquet</a> file, or the <a href="https://arrow.apache.org/docs/format/Columnar.html#ipc-file-format">arrow IPC file format</a>.</p></li>
<li><p>Pins live within a <strong>board</strong>, which refers to the file storage location. This can be a folder on your local machine, or a bucket on a cloud storage provider (AWS, Azure, GCS, etc). When reading or writing a pin, you read or write to the board. Each board is associated with a manifest, a yaml file called <code>_pins.yaml</code> that lives in the root directory of the board and lists all the pins stored in the board.</p></li>
</ul>
<p>There’s more nuance to pins than this: pins can be versioned and given tags, for instance. But I’m not going to bother with all that here. Instead, I’ll dive straight in and illustrate a very simple workflow using pins that solves about 90% of my problems with almost no effort…</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/immo-wegmann-zqO87IQK6c0-unsplash.jpg" class="img-fluid" alt="An image showing two pieces of paper pinned to a board"></p>
</div>
</section>
<section id="using-pins-with-dropbox-personal-storage" class="level2">
<h2 class="anchored" data-anchor-id="using-pins-with-dropbox-personal-storage">Using pins with Dropbox personal storage</h2>
<p>Okay, let’s have a look at ways to solve my problem using pins. I am by nature a lazy person who looks for the easiest solutions to my problems. In particular, I habitually look for solutions that align nicely with my existing setup. In this case, my first thought was to use Dropbox. For many years now I have organised my “personal” files<sup>2</sup> on my local machine by keeping my git repos in <code>~/GitHub</code> and keeping my files that aren’t under version control (but should still be backed up) in <code>~/Dropbox</code>. Viewed from that perspective, the solution I’m looking for is something where I can keep my git repos in <code>~/GitHub</code>, but have the large data files stored in <code>~/Dropbox</code>.</p>
<p>This workflow is very easy to set up with pins. It’s not what I do now (more on that momentarily) but it was the first thing I tried and it works beautifully for personal use. All I have to do is create a Dropbox folder that I’ll use to store my pins (say, <code>~/Dropbox/Pins</code>), and then create a board in that folder. First, let’s make sure I have the folder:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_7212a78f918f330c65e28bea70103cc1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Dropbox/Pins"</span>)</span></code></pre></div>
</div>
<p>Now I’ll load the pins package and create a board in that folder.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_d11ca5376e296d9e616663ad3d885347">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb2-2">board_dropbox <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_folder</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Dropbox/Pins"</span>)</span>
<span id="cb2-3">board_dropbox</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pin board &lt;pins_board_folder&gt;
Path: '~/Dropbox/Pins'
Cache size: 0</code></pre>
</div>
</div>
<p>Let’s suppose I want to pin a copy of the <code>mpg</code> data from the ggplot2 package as a csv file. I’d do that by calling <code>pin_write()</code>:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-4_b5e66aa3a9dce8588733a4455802cbf2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_write</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">board =</span> board_dropbox,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mpg,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>,</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv"</span></span>
<span id="cb4-6">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Creating new version '20230613T004154Z-26aa0'
Writing to pin 'mpg'</code></pre>
</div>
</div>
<p>The <code>pin_write()</code> function allows you to supply more information and metadata than this, but – again – I’m not going to bother with all that here. The main thing for my purposes is that <code>pin_write()</code> has indeed written some files to disk:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_b5005892aac663e22f76f64bcfb84b27">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Dropbox/Pins"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/danielle/Dropbox/Pins/mpg
/home/danielle/Dropbox/Pins/mpg/20230613T004154Z-26aa0
/home/danielle/Dropbox/Pins/mpg/20230613T004154Z-26aa0/data.txt
/home/danielle/Dropbox/Pins/mpg/20230613T004154Z-26aa0/mpg.csv</code></pre>
</div>
</div>
<p>Okay that’s easy enough. The next step is to check if I can read the data back to R. That’s very easy to do with <code>pin_read()</code>. When I pass the board (<code>board_dropbox</code>) and the name of the pin (<code>"mpg"</code>) to this function, it returns the data:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-6_0426e2247b6e420b3778526804575775">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(board_dropbox, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 234 × 11
   manufacturer model  displ  year   cyl trans drv     cty   hwy fl    class
   &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;
 1 audi         a4       1.8  1999     4 auto… f        18    29 p     comp…
 2 audi         a4       1.8  1999     4 manu… f        21    29 p     comp…
 3 audi         a4       2    2008     4 manu… f        20    31 p     comp…
 4 audi         a4       2    2008     4 auto… f        21    30 p     comp…
 5 audi         a4       2.8  1999     6 auto… f        16    26 p     comp…
 6 audi         a4       2.8  1999     6 manu… f        18    26 p     comp…
 7 audi         a4       3.1  2008     6 auto… f        18    27 p     comp…
 8 audi         a4 qu…   1.8  1999     4 manu… 4        18    26 p     comp…
 9 audi         a4 qu…   1.8  1999     4 auto… 4        16    25 p     comp…
10 audi         a4 qu…   2    2008     4 manu… 4        20    28 p     comp…
# ℹ 224 more rows</code></pre>
</div>
</div>
<p>Yay!</p>
<p>There’s quite a bit going on under the hood, and I’m glossing over all sorts of details related to metadata, versioning and so on. There’s a reason why pins doesn’t simply dump the csv file into the root folder and call it a day. The extra stuff serves a purpose. But let’s not worry about that for now. What matters is that it works.</p>
<p>Unfortunately, my job is not quite finished. What I haven’t done yet is create a manifest file that summarises the content of the board. Fortunately that’s also easy to do:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_c13794266f79fd00bbb10429918b4a5b">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_board_manifest</span>(board_dropbox)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Manifest file written to root folder of board, as `_pins.yaml`</code></pre>
</div>
</div>
<p>This creates a <code>_pins.yaml</code> file that contains the relevant summary. The pins package doesn’t automate this part of the process, so you need to call <code>write_board_manifest()</code> every time you modify the pins stored in the board. But that’s pretty easy to do.</p>
<p>All in all, quite painless, and the really nice thing about it is that this dead-simple workflow is perfectly sufficient for my immediate needs. I can now use my <code>~/Dropbox/Pins</code> folder as the place to keep my big data files without messing up my git workflow at all. The pins package provides a suite of tools that allow me to manipulate pins, but this isn’t the post for that. All I care about right now is convincing myself that yes, this actually will address my immediate concern.</p>
<p>Yay again! Problem solved.</p>
<p>Well, sort of.</p>
</section>
<section id="making-a-huge-tiny-mistake" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="making-a-huge-tiny-mistake">Making a huge tiny mistake…</h2>
<p>The shortcoming of this approach is that it only works for me. Although my <code>~/Dropbox/Pins</code> folder is backed up, thereby ensuring I don’t lose my data files, it’s not shared with anyone else. One solution to this would of course be to share the folder. Dropbox supports that, and this would work perfectly well for small-group collaboration. If I’m working with a bunch of people on a project and we need shared copies of a data file, I could share the folder with them and everything would work for them too. But it’s not a <em>great</em> solution to the problem, and it’s not ideal if I want to create a public repository of data files that anyone can access. Yes, you <em>can</em> do that with Dropbox, but it’s not really what the service is supposed to be used for. To my mind, a better approach in that situation is to create a file storage bucket with Amazon AWS S3, or Google Cloud Storage, or whatever. If I then make that bucket publicly readable, anyone can access my pins. That seems like a much better plan to me.</p>
<p>Unfortunately, it’s at this point I made a tiiiiiny mistake. I decided to use Google Cloud Storage to host my buckets because that’s the cloud provider I’m most familiar with… but unbeknownst to me at the time it turns out that support for GCS buckets in the pins package is a work in progress. It mostly works but there’s a few features still missing, and I had to resort to a truly awful hack in order to get what I wanted.</p>
<p>But I’m getting ahead of myself. Let’s start out by creating the buckets and see what happens…</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/nicolas-brulois-EA4MvInOSy0-unsplash.jpg" class="img-fluid" alt="Two metal buckets hanging from hooks on a bright yellow wall"></p>
</div>
</section>
<section id="creating-and-configuring-the-storage-buckets" class="level2">
<h2 class="anchored" data-anchor-id="creating-and-configuring-the-storage-buckets">Creating and configuring the storage buckets</h2>
<p>Over the years I’ve done quite a bit of work using Google Cloud Platform. Small scale stuff, generally, but nevertheless I’ve had enough experience with it that I’m fairly comfortable with the <a href="https://cloud.google.com/sdk/gcloud/">gcloud</a> command line tool. So naturally, the first thing I did was create my buckets from the terminal.<sup>3</sup> This isn’t supposed to be a gcloud tutorial, but in case you’re interested there’s some <a href="https://cloud.google.com/storage/docs/creating-buckets#storage-create-bucket-cli">relevant documentation</a> that explains what I did. Everything in google cloud takes place within a project, specified by project ID (in this case <code>pins-389407</code>). For my own purposes I have two buckets in my pins project: <code>djnavarro-pins</code> is where I store publicly accessible data, and <code>djnavarro-private-pins</code> is where I keep private pins. Rather than set defaults, I have a tendency to do everything explicitly, so the <code>--project</code> flag is set in each command, as is the <code>--location</code> flag used to specify that I want my data to be stored in Sydney (also known as <code>australia-southeast1</code>). Anyway, here’s the command to create the bucket:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage buckets create gs://djnavarro-pins/ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span> pins-389407 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--location</span> australia-southeast1 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--uniform-bucket-level-access</span></span></code></pre></div>
<p>The <code>--uniform-bucket-level-access</code> flag is used to indicate that I’m not doing fancy file-specific access control. I’m too lazy or simple-minded for that: I want one bucket to be public, and another bucket to be private. By default the buckets are private, and to make all files in the bucket publicly readable (<a href="https://cloud.google.com/storage/docs/access-control/making-data-public#command-line_1">relevant documentation</a>) the command I want is this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage buckets add-iam-policy-binding gs://djnavarro-pins/ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--member</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>allUsers <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--role</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>roles/storage.objectViewer</span></code></pre></div>
<p>Cool. <a href="https://youtu.be/DlQoXP2XH68">Now I have a machine gun</a>. Um, sorry. Now I have a public GCS bucket. Yes. That’s what I meant. Let’s use it to store my pins.</p>
</section>
<section id="writing-pins-to-a-board-on-google-cloud-storage" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="writing-pins-to-a-board-on-google-cloud-storage">Writing pins to a board on Google Cloud Storage</h2>
<p>For the moment I’m going to look at this solely from my perspective: as the owner of this public bucket, how can I use it to store pins? I’m not going to concern myself with how other people can access it right now. I’ll get to that at the end of the post.</p>
<p>Let’s say I want to pin the <code>diamonds</code> data from the ggplot2 package as a csv file. In order to write anything to my bucket, I need to authenticate with google. I find this step clunky but doable. The first thing I need to do is obtain an authentication token, which I can obtain with the help of the <a href="https://gargle.r-lib.org/">gargle</a> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gargle)</span>
<span id="cb14-2">scope <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.googleapis.com/auth/cloud-platform"</span></span>
<span id="cb14-3">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_fetch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scopes =</span> scope)</span></code></pre></div>
</div>
<p>This workflow is designed for interactive use so there’s a confirmation process to follow. Once that’s done I can authenticate with the <a href="https://code.markedmondson.me/googleCloudStorageR/">googleCloudStorageR</a> package by passing the token to the <code>gcs_auth()</code> function. Once that’s done I can list the contents of my bucket with <code>gcs_list_objects()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(googleCloudStorageR)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> token)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<pre><code>                                                      name      size             updated
1                                               _pins.yaml 161 bytes 2023-06-12 07:33:04
2              warfpk_data/20230610T142554Z-b8888/data.txt 190 bytes 2023-06-10 14:26:11
3       warfpk_data/20230610T142554Z-b8888/warfpk_data.csv      8 Kb 2023-06-10 14:26:11
4             warfpk_draws/20230610T142202Z-5bd80/data.txt 200 bytes 2023-06-10 14:23:05
5     warfpk_draws/20230610T142202Z-5bd80/warfpk_draws.csv  281.4 Mb 2023-06-10 14:25:26
6           warfpk_summary/20230610T083635Z-340c1/data.txt 200 bytes 2023-06-10 08:38:44
7 warfpk_summary/20230610T083635Z-340c1/warfpk_summary.csv    1.2 Mb 2023-06-10 08:38:44</code></pre>
</div>
<p>As you can see from this file listing, there are already a few pins stored in this bucket. That’s because I’d been using it in <a href="../../pop-pk-models/">my previous post</a>, which was indeed the project in which I’d made my huge mistake.</p>
<p>The googleCloudStorageR package has quite a bit of functionality built into it, and I can read and write whatever I want to the bucket using this interface. However, what I really want to do is abstract over the low level processes using the pins package. So, very similar to what I did with my local dropbox folder, I’ll use the <code>board_gcs()</code> function to treat the <code>gs://djnavarro-pins</code> bucket as a board:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb17-2">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_gcs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<p>Because I’ve authenticated and because I have write access to the bucket, I can write my pins directly to the board using <code>pin_write()</code>. The command for a board stored as a GCS bucket is essentially identical to the command I used with my local folder earlier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_write</span>(</span>
<span id="cb18-2">  board, </span>
<span id="cb18-3">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>diamonds, </span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span>, </span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv"</span></span>
<span id="cb18-6">)</span></code></pre></div>
</div>
<p>Under the hood the work is done by googleCloudStorageR, and when I run this command it whines a little about needing <code>predefinedAcl = "bucketLevel"</code>, but it’s smart enough to get the job done anyway. In principle what I should be doing to prevent the warning messages is pass this argument to <code>pin_write()</code> via the dots, but unfortunately <code>pin_write()</code> appears to be a bit trigger happy and it throws an error if I do that. As far as I can tell what’s happening is that pins is incorrectly guessing that the argument is misspelled, so for the time being I’ll just have to live with googleCloudStorageR grumbling at me.</p>
<p>What really matters here is that it works. We can verify that the files have been written as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<pre><code>                                                      name      size             updated
1                                               _pins.yaml 161 bytes 2023-06-12 07:33:04
2                 diamonds/20230612T073405Z-c9e9b/data.txt 189 bytes 2023-06-12 07:34:05
3             diamonds/20230612T073405Z-c9e9b/diamonds.csv    2.6 Mb 2023-06-12 07:34:14
4              warfpk_data/20230610T142554Z-b8888/data.txt 190 bytes 2023-06-10 14:26:11
5       warfpk_data/20230610T142554Z-b8888/warfpk_data.csv      8 Kb 2023-06-10 14:26:11
6             warfpk_draws/20230610T142202Z-5bd80/data.txt 200 bytes 2023-06-10 14:23:05
7     warfpk_draws/20230610T142202Z-5bd80/warfpk_draws.csv  281.4 Mb 2023-06-10 14:25:26
8           warfpk_summary/20230610T083635Z-340c1/data.txt 200 bytes 2023-06-10 08:38:44
9 warfpk_summary/20230610T083635Z-340c1/warfpk_summary.csv    1.2 Mb 2023-06-10 08:38:44</code></pre>
</div>
<p>Brilliant! It does work! The files for the diamonds pin have been written. <a href="https://youtu.be/QcCHLfVdhXg">Everything is fine</a>. Except… it isn’t. Notice that the <code>_pins.yaml</code> manifest file is still 161 bytes in size. It hasn’t been update to add an entry for the diamonds data, which we can confirm by downloading the file directly using <code>googleCloudStorageR::gcs_get_object()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_get_object</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins/_pins.yaml"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.yaml</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>()</span></code></pre></div>
</div>
<pre><code>✔ Downloaded and parsed _pins.yaml into R object of class: character
|
  warfpk_data:
  - warfpk_data/20230610T142554Z-b8888/
  warfpk_draws:
  - warfpk_draws/20230610T142202Z-5bd80/
  warfpk_summary:
  - warfpk_summary/20230610T083635Z-340c1/</code></pre>
<p>Okay, fair enough. That’s not at all surprising, because I haven’t called <code>write_board_manifest()</code> to update the manifest file yet. Unfortunately, this is the moment at which I had to resort to a <a href="https://en.wikipedia.org/wiki/Alexander_and_the_Terrible,_Horrible,_No_Good,_Very_Bad_Day">terrible horrible no good very bad hack</a>.<sup>4</sup></p>
<p>This is the “needles” part of my “pins and needles” story.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/lisa-woakes-5FTXPrP2k3c-unsplash.jpg" class="img-fluid" alt="Numerous pins pushed into a colourful pin cushion"></p>
</div>
</section>
<section id="the-terrible-horrible-no-good-very-bad-hack" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-terrible-horrible-no-good-very-bad-hack">The terrible horrible no good very bad hack</h2>
<p>There’s a bit of a painful thing that follows because pins doesn’t currently have working <code>pin_list()</code> method for google cloud storage. This in turn means that I can’t currently use <code>write_board_manifest()</code> to write a manifest file for my board, because it relies on the <code>pin_list()</code> function to do part of the work. That’s a huge pain. A little browsing on github reassures me that the <a href="https://github.com/rstudio/pins-r/pull/695">developers are well aware of the problem</a>, and addressing this is indeed on the to-do list. Awesome. I’m a patient person, and happy to wait for it to be addressed. Unfortunately patience doesn’t solve my problem in the here-and-now, so while I’m waiting I decided to put together some helper functions that are good enough for my immediate needs. This <code>pin_list_gcs()</code> function returns a character vector with the names of my stored pins:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">pin_list_gcs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(board, ...) {</span>
<span id="cb23-2">  googleCloudStorageR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bucket)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> _, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/.*"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> _) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span>
<span id="cb23-6">}</span></code></pre></div>
</div>
<p>Now a little bit of evil, in which I do the thing you should never ever do. I’m going to mess with the internals of the pins package and overwrite its internal <code>pins_list.pins_board_gcs()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlockBinding</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.symbol</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pin_list.pins_board_gcs"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pins"</span>))</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assignInNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pin_list.pins_board_gcs"</span>, pin_list_gcs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pins"</span>)</span></code></pre></div>
</div>
<p>I am a terrible person.</p>
<p>But you knew that already, so let’s move on.</p>
<p>My next step is to write an S3 method that allows me to write a manifest file for my :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">write_board_manifest_yaml.pins_board_gcs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(board, manifest, ...) {</span>
<span id="cb25-2">  temp_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> withr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_tempfile</span>()</span>
<span id="cb25-3">  yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_yaml</span>(manifest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> temp_file)</span>
<span id="cb25-4">  googleCloudStorageR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_upload</span>(</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> temp_file, </span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bucket, </span>
<span id="cb25-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/yaml"</span>,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_pins.yaml"</span></span>
<span id="cb25-9">  )</span>
<span id="cb25-10">}</span></code></pre></div>
</div>
<p>Now this works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_board_manifest_yaml</span>(board, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">manifest =</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_manifest</span>(board))</span></code></pre></div>
</div>
<p>We can verify that we’ve written the updated file. For reasons that escape me, this won’t work unless you start a new session and re-authenticate in the process<sup>5</sup>. If you don’t do that you’ll just get the old version of the manifest file. I have no idea why. Anyway here’s the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_get_object</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins/_pins.yaml"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.yaml</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>()</span></code></pre></div>
</div>
<pre><code>✔ Downloaded and parsed _pins.yaml into R object of class: character
|
  diamonds:
  - diamonds/20230612T071111Z-c9e9b/
  warfpk_data:
  - warfpk_data/20230610T142554Z-b8888/
  warfpk_draws:
  - warfpk_draws/20230610T142202Z-5bd80/
  warfpk_summary:
  - warfpk_summary/20230610T083635Z-340c1/</code></pre>
<p>Similarly, if we now list the contents of the bucket we can see that it’s all been updated:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<pre><code>                                                      name      size             updated
1                                               _pins.yaml 206 bytes 2023-06-12 07:39:53
2                 diamonds/20230612T073405Z-c9e9b/data.txt 189 bytes 2023-06-12 07:34:05
3             diamonds/20230612T073405Z-c9e9b/diamonds.csv    2.6 Mb 2023-06-12 07:34:14
4              warfpk_data/20230610T142554Z-b8888/data.txt 190 bytes 2023-06-10 14:26:11
5       warfpk_data/20230610T142554Z-b8888/warfpk_data.csv      8 Kb 2023-06-10 14:26:11
6             warfpk_draws/20230610T142202Z-5bd80/data.txt 200 bytes 2023-06-10 14:23:05
7     warfpk_draws/20230610T142202Z-5bd80/warfpk_draws.csv  281.4 Mb 2023-06-10 14:25:26
8           warfpk_summary/20230610T083635Z-340c1/data.txt 200 bytes 2023-06-10 08:38:44
9 warfpk_summary/20230610T083635Z-340c1/warfpk_summary.csv    1.2 Mb 2023-06-10 08:38:44</code></pre>
</div>
<p>Yup, it works. But I’m under no illusions. This is not a good workflow. Messing around with the internals of someone else’s package is… bad. Very bad. I do not recommend anyone do this. This is purely a temporary fix I’m adopting for the time being while GCS support in pins is incomplete.</p>
<p>Okay, whatever. Let’s move on, shall we? Ugly hack notwithstanding, I now have a workflow that allows me to use a public GCS bucket to store my pins. It’s good enough for now, so I’ll now take a look at how <em>other</em> people can read pins from this bucket.</p>
</section>
<section id="the-read-only-workflow" class="level2">
<h2 class="anchored" data-anchor-id="the-read-only-workflow">The read-only workflow</h2>
<p>The nice thing about cloud storage services like AWS S3 and GCS is that they provide public, human readable URLs for shared files. My <code>djnavarro-pins</code> bucket, for instance, is publicly available at <code>https://storage.googleapis.com/djnavarro-pins/</code>. Any R users who wants to use one of my pins can do so using the <code>pins::board_url()</code> function. We can create a read-only board by passing it the path to the manifest file, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">read_only_board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_url</span>(</span>
<span id="cb31-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://storage.googleapis.com/djnavarro-pins/_pins.yaml"</span></span>
<span id="cb31-3">)</span></code></pre></div>
</div>
<p>Since this other person isn’t me and doesn’t know what pins are stored here, they might want to use the <code>pin_search()</code> function to get a listing of all the pins, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_search</span>(read_only_board)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 6
  name           type  title        created             file_size meta      
  &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;        &lt;dttm&gt;              &lt;fs::byt&gt; &lt;list&gt;    
1 diamonds       csv   diamonds: a… 2023-06-12 17:34:05     2.64M &lt;pins_met&gt;
2 warfpk_data    csv   warfpk_data… 2023-06-11 00:25:54     8.01K &lt;pins_met&gt;
3 warfpk_draws   csv   warfpk_draw… 2023-06-11 00:22:02   281.39M &lt;pins_met&gt;
4 warfpk_summary csv   warfpk_summ… 2023-06-10 18:36:35     1.15M &lt;pins_met&gt;</code></pre>
</div>
</div>
<p>Cool. Now that we know what pins are available, we can read the data stored in the “diamonds” pin directly into R by calling <code>pin_read()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(read_only_board, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-2">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>A nice thing about using <code>pin_read()</code> rather than downloading the file directly is that the pins package automatically creates a local cache of previously-downloaded pins. You don’t have to download the same file over and over when re-running your code. I’m not going to go into those details here, but I will mention that it also provides functions that let you manage this cache without much difficulty. From this perspective, everything “just works”. It’s really quite nice.</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>On the whole I’m very happy with pins. It solves a real problem I have, and the interface is nice. I’ll probably use it for other things in the future. The specific issue I ran into with GCS boards is an annoyance, but one that I’m pretty certain will vanish as GCS support in pins matures. No big deal.</p>
<p>That being said, because I am very uncomfortable with the fact that I’ve published my terrible horrible no good very bad hack to the internet, I will say it again… as a general long-term strategy, my workflow is <em>terrible</em> and I have no intention whatsoever of relying on it. Nobody else should rely on my terrible horrible no good very bad hack. I implemented it as a hotfix, nothing else. Under no circumstances is it wise to rely on a method that fucks around with the internals of a package.</p>
<p>Anyways… that’s about all I had to say really.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Indeed, GitHub won’t let you push a file that large to the remote repository unless you use large file storage, which is not a thing I want to do.↩︎</p></li>
<li id="fn2"><p>In this case what I really mean by “personal” isn’t that the files are sensitive in any way, just that I’m not trying to share them with anyone else. My workflow is designed to allow <em>me</em> to reproduce anything I’ve done in the past if my laptop mysteriously catches fire. At this point I’m not at all concerned about whether anyone else can reproduce it.↩︎</p></li>
<li id="fn3"><p>As a disclaimer: I am <em>not</em> a fan of so-called “command line bullshittery”. There’s nothing special about working from the command line, and I feel obliged to point out that you don’t actually need to use the gcloud CLI to do any of this. The google cloud console lets you do the exact same thing with a GUI. No big deal. If that approach feels easier to you, go for it!↩︎</p></li>
<li id="fn4"><p>Some hacks are like that. Even in Australia.↩︎</p></li>
<li id="fn5"><p>Actually, it does still work even without re-authentication if you explicitly specify the <code>generation</code> argument to <code>gcs_get_object()</code> but whatever.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pins and Needles},
  date = {2023-06-12},
  url = {https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pins and Needles.”</span> June 12, 2023.
<a href="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles">https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/index.html</guid>
  <pubDate>Sun, 11 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/immo-wegmann-zqO87IQK6c0-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Building a population pharmacokinetic model with Stan</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><strong>Note</strong>: This is the third post in a series on pharmacometric modelling, and implicitly assumes some knowledge of the concepts outlined in the first two:</p>
<ul>
<li>The first post talked about <a href="../../non-compartmental-analysis/">non-compartmental analysis</a> and in the process introduced some basic terminology used in pharamacometrics</li>
<li>The second post talked about building <a href="../../stan-ode/">compartmental models in Stan</a> and introduced a lot of the ideas I’ll build on here</li>
</ul>
<p>In the earlier posts I didn’t touch any real data sets, and only considered an idealised case where you have data from only a single person and therefore have no need for population models. I’ll address both of those shortcomings in this post.</p>
<section id="prologue" class="level2">
<h2 class="anchored" data-anchor-id="prologue">Prologue</h2>
<p>All the way back in 2006 I published a paper in the <em>Journal of Mathematical Psychology</em> called “Modelling individual differences with Dirichlet processes” with a bunch of no-name coauthors.<sup>1</sup> In brutal honesty the paper should probably have been called “Everything Danielle knows about Dirichlet processes, with a fig leaf of pretense of applying it to data”, but it did allow me to use the following utterly unhinged quote from an anonymous reviewer on an earlier paper:</p>
<blockquote class="blockquote">
<p>I am surprised that the author has used this data set. In my lab, when we collect data with such large individual differences, we refer to the data as “junk”. We then re-design our stimuli and/or experimental procedures, and run a new experiment. The junk data never appear in publications</p>
</blockquote>
<p>This attitude, which I have encountered from time to time in research, utterly puzzles me. One of the most salient things about human thought and behaviour is that… well, people think and act differently to each other. If you want to understand the human mind, you kinda have to engage with that fact and develop experiments and modelling techniques that can accommodate this variation. I expressed the idea schematically in Figure 2 of the paper:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/population-models.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I am still quite fond of this figure. It nicely captures the idea that when developing population models we are usually operating in three spaces at once:</p>
<ul>
<li>At the <strong>data level</strong> we have observable quantities that we can measure in our experiments. Each person in our study can have different data values, and people can differ from each other in all kinds of ways</li>
<li>At the <strong>individual level</strong> we seek to infer the parameters of a model that can summarise the observations from a single person in a theoretically meaningful way, and account for how those observations might vary as a function of covariates.</li>
<li>At the <strong>population level</strong> we seek to infer parameters that describe the typical parameter values associated with individuals, and how those parameter values typically vary across individuals.</li>
</ul>
<p>Shockingly, it turns out that this basic framework is not even slightly specific to psychology. It’s something that shows up in almost every scientific domain, and there are standard statistical tools that we use to capture this idea that are surprisingly similar to one another even when the domain of application differs.</p>
<p>And so it transpires that, as I continue the process of teaching myself pharmacometrics, I discover that the modelling tools used in <strong>population pharmacokinetics</strong> (pop-PK) are shockingly familiar to me. So let’s dive in, shall we?</p>
</section>
<section id="some-resources" class="level2">
<h2 class="anchored" data-anchor-id="some-resources">Some resources</h2>
<p>To make the transition from modelling toy data sets to dealing with real ones, it helps a lot to have some real data to work with, and a worked example that shows how real data are analysed in practice. To that end, I’ve been relying on resources made publicly available by the <a href="https://www.paganz.org/">Population Approach Group of Australia and New Zealand</a>, who have a series of <a href="https://www.paganz.org/resources/">handy tutorials</a> for folks interested in pharmacometric modelling. The one I’m working through at the moment is a <a href="https://www.paganz.org/wp-content/uploads/2016/06/PAWs-Beginners-2019.zip">2019 workshop on pop-PK models</a> (link goes to a zip file), which provides a very nice tutorial on building such models.</p>
<p>The only catch, from my perspective, is that the tutorial uses the <a href="https://www.iconplc.com/solutions/technologies/nonmem/">NONMEM</a> pharmacometrics software, and I don’t have access to NONMEM. So as a fun little exercise, I’m going to translate some of the code from the workshop from NONMEM to Stan (and R).</p>
</section>
<section id="the-warfarin-data-set" class="level2">
<h2 class="anchored" data-anchor-id="the-warfarin-data-set">The warfarin data set</h2>
<p>The data set used in the tutorial is based on some old studies in the 1960s on the pharmacokinetics of <a href="https://en.wikipedia.org/wiki/Warfarin">warfarin</a>, an anticoagulant medication that is probably well-known to most people (I mean, even I know what warfarin is). The data is provided as a csv file called “warfpk.csv”, so my first step will be to import the data into R so that I can work with it.</p>
<section id="parsing-the-data" class="level3">
<h3 class="anchored" data-anchor-id="parsing-the-data">Parsing the data</h3>
<p>Reading the data into R using <code>readr::read_csv()</code> turns out to be mostly straightforward. Data are delimited with commas and there’s very little weirdness to deal with. The only thing that is non-standard for an R user is that the data file uses <code>"."</code> to specify missing values (which I’m guessing is standard in pharmacometrics), so I’ll need to state that explicitly when reading the data into R to ensure that numeric variables with missing values are correctly parsed as numeric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">warfpk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warfpk.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-2">warfpk</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 289 × 10
   `#ID`  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0       0    66.7    50     1   100    -2     0  NA       1
 2 0       0.5  66.7    50     1    NA    NA     1   0       0
 3 0       1    66.7    50     1    NA    NA     1   1.9     0
 4 0       2    66.7    50     1    NA    NA     1   3.3     0
 5 0       3    66.7    50     1    NA    NA     1   6.6     0
 6 0       6    66.7    50     1    NA    NA     1   9.1     0
 7 0       9    66.7    50     1    NA    NA     1  10.8     0
 8 0      12    66.7    50     1    NA    NA     1   8.6     0
 9 0      24    66.7    50     1    NA    NA     1   5.6     0
10 0      36    66.7    50     1    NA    NA     1   4       0
# ℹ 279 more rows</code></pre>
</div>
</div>
<p>These column names are pretty standard in the field, in part because standard software like NONMEM expects these names. They’re perfectly fine for R too, with one minor exception: I’m going to rename the id variable using <code>dplyr::rename()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">warfpk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb3-2">warfpk</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 289 × 10
   id     time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0       0    66.7    50     1   100    -2     0  NA       1
 2 0       0.5  66.7    50     1    NA    NA     1   0       0
 3 0       1    66.7    50     1    NA    NA     1   1.9     0
 4 0       2    66.7    50     1    NA    NA     1   3.3     0
 5 0       3    66.7    50     1    NA    NA     1   6.6     0
 6 0       6    66.7    50     1    NA    NA     1   9.1     0
 7 0       9    66.7    50     1    NA    NA     1  10.8     0
 8 0      12    66.7    50     1    NA    NA     1   8.6     0
 9 0      24    66.7    50     1    NA    NA     1   5.6     0
10 0      36    66.7    50     1    NA    NA     1   4       0
# ℹ 279 more rows</code></pre>
</div>
</div>
<p>Looking at this output more carefully, there’s one slightly puzzling thing here: the <code>id</code> column looks like it’s supposed to be a numeric id for the study participants, but R has parsed as a character vector. So there must be one non-numeric value in this column. I’d better find out what’s going on there. A bit of digging reveals there’s something peculiar going on with subject 12. Using <code>dplyr::filter()</code> to extract the data for that person we get this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 10
   id     time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 12      0    75.3    32     1   113    -2     0  NA       1
 2 12      1.5  75.3    32     1    NA    NA     1   0.6     0
 3 #12     3    75.3    32     1    NA    NA     1   2.8     0
 4 12      6    75.3    32     1    NA    NA     1  13.8     0
 5 12      9    75.3    32     1    NA    NA     1  15       0
 6 12     24    75.3    32     1    NA    NA     1  10.5     0
 7 12     36    75.3    32     1    NA    NA     1   9.1     0
 8 12     48    75.3    32     1    NA    NA     1   6.6     0
 9 12     72    75.3    32     1    NA    NA     1   4.9     0
10 12     96    75.3    32     1    NA    NA     1   2.4     0
11 12    120    75.3    32     1    NA    NA     1   1.9     0</code></pre>
</div>
</div>
<p>My first thought upon seeing this was that it must be a typo in the data file. No problem, it’s easy enough to remove the <code>#</code> character and convert the id variable to numeric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">warfpk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb7-6">  )</span>
<span id="cb7-7">warfpk</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 289 × 10
      id  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     0   0    66.7    50     1   100    -2     0  NA       1
 2     0   0.5  66.7    50     1    NA    NA     1   0       0
 3     0   1    66.7    50     1    NA    NA     1   1.9     0
 4     0   2    66.7    50     1    NA    NA     1   3.3     0
 5     0   3    66.7    50     1    NA    NA     1   6.6     0
 6     0   6    66.7    50     1    NA    NA     1   9.1     0
 7     0   9    66.7    50     1    NA    NA     1  10.8     0
 8     0  12    66.7    50     1    NA    NA     1   8.6     0
 9     0  24    66.7    50     1    NA    NA     1   5.6     0
10     0  36    66.7    50     1    NA    NA     1   4       0
# ℹ 279 more rows</code></pre>
</div>
</div>
<p>For the purposes of this post I am going to run with this version of the data, but later on it’s going to turn out that the data from participant 12 is the least well-fit by the model, which is a hint that this might have been deliberate. In fact, as I started doing some more digging into NONMEM and learned how to decipher a NONMEM input file, I discovered that the <code>#</code> character appears to be serving a specific function when used as a prefix in this data file. Per this line of the input (see later), it’s being used as an instruction to tell NONMEM to ignore the observation:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb9-1">$DATA ..\warfpk.csv IGNORE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>#</span></code></pre></div>
<p>What I’m guessing here is that this observation was dropped from the data set in the tutorial for some reason. It’s not obvious to me what the specific reason was for omitting that observation, and it’s possible I should also be filtering out that case, but I’m not going to worry about that for the purposes of this blog post.</p>
</section>
<section id="interpreting-the-data" class="level3">
<h3 class="anchored" data-anchor-id="interpreting-the-data">Interpreting the data</h3>
<p>Now that I have the data, I need to make sense of it. The csv file itself doesn’t give much information about the variables, but when digging into the NONMEM input files included with the workshop materials I found the citations to the original papers from whence the data came. The data originate in papers by O’Reilly and colleagues, published in 1963 and 1968. Both papers are available online in full text, and after reading through them, we can reverse engineer (most of!) a data dictionary:</p>
<ul>
<li><code>id</code>: Numeric value specifying the arbitrary identifier for each person</li>
<li><code>time</code>: Time elapsed since dose was administered (in hours)</li>
<li><code>wt</code>: Weight of each person (in kilograms)</li>
<li><code>age</code>: Age of each person (in years)</li>
<li><code>sex</code>: Biological sex of each person (0 = female, 1 = male)<sup>2</sup></li>
<li><code>amt</code>: Dose administered to this person at this time point (in milligrams)</li>
<li><code>rate</code>: Uncertain what this refers to, but it has value -2 when drug is administered and missing otherwise</li>
<li><code>dvid</code>: Appears to be a dummy variable indicating whether the dependent variable was measured at this time point (0 = false, 1 = true)</li>
<li><code>dv</code>: Measured value of the dependent variable (plasma warfarin concentration, in mg/L)</li>
<li><code>mdv</code>: Appears to be a dummy variable that is the reverse of <code>dvid</code>, and is presumably an indicator variable whose meaning is “missing dependent variable” (0 = false, 1 = true)</li>
</ul>
<p>One peculiarity of the data structure that appears to be quite standard in pharmacokinetics is that the data frame incorporates both <strong>measurement events</strong> where the drug concentration is measured, and <strong>dosing events</strong> where a dose of the drug is administered. It’s a perfectly sensible way to organise the data, but later on it will be convenient to separate them in order to pass the data to Stan in a format that it expects. To get a sense of what the dosing events look like, we can extract the relevant subset of the data frame by filtering the data on <code>dvid</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 10
      id  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     0     0  66.7    50     1   100    -2     0    NA     1
 2     1     0  66.7    50     1   100    -2     0    NA     1
 3     2     0  66.7    31     1   100    -2     0    NA     1
 4     3     0  80      40     1   120    -2     0    NA     1
 5     4     0  40      46     0    60    -2     0    NA     1
 6     5     0  75.3    43     1   113    -2     0    NA     1
 7     6     0  60      36     0    90    -2     0    NA     1
 8     7     0  90      41     1   135    -2     0    NA     1
 9     8     0  50      27     0    75    -2     0    NA     1
10     9     0  70      28     1   105    -2     0    NA     1
# ℹ 22 more rows</code></pre>
</div>
</div>
<p>Notably, not everyone is given the same dose, and in an utterly unsurprising turn of events it turns out that the dose is calculated based on weight (which is in turn, I’m told, a proxy for the volume of distribution in systemic circulation):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb12-2">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(wt, amt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dose (mg)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/weight-dose-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay, that all makes sense.</p>
<p>Next, let’s take a look at the data from a single subject. The observations in the <code>warfpk</code> data set appear to aggregate data from multiple studies, with the consequence that different subjects can have different measurement schedules. Here’s participant 1, for instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 10
     id  time    wt   age   sex   amt  rate  dvid    dv   mdv
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1    24  66.7    50     1    NA    NA     1   9.2     0
2     1    36  66.7    50     1    NA    NA     1   8.5     0
3     1    48  66.7    50     1    NA    NA     1   6.4     0
4     1    72  66.7    50     1    NA    NA     1   4.8     0
5     1    96  66.7    50     1    NA    NA     1   3.1     0
6     1   120  66.7    50     1    NA    NA     1   2.5     0</code></pre>
</div>
</div>
<p>A lot of the people in the data set have measurements taken on this schedule, but not everyone does. For comparison purposes, here’s participant 2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 10
      id  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     2   0.5  66.7    31     1    NA    NA     1   0       0
 2     2   2    66.7    31     1    NA    NA     1   8.4     0
 3     2   3    66.7    31     1    NA    NA     1   9.7     0
 4     2   6    66.7    31     1    NA    NA     1   9.8     0
 5     2  12    66.7    31     1    NA    NA     1  11       0
 6     2  24    66.7    31     1    NA    NA     1   8.3     0
 7     2  36    66.7    31     1    NA    NA     1   7.7     0
 8     2  48    66.7    31     1    NA    NA     1   6.3     0
 9     2  72    66.7    31     1    NA    NA     1   4.1     0
10     2  96    66.7    31     1    NA    NA     1   3       0
11     2 120    66.7    31     1    NA    NA     1   1.4     0</code></pre>
</div>
</div>
<p>This has implications for our model structure: we can’t assume a single set of measurement times that will be identical for all subjects. From a Stan point of view, this means that if we try to pass the observed plasma concentrations as an array of vectors (one per person), it won’t work. Since the vectors can have different lengths that data structure would be a ragged array, and Stan doesn’t allow those. Instead, we’re going to have to pass all the observations as one long vector and use indexing vectors to specify the “breakpoints” that indicate when the data from each person starts and stops.</p>
</section>
</section>
<section id="why-we-need-population-models" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="why-we-need-population-models">Why we need population models</h2>
<p>Now that we have a sense of the structure of the data, we can start drawing some plots designed to tell us what’s going on. I’ll start with a very naive kind of visualisation. Here’s a scatterplot of time versus measured drug concentration that doesn’t give you any indication about which observations belong to which person.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb17-3">    dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only include measured times</span></span>
<span id="cb17-4">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dv) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore missing dv cases</span></span>
<span id="cb17-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb17-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time since dose (hours)"</span>, </span>
<span id="cb17-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb17-12">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/warfarin-data-raw-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Looking at the data like this gives you the false impression that the data set is rather noisy.<sup>3</sup> To see why this is misleading, let’s add some lines that connect data from the same person:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb18-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time since dose (hours)"</span>, </span>
<span id="cb18-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb18-9">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/warfarin-data-connected-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The pattern of lines hints that a lot of this “noise” is not in fact noise, it’s systematic variation across people. This becomes more obvious when we disaggregate the data further and plot the observations from each person in a separate panel:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb19-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time since dose (hours)"</span>, </span>
<span id="cb19-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb19-10">  )</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/warfarin-data-disaggregated-1.png" class="img-fluid" width="1536"></p>
</div>
</div>
<p>When plotted this way, it’s really clear that the data from each person is in fact quite precise. There’s very little noise in any of these individual-subject plots. They’re all very smooth looking curves: it just so happens that each person is unique and has their own curve. In other words, the vast majority of the variation is systematic difference across people: it’s not measurement error.</p>
<p>When data have this structure, you really (really really really really) need to adopt a statistical approach that accommodates individual differences. You need a pop-PK model.<sup>4</sup></p>
</section>
<section id="deciphering-nonmem-specifications" class="level2">
<h2 class="anchored" data-anchor-id="deciphering-nonmem-specifications">Deciphering NONMEM specifications</h2>
<p>Okay. Time for a digression, sort of. My primary goal in this post is to implement a pop-PK model from scratch in Stan, using material from a workshop on NONMEM as my launching point. There’s a twin motivation here. On the one hand, I want to extend the Stan code from my last pharmacometrics post so that it can handle pop-PK models. But on the other hand, I also want to familiarise myself with the nomenclature used in the field, which derives heavily from notation used in NONMEM. To that end, I’m going to start trying to write my model using NONMEM-style variable names, and in the process familiarise myself with how NONMEM input files are structured.</p>
<p>Reading NONMEM code takes a bit of effort if, like me, you’re not used to it. Decoding a NONMEM model specification requires you to understand the convention used to describe models, and to understand the syntax used in the input files. I’ll start with the notation.</p>
<section id="notation-from-nonmem" class="level3">
<h3 class="anchored" data-anchor-id="notation-from-nonmem">Notation from NONMEM</h3>
<p>To make sense of the statistical notation used in NONMEM specifications, I relied quite heavily on the two NONMEM tutorial papers by Bauer (2019) were helpful for me, and an older paper by Bauer et al (2007) that is a little more explicit about the statistical formulation of the models. I’m not 100% certain I’ve done the decoding correctly, but as far as I can tell the following syntactic conventions are very often used:</p>
<ul>
<li>Italicised lower case Greek symbols refer to scalar parameters: <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Csigma">, etc</li>
<li>Boldfaced upper case Greek symbols denote parameter vectors: <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, etc</li>
<li>Boldfaced upper case Greek symbols denote parameter matrices: <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">, etc</li>
</ul>
<p>There is also a convention assigning meaning to the different Greek letters:</p>
<ul>
<li>Population mean<sup>5</sup> parameters are denoted with thetas (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">)</li>
<li>Population standard deviation<sup>6</sup> parameters are denoted (<img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">)</li>
<li>Individual departures from population mean are denoted with etas (<img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta">)</li>
<li>Standard deviation of measurement error terms is denoted with sigmas (<img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">)</li>
<li>Difference between individual subject expected values and observation are denoted with epsilons, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"></li>
</ul>
<p>To help myself keep the notation straight, I’ll consider a simple one-compartment intravenous bolus model with first-order elimination, because unlike other models that one has a nice clean analytical closed form for the pharmacokinetic function. If we let <img src="https://latex.codecogs.com/png.latex?f(t,%20k,%20V,%20D)"> denote the pharmacokinetic function that describes how drug concentration changes as a function of time <img src="https://latex.codecogs.com/png.latex?t">, dose <img src="https://latex.codecogs.com/png.latex?D">, elimination rate <img src="https://latex.codecogs.com/png.latex?k">, and volume of distribution <img src="https://latex.codecogs.com/png.latex?V">, this model asserts that the blood plasma drug concentration decays exponentially with time:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(t,%20k,%20V,%20D)%20=%20%5Cfrac%7BD%7D%7BV%7D%20%5Cexp(-kt)%0A"></p>
<p>In this model, the measurement time <img src="https://latex.codecogs.com/png.latex?t"> and dose <img src="https://latex.codecogs.com/png.latex?D"> (assumed to be administered at time <img src="https://latex.codecogs.com/png.latex?t%20=%200">) are both part of the study design. The other two quantities, <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?V">, are model parameters that can be different for every person. Because we’re allowing for the possibility that the parameters can vary from person to person, we’ll need notation to describe this variation. At a population level, we have a parameter vector <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D%20=%20(%5Ctheta_1,%20%5Ctheta_2)"> where – somewhat arbitrarily – I’ll say that <img src="https://latex.codecogs.com/png.latex?%5Ctheta_1"> denotes the typical value for the elimination rate <img src="https://latex.codecogs.com/png.latex?k">, and <img src="https://latex.codecogs.com/png.latex?%5Ctheta_2"> is the typical value for the volume of distribution <img src="https://latex.codecogs.com/png.latex?V">. Since these quantities can vary from person to person, we would also – assuming for the sake of simplicity that there is no population correlation between them<sup>7</sup> – have a scale vector <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Comega%7D%20=%20(%5Comega_1,%20%5Comega_2)">.</p>
<p>In this scenario, then, the parameters for the i-th participant would be some function of the typical values <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta"> and the random effects <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i"> associated with that person. I’m not certain if there’s a standard notation used to describe these transformation functions, so I’ll just use <img src="https://latex.codecogs.com/png.latex?g_1()"> and <img src="https://latex.codecogs.com/png.latex?g_2()"> to denote these:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ak_i%20&amp;=&amp;%20g_1(%5Ctheta_1,%20%5Ceta_%7Bi1%7D)%20%5C%5C%0AV_i%20&amp;=&amp;%20g_2(%5Ctheta_2,%20%5Ceta_%7Bi2%7D)%0A%5Cend%7Barray%7D%0A"></p>
<p>When specifying the statistical model, it’s conventional to assume that the random effect terms <img src="https://latex.codecogs.com/png.latex?%5Ceta_%7Bik%7D"> are normally distributed with mean zero and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Comega_k">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_%7Bik%7D%20%5Csim%20%5Cmbox%7BNormal%7D(0,%20%5Comega_k)%0A"></p>
<p>Next, let’s consider the notation for the pharmacokinetic function <img src="https://latex.codecogs.com/png.latex?f()"> itself. Earlier I wrote out the specific form of this function for a particular model, but since the precise form is different from model to model, we could refer to it generically as <img src="https://latex.codecogs.com/png.latex?f(t,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)">.</p>
<p>If measurement errors are assumed to be additive – they don’t have to be, but I’m only considering additive error models in this post – the observed concentration <img src="https://latex.codecogs.com/png.latex?y_%7Bij%7D"> for the i-th person at the j-th time point <img src="https://latex.codecogs.com/png.latex?t_%7Bij%7D"> can be expressed as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_%7Bij%7D%20=%20f(t_%7Bij%7D,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)%20+%20%5Cepsilon_%7Bij%7D%0A"></p>
<p>In this expression, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_%7Bij%7D"> is the error associated with person i and time j, and we presume these errors are normally distributed with mean zero and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cepsilon_%7Bik%7D%20%5Csim%20%5Cmbox%7BNormal%7D(0,%20%5Csigma)%0A"></p>
<p>With that as preliminary notational exposition, I think I can now make sense of how the model specification in NONMEM is expressed. So let’s turn to that now…</p>
</section>
<section id="reading-a-nonmem-control-file" class="level3">
<h3 class="anchored" data-anchor-id="reading-a-nonmem-control-file">Reading a NONMEM control file</h3>
<p>One thing that I really appreciated when going through the tutorial materials is that they include actual NONMEM model specifications that workshop participants can play with. If you unfold the code below, you can see the complete NONMEM <strong>control file</strong> (which uses a .ctl file extension) for a NONMEM model of the warfarin data:</p>
<div class="cell">
<details>
<summary>The complete NONMEM control file</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource fortran number-lines code-with-copy"><code class="sourceCode fortranfixed"><span id="cb20-1">;O<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>REILLY RA, AGGELER PM. STUDIES ON COUMARIN ANTICOAGULANT DRUGS</span>
<span id="cb20-2">;INITIATION OF WARFARIN THERAPY WITHOUT A LOADING DOSE.</span>
<span id="cb20-3">;CIRCULATION <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1968</span>;<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">169</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span></span>
<span id="cb20-4">;</span>
<span id="cb20-5">;O<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>REILLY RA, AGGELER PM, LEONG LS. STUDIES OF THE COUMARIN ANTICOAGULANT</span>
<span id="cb20-6">;DRUGS: THE PHARMACODYNAMICS OF WARFARIN IN MAN.</span>
<span id="cb20-7">;JOURNAL OF CLINICAL INVESTIGATION <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1963</span>;<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1542</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1551</span></span>
<span id="cb20-8">;</span>
<span id="cb20-9"></span>
<span id="cb20-10">$PROB WARFARIN PK</span>
<span id="cb20-11">$INPUT ID TIME WT AGE SEX AMT RATX DVID DV MDV</span>
<span id="cb20-12">$DATA ..\warfpk.csv IGNORE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>#</span>
<span id="cb20-13"></span>
<span id="cb20-14">$SUBR ADVAN2 TRANS2</span>
<span id="cb20-15"></span>
<span id="cb20-16">$PK</span>
<span id="cb20-17"></span>
<span id="cb20-18">   ; COVARIATE MODEL</span>
<span id="cb20-19">   TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-20">   TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-21">   TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-22"></span>
<span id="cb20-23">   ; MODEL <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FOR</span> RANDOM BETWEEN SUBJECT VARIABILITY</span>
<span id="cb20-24">   CL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-25">   V<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-26">   KA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb20-27"></span>
<span id="cb20-28">   ; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">SCALE</span> CONCENTRATIONS</span>
<span id="cb20-29">   S2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>V</span>
<span id="cb20-30"></span>
<span id="cb20-31">$ERROR</span>
<span id="cb20-32">   Y<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span>EPS(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-33">   IPRED<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F</span>
<span id="cb20-34"></span>
<span id="cb20-35">$THETA</span>
<span id="cb20-36">   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)   ; POP_CL</span>
<span id="cb20-37">   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)     ; POP_V</span>
<span id="cb20-38">   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.362</span>) ; POP_KA</span>
<span id="cb20-39"></span>
<span id="cb20-40">$OMEGA</span>
<span id="cb20-41">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; PPV_CL</span>
<span id="cb20-42">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; PPV_V</span>
<span id="cb20-43">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; PPV_KA</span>
<span id="cb20-44"></span>
<span id="cb20-45">$SIGMA </span>
<span id="cb20-46">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; RUV_ADD</span>
<span id="cb20-47"></span>
<span id="cb20-48">$EST <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">MAX</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9990</span> SIG<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PRINT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> METHOD<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>COND INTER</span>
<span id="cb20-49">$COV</span>
<span id="cb20-50"></span>
<span id="cb20-51">$TABLE ID TIME DVID Y </span>
<span id="cb20-52">ONEHEADER NOPRINT FILE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>warf.fit</span>
<span id="cb20-53"></span>
<span id="cb20-54">$TABLE ID KA CL V WT SEX AGE</span>
<span id="cb20-55">ONEHEADER NOAPPEND NOPRINT FILE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>warf.fit</span></code></pre></div>
</details>
</div>
<p>The control file requires a bit of effort for me – as someone who doesn’t use NONMEM – to work out the structure of the underlying model, but after a little bit of work it wasn’t too hard. Unlike Stan, which is a general-purpose probabilistic programming model for Bayesian analysis, NONMEM is a specific tool that hardcodes particular models of interest to pharmacometricians. The consequence of this is that the control file doesn’t spell out all the details of each model: the user just refers to them by name. You can work out which model is used by looking at the line in the control file that specifies which subroutine is used:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb21-1">$SUBR ADVAN2 TRANS2</span></code></pre></div>
<p>On my own I would have no way to make sense of this without doing a deep dive into the NONMEM user manuals, but happily the workshop notes helpfully explain this. In NONMEM land, this line is refering to two different modules: ADVAN provides a library of pharmacokinetic models that are bundled with the software, and TRANS specifies parameter transformations. Of particular importance is the fact that ADVAN2 refers specifically to a one-compartment model with first-order absorption and first-order elimination. That’s super handy for me because it’s not too different from models I’ve implemented from scratch in Stan previously.</p>
<p>The file continues, specifying the pharmacokinetic model (PK) and the error model (ERROR) using the standard notation where “theta” denotes a population level parameter, “eta” denotes a random effect that varies from person to person, and “epsilon” denotes residuals:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb22-1">$PK</span>
<span id="cb22-2"></span>
<span id="cb22-3">  ; COVARIATE MODEL</span>
<span id="cb22-4">  TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-5">  TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-6">  TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-7"></span>
<span id="cb22-8">  ; MODEL <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FOR</span> RANDOM BETWEEN SUBJECT VARIABILITY</span>
<span id="cb22-9">  CL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb22-10">  V<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb22-11">  KA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb22-12"></span>
<span id="cb22-13">  ; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">SCALE</span> CONCENTRATIONS</span>
<span id="cb22-14">  S2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>V</span>
<span id="cb22-15"></span>
<span id="cb22-16">$ERROR</span>
<span id="cb22-17">  Y<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span>EPS(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-18">  IPRED<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F</span></code></pre></div>
<p>My goal is to re-write this model in Stan, but to do that I need to first express that as a statistical model rather as NONMEM syntax. So let’s start at the population level. We have three parameters here:</p>
<ul>
<li>A population typical value for the clearance rate CL, denoted TVCL</li>
<li>A population typical value for the distribution volume V, denoted TVV</li>
<li>A population typical value for the absorption rate KA, denoted TVKA</li>
</ul>
<p>The mapping here is straightfoward:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmbox%7BTVCL%7D%20&amp;=&amp;%20%5Ctheta_1%20%5C%5C%0A%5Cmbox%7BTVV%7D%20&amp;=&amp;%20%5Ctheta_2%20%5C%5C%0A%5Cmbox%7BTVKA%7D%20&amp;=&amp;%20%5Ctheta_3%0A%5Cend%7Barray%7D%0A"></p>
<p>Now we consider the individual-subject level. At this level we have three parameters per person. For the i-th person, these parameters are:</p>
<ul>
<li>The clearance rate CL<img src="https://latex.codecogs.com/png.latex?_i"></li>
<li>The distribution volume V<img src="https://latex.codecogs.com/png.latex?_i"></li>
<li>The absorption rate KA<img src="https://latex.codecogs.com/png.latex?_i"></li>
</ul>
<p>As usual, the random effect terms <img src="https://latex.codecogs.com/png.latex?%5Ceta"> are normally distributed with mean zero and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Comega">, and the <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> values are considered fixed effects. However, the population level and subject level parameters do not combine additively, they combine multiplicatively. Specifically, the <img src="https://latex.codecogs.com/png.latex?g(%5Ctheta,%20%5Ceta)"> functions for this model are as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmbox%7BCL%7D_i%20&amp;=&amp;%20%5Ctheta_1%20%5Cexp(%5Ceta_%7B1i%7D)%20%5C%5C%0A%5Cmbox%7BV%7D_i%20&amp;=&amp;%20%5Ctheta_2%20%5Cexp(%5Ceta_%7B2i%7D)%20%5C%5C%0A%5Cmbox%7BKA%7D_i%20&amp;=&amp;%20%5Ctheta_3%20%5Cexp(%5Ceta_%7B3i%7D)%0A%5Cend%7Barray%7D%0A"></p>
<p>So far, so good. This makes sense of most of the model specification, but there are a still some confusing parts that require a bit more digging around to decipher. First off, this strange invocation:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb23-1">  ; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">SCALE</span> CONCENTRATIONS</span>
<span id="cb23-2">  S2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>V</span></code></pre></div>
<p>This doesn’t make sense unless you know something about the way that NONMEM has implemented the underlying model. In the 1-compartment IV bolus model that I used as my motivating example (previous section), the pharmacokinetic function <img src="https://latex.codecogs.com/png.latex?f()"> has a closed form expression for the drug <em>concentration</em> in the central (only) compartment. However, when you implement a pharmacokinetic model using a system of ordinary differential equations (like I did in an earlier post), the values produced by solving the ODE typically refer to the <em>amount</em> of drug in the relevant compartment. To convert these amounts to concentrations you need to scale them, generally by dividing by the volume of said compartment. And thus we have our explanation of the mysterious <code>S2=V</code> instruction. The <code>S2</code> parameter is the NONMEM scaling parameter for the central compartment. We set this equal to <code>V</code>, i.e., the estimated volume parameter for each subject.<sup>8</sup></p>
<p>At last we come to the error model:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb24-1">$ERROR</span>
<span id="cb24-2">  Y<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span>EPS(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-3">  IPRED<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F</span></code></pre></div>
<p>The relevant part here is the line specifying the relationship between the pharmacokinetic function <code>F</code>, the error terms <code>EPS</code>, and the observed data <code>Y</code>. In this case it’s additive, exactly in keeping with what I assumed in my toy example:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_%7Bij%7D%20=%20f(t_%7Bij%7D,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)%20+%20%5Cepsilon_%7Bij%7D%0A"></p>
<p>It doesn’t have to be. In fact, the hands-on exercise in Lecture 2 of the tutorial I’m working through prepares three versions of this model, one with additive error, one with multiplicative error, and one with a hybrid error model that incorporates additive and multiplicative components. I’ll get to that later, though probably in a future post.</p>
<p>Yay! At long last I think I know the model I need to implement.</p>
</section>
</section>
<section id="implementation-in-stan" class="level2">
<h2 class="anchored" data-anchor-id="implementation-in-stan">Implementation in Stan</h2>
<section id="passing-the-data-to-stan" class="level3">
<h3 class="anchored" data-anchor-id="passing-the-data-to-stan">Passing the data to Stan</h3>
<p>The first issue we’ll need to consider is how data should be passed from R to Stan. There’s some nuances here in how we format the data for Stan. As mentioned earlier, Stan doesn’t permit <a href="https://mc-stan.org/docs/stan-users-guide/ragged-data-structs.html">ragged arrays</a>, so we’ll have to pass the observations as one long <code>c_obs</code> vector that aggregates across subjects. Within the model (see below), we’ll use the <code>n_obs</code> vector that records the number of observations per subject to create break points that we can use to extract data from a single person. Here’s the R code I used:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">warfpk_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk[warfpk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mdv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]</span>
<span id="cb25-2">warfpk_amt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(warfpk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rate), ]</span>
<span id="cb25-3"></span>
<span id="cb25-4">t_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),</span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb25-10">)</span>
<span id="cb25-11"></span>
<span id="cb25-12">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb25-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_ids =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(warfpk_amt),</span>
<span id="cb25-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_tot =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(warfpk_obs),</span>
<span id="cb25-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_obs =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(</span>
<span id="cb25-16">    warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id,</span>
<span id="cb25-17">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(warfpk_obs[warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> .x, ])</span>
<span id="cb25-18">  ),</span>
<span id="cb25-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time,</span>
<span id="cb25-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dv,</span>
<span id="cb25-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dose =</span> warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amt,</span>
<span id="cb25-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_fit =</span> t_fit,</span>
<span id="cb25-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_fit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(t_fit)</span>
<span id="cb25-24">)</span></code></pre></div>
</div>
<p>The interpretation of this input is as follows:</p>
<ul>
<li><code>n_ids</code> is an integer indicating the number of subjects</li>
<li><code>n_tot</code> is an integer indicating the total number of measurements (aggregating across subjects)</li>
<li><code>n_obs</code> is an integer vector of length <code>n_ids</code> indicating the number of measurements for each person</li>
<li><code>t_obs</code> is a numeric vector of length <code>n_tot</code> specifying the time at which a measurement was taken</li>
<li><code>c_obs</code> is a numeric vector of length <code>n_tot</code> containing all the measurements. The data from all subjects are concatenated into this vector</li>
<li><code>dose</code> is a numeric vector of length <code>n_ids</code> specifying the dose administered to each person</li>
<li><code>t_fit</code> is a vector of time points for which we would like to estimate the pharamacokinetic function for each person</li>
<li><code>n_fit</code> is an integer specfiying the length of <code>t_fit</code></li>
</ul>
<p>Here’s what the input data looks like when formatted for my Stan model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$n_ids
[1] 32

$n_tot
[1] 251

$n_obs
 [1] 11  6 11  9 10  8  9 11 17  6 10 10 10 11 10  6  6  6  6  6  6  6  6  6
[25]  6  6  6  6  6  6  6  6

$t_obs
  [1]   0.5   1.0   2.0   3.0   6.0   9.0  12.0  24.0  36.0  48.0  72.0
 [12]  24.0  36.0  48.0  72.0  96.0 120.0   0.5   2.0   3.0   6.0  12.0
 [23]  24.0  36.0  48.0  72.0  96.0 120.0   3.0   6.0   9.0  24.0  36.0
 [34]  48.0  72.0  96.0 120.0   3.0   6.0   9.0  12.0  24.0  36.0  48.0
 [45]  72.0  96.0 120.0   6.0  12.0  24.0  36.0  48.0  72.0  96.0 120.0
 [56]   3.0   6.0   9.0  12.0  24.0  36.0  48.0  72.0  96.0   2.0   3.0
 [67]   6.0   9.0  12.0  24.0  36.0  48.0  72.0  96.0 120.0   0.5   1.0
 [78]   2.0   3.0   3.0   6.0   6.0   9.0   9.0  12.0  12.0  24.0  36.0
 [89]  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0   1.5
[100]   3.0   6.0  12.0  24.0  36.0  48.0  72.0  96.0 120.0   1.5   3.0
[111]   6.0   9.0  24.0  36.0  48.0  72.0  96.0 120.0   1.5   3.0   6.0
[122]   9.0  24.0  36.0  48.0  72.0  96.0 120.0   0.5   1.0   2.0   3.0
[133]   6.0   9.0  24.0  36.0  48.0  72.0  96.0   1.0   3.0   6.0   9.0
[144]  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0
[155] 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0
[166]  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0
[177]  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0
[188]  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0
[199]  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0
[210]  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0
[221] 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0
[232]  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0
[243]  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0

$c_obs
  [1]  0.0  1.9  3.3  6.6  9.1 10.8  8.6  5.6  4.0  2.7  0.8  9.2  8.5  6.4
 [15]  4.8  3.1  2.5  0.0  8.4  9.7  9.8 11.0  8.3  7.7  6.3  4.1  3.0  1.4
 [29] 12.0 13.2 14.4  9.6  8.2  7.8  5.8  4.3  3.0 11.1 11.9  9.8 11.0  8.5
 [43]  7.6  5.4  4.5  3.3  2.3  8.6  8.6  7.0  5.7  4.7  3.3  2.3  1.7 13.4
 [57] 12.4 12.7  8.8  6.1  3.5  1.8  1.5  1.0 17.6 17.3 15.0 15.0 12.4  7.9
 [71]  7.9  5.1  3.6  2.4  2.0  0.0  1.0  4.6 12.7  8.0 12.7 11.5 12.9 11.4
 [85] 11.4 11.0  9.1  8.2  5.9  3.6  1.7  1.1  8.6  8.0  6.0  4.4  3.6  2.8
 [99] 11.4 15.4 17.5 14.0  9.0  8.9  6.6  4.2  3.6  2.6  0.6  2.8 13.8 15.0
[113] 10.5  9.1  6.6  4.9  2.4  1.9  3.6 12.9 12.9 10.2  6.4  6.9  4.5  3.2
[127]  2.4  1.3  0.0  2.7 11.6 11.6 11.3  9.7  6.5  5.2  3.6  2.4  0.9  6.6
[141] 11.9 11.7 12.2  8.1  7.4  6.8  5.3  3.0  2.0 10.4  8.9  7.0  4.4  3.2
[155]  2.4  7.6  6.4  6.0  4.0  3.1  2.0  7.6  6.6  5.4  3.4  1.2  0.9  6.6
[169]  5.3  3.6  2.7  1.4  1.1  9.6  8.0  6.6  5.6  3.5  2.3  7.3  6.1  4.3
[183]  3.2  2.3  1.9  8.9  8.4  8.0  4.4  3.2  1.7  9.8  8.4  6.6  4.8  3.2
[197]  2.4  8.2  7.5  6.8  5.5  4.5  3.7 11.0 10.0  8.2  6.0  3.7  2.6 10.0
[211]  9.0  7.3  5.2  3.7  2.7 11.8  9.2  7.7  4.9  3.4  2.7 10.1  8.0  6.0
[225]  4.9  3.4  2.0  8.3  7.0  5.6  4.1  3.1  2.2  9.9  7.5  6.5  4.1  2.9
[239]  2.3  9.5  7.8  6.4  4.5  3.4  2.5  8.9  7.7  6.9  4.4  3.5  2.5

$dose
 [1] 100.0 100.0 100.0 120.0  60.0 113.0  90.0 135.0  75.0 105.0 123.0 113.0
[13] 113.0  75.0  85.0  87.0 117.0 112.0  95.5  88.5  93.0  87.0 110.0 115.0
[25] 112.0 120.0 120.0 120.0 153.0 105.0 125.0  93.0

$t_fit
 [1]   0.10   0.20   0.30   0.40   0.50   0.60   0.70   0.80   0.90   1.00
[11]   1.25   1.50   1.75   2.00   2.25   2.50   2.75   3.00   3.50   4.00
[21]   4.50   5.00   5.50   6.00   6.50   7.00   7.50   8.00   8.50   9.00
[31]   9.50  10.00  11.00  12.00  13.00  14.00  15.00  16.00  17.00  18.00
[41]  19.00  20.00  21.00  22.00  23.00  24.00  27.00  30.00  33.00  36.00
[51]  39.00  42.00  45.00  48.00  51.00  54.00  57.00  60.00  63.00  66.00
[61]  69.00  72.00  75.00  78.00  81.00  84.00  87.00  90.00  93.00  96.00
[71]  99.00 102.00 105.00 108.00 111.00 114.00 117.00 120.00

$n_fit
[1] 78</code></pre>
</div>
</div>
</section>
<section id="computing-the-pharmacokinetic-function" class="level3">
<h3 class="anchored" data-anchor-id="computing-the-pharmacokinetic-function">Computing the pharmacokinetic function</h3>
<p>Next, we need to think a little about the pharmacokinetics involved. The model I want to implement is a one-compartment model with first-order absorption and first-order elimination. To understand what that means, it helps to recognise that at any given point in time there are <em>two</em> drug amounts that the model needs to track: the amount of drug <img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BA%7D_g"> in the gut that has not yet been absorbed into systemic circulation, and the amount <img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BA%7D_c"> currently in circulation.</p>
<p>First order absorption with absorption rate KA<sup>9</sup> means that at each moment in time some proportion KA of the drug amount in the gut <img src="https://latex.codecogs.com/png.latex?A_g"> is absorbed. Formally, this gives us the following differential equation for gut amounts:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Cmbox%7BA%7D_g%7D%7Bdt%7D%20=%20-%5Cmbox%7BKA%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bg%7D%0A"></p>
<p>The same logic applies to the drug quantity in circulation <img src="https://latex.codecogs.com/png.latex?A_c">. At each point in time it increases by whatever drug amount arrives from the gut, but it also decreases by whatever amount is eliminated. Formally we could express this in terms of an elimination rate parameter (which would be denoted KE), which would give us the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Cmbox%7BA%7D_c%7D%7Bdt%7D%20=%20(%5Cmbox%7BKA%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bg%7D)%20-%20(%5Cmbox%7BKE%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bc%7D)%0A"></p>
<p>However, when it comes to elimination it is more conventional to express the elimination rate as the ratio between the <em>clearance</em> (CL: volume of blood that can be completely cleared of drug per unit time), and the <em>volume of distibution</em> (V) through which the drug circulates.<sup>10</sup> That gives is the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Cmbox%7BA%7D_c%7D%7Bdt%7D%20=%20(%5Cmbox%7BKA%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bg%7D)%20-%20%5Cleft(%5Cfrac%7B%5Cmbox%7BCL%7D%7D%7B%5Cmbox%7BV%7D%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bc%7D%5Cright)%0A"> Taken together, these two expressions form a system of ordinary differential equations(ODEs) that I’ll have Stan solve numerically. This will give us a numerical estimate of the pharmacokinetic function <img src="https://latex.codecogs.com/png.latex?f(t_%7Bij%7D,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)">. Well sort of. The function <img src="https://latex.codecogs.com/png.latex?f()"> describes drug <em>concentrations</em>, but the output of the ODE solver will give us a measure of drug <em>amount</em>. So, in order to compute the pharamacokinetic function, the output of the ODE solver will need to be divided by the estimate of the volume if distribution V for each person.</p>
</section>
<section id="modelling-code" class="level3">
<h3 class="anchored" data-anchor-id="modelling-code">Modelling code</h3>
<p>Now let’s have a look at the Stan code. At some point I’d like to start using <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten</a> for these things rather than reinventing the wheel and coding a standard compartmental model from scratch. However, I’m a bottom-up kind of person<sup>11</sup> and I find it useful to write lower-level model code myself a few times before I start relying on pre-built model code. Here’s the complete Stan code for the model I implemented:</p>
<div class="cell" data-file="model1.stan" data-output.var="mod">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>model1.stan</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">functions</span> {</span>
<span id="cb28-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> amount_change(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time,</span>
<span id="cb28-3">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> state,</span>
<span id="cb28-4">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> KA,</span>
<span id="cb28-5">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> CL,</span>
<span id="cb28-6">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> V) {</span>
<span id="cb28-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] dadt;</span>
<span id="cb28-8">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = - (KA * state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]);</span>
<span id="cb28-9">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = (KA * state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) - (CL / V) * state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>];</span>
<span id="cb28-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dadt;</span>
<span id="cb28-11">  }</span>
<span id="cb28-12">}</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb28-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_ids;</span>
<span id="cb28-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_tot;</span>
<span id="cb28-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_fit;</span>
<span id="cb28-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_obs;</span>
<span id="cb28-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] dose;</span>
<span id="cb28-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_tot] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_obs;</span>
<span id="cb28-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_tot] c_obs;</span>
<span id="cb28-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_fit;</span>
<span id="cb28-23">}</span>
<span id="cb28-24"></span>
<span id="cb28-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed data</span> {</span>
<span id="cb28-26">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> start;</span>
<span id="cb28-27">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stop;</span>
<span id="cb28-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] initial_amount;</span>
<span id="cb28-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> initial_time = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb28-30"></span>
<span id="cb28-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// break points within the data vector</span></span>
<span id="cb28-32">  start[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>;</span>
<span id="cb28-33">  stop[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = n_obs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb28-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:n_ids) {</span>
<span id="cb28-35">    start[i] = start[i - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] + n_obs[i - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb28-36">    stop[i] = stop[i - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] + n_obs[i];</span>
<span id="cb28-37">  }</span>
<span id="cb28-38"></span>
<span id="cb28-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial states for each person</span></span>
<span id="cb28-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-41">    initial_amount[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = dose[i];</span>
<span id="cb28-42">    initial_amount[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb28-43">  }</span>
<span id="cb28-44">}</span>
<span id="cb28-45"></span>
<span id="cb28-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb28-47">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; theta_KA;</span>
<span id="cb28-48">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; theta_CL;</span>
<span id="cb28-49">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; theta_V;</span>
<span id="cb28-50">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; omega_KA;</span>
<span id="cb28-51">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; omega_CL;</span>
<span id="cb28-52">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; omega_V;</span>
<span id="cb28-53">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; sigma;</span>
<span id="cb28-54">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] eta_KA;</span>
<span id="cb28-55">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] eta_CL;</span>
<span id="cb28-56">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] eta_V;</span>
<span id="cb28-57">}</span>
<span id="cb28-58"></span>
<span id="cb28-59"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span> {</span>
<span id="cb28-60">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_ids] KA;</span>
<span id="cb28-61">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_ids] CL;</span>
<span id="cb28-62">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_ids] V;</span>
<span id="cb28-63">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_tot] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] amount;</span>
<span id="cb28-64">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_tot] c_pred;</span>
<span id="cb28-65"></span>
<span id="cb28-66">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// pharmacokinetic parameters</span></span>
<span id="cb28-68">    KA[i] = theta_KA * exp(eta_KA[i]);</span>
<span id="cb28-69">    CL[i] = theta_CL * exp(eta_CL[i]);</span>
<span id="cb28-70">    V[i] = theta_V * exp(eta_V[i]);</span>
<span id="cb28-71"></span>
<span id="cb28-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug amounts</span></span>
<span id="cb28-73">    amount[start[i]:stop[i]] = ode_bdf(</span>
<span id="cb28-74">      amount_change,            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ode function</span></span>
<span id="cb28-75">      initial_amount[i],        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial state</span></span>
<span id="cb28-76">      initial_time,             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial time</span></span>
<span id="cb28-77">      t_obs[start[i]:stop[i]],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observation times</span></span>
<span id="cb28-78">      KA[i],                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate</span></span>
<span id="cb28-79">      CL[i],                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb28-80">      V[i]                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume</span></span>
<span id="cb28-81">    );</span>
<span id="cb28-82"></span>
<span id="cb28-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// convert to concentrations</span></span>
<span id="cb28-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_obs[i]) {</span>
<span id="cb28-85">      c_pred[start[i] + j - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = amount[start[i] + j - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] / V[i];</span>
<span id="cb28-86">    }</span>
<span id="cb28-87">  }</span>
<span id="cb28-88">}</span>
<span id="cb28-89"></span>
<span id="cb28-90"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb28-91">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// foolish priors over population parameters</span></span>
<span id="cb28-92">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// (parameter bounds ensure these are actually half-normals)</span></span>
<span id="cb28-93">  theta_KA ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-94">  theta_CL ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-95">  theta_V ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-96">  sigma ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-97">  omega_KA ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-98">  omega_CL ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-99">  omega_V ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-100"></span>
<span id="cb28-101">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// random effect terms</span></span>
<span id="cb28-102">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-103">    eta_KA[i] ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, omega_KA);</span>
<span id="cb28-104">    eta_CL[i] ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, omega_CL);</span>
<span id="cb28-105">    eta_V[i] ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, omega_V);</span>
<span id="cb28-106">  }</span>
<span id="cb28-107"></span>
<span id="cb28-108">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// likelihood of observed concentrations</span></span>
<span id="cb28-109">  c_obs ~ normal(c_pred, sigma);</span>
<span id="cb28-110">}</span>
<span id="cb28-111"></span>
<span id="cb28-112"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb28-113">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids, n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] a_fit;</span>
<span id="cb28-114">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids, n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> c_fit;</span>
<span id="cb28-115"></span>
<span id="cb28-116">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-117">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug amounts</span></span>
<span id="cb28-118">    a_fit[i] = ode_bdf(</span>
<span id="cb28-119">      amount_change,        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ode function</span></span>
<span id="cb28-120">      initial_amount[i],    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial state</span></span>
<span id="cb28-121">      initial_time,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial time</span></span>
<span id="cb28-122">      t_fit,                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observation times</span></span>
<span id="cb28-123">      KA[i],                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate</span></span>
<span id="cb28-124">      CL[i],                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb28-125">      V[i]                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume</span></span>
<span id="cb28-126">    );</span>
<span id="cb28-127"></span>
<span id="cb28-128">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// convert to concentrations</span></span>
<span id="cb28-129">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_fit) {</span>
<span id="cb28-130">      c_fit[i, j] = a_fit[i, j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] / V[i];</span>
<span id="cb28-131">    }</span>
<span id="cb28-132">  }</span>
<span id="cb28-133">}</span></code></pre></div>
</div>
</div>
<p>In the earlier post I wrote on <a href="../../stan-ode/">pharmacokinetic modelling in Stan</a> I already went through the low-level details of what each section in this code does, so I won’t repeat myself here. However, there are a few comments I’ll make about it:</p>
<ul>
<li>In all honesty I don’t think the ODE code is even needed here. With first-order absorption dynamics and first-order elimination dynamics, you can analytically calculate the pharmacokinetic curve using a <a href="https://en.wikipedia.org/wiki/Bateman_equation">Bateman curve</a>, which I talked about in a <a href="../../non-compartmental-analysis/">another post</a>. However, one of my goals here was to use the Stan ODE solvers in a population model, so for the purposes of this post I’ve chosen to do it the hard way.</li>
<li>Speaking of doing things the hard way, note that I’ve called <code>ode_bdf()</code> here rather than <code>ode_rk45()</code>. This is to avoid any issues of <a href="https://en.wikipedia.org/wiki/Stiff_equation">ODE stiffness</a>. While there is always the possibility that ODE can remain stiff in the posterior,<sup>12</sup> I suspect the real issue here is that (a) I’ve chosen some absurdly diffuse priors, which means that the ODE can be quite poorly behaved during the warmup period for the sampler, and (b) earlier versions of the model had bugs that made the model do weird things. I strongly suspect that with those issues out of the way I could call <code>ode_rk45()</code> and get a considerable speedup. However, for the purposes of this post I’ll leave it as is.</li>
</ul>
<p>In any case, here’s the R code to compile the model, run the sampler, and extract a summary representation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model1.stan"</span>)</span>
<span id="cb29-2">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb29-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb29-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb29-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter_warmup =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb29-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter_sampling =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb29-8">)</span></code></pre></div>
</div>
<p>This code took a couple of hours to run and I have no desire to repeat the exercise more often than necessary, so I took the sensible step of saving relevant outputs to csv files:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">out_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>()</span>
<span id="cb30-2">out_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draws_df"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb30-3">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(out_summary, fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model1_summary.csv"</span>))</span>
<span id="cb30-4">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(out_draws, fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model1_draws.csv"</span>))</span></code></pre></div>
</div>
<p>In what follows, I’ll read data from these files when examining the behaviour of the model. However, there is a slight wrinkle here…</p>
</section>
<section id="pinned-copies-of-the-output-files" class="level3">
<h3 class="anchored" data-anchor-id="pinned-copies-of-the-output-files">Pinned copies of the output files</h3>
<p>The awkward thing about storing <em>all</em> the output from the MCMC sampler is that the <code>model1_draws.csv</code> file is almost 300Mb in size. As such is slightly too large to store in the <a href="https://github.com/djnavarro/quarto-blog">github repository</a> that contains this blog, and indeed if you look in the repo you won’t find a copy of that file. That makes things tricky from a reproducibility point of view. I don’t really imagine that anyone else actually needs a copy of this data (why would you????) but there <em>is</em> a chance that I might need to re-run the R code on this post without re-running the sampler. If that ever happens, I’ll need a copy of this file stored somewhere. To that end, I finally got off my lazy arse, taught myself how to use the <a href="https://pins.rstudio.com/">pins</a> package, created a publicly accessible pinboard on google cloud storage, and hosted a copy of the data file there:<sup>13</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_url</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"storage.googleapis.com/djnavarro-pins/_pins.yaml"</span>)</span>
<span id="cb31-2">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_list</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "diamonds"       "warfpk_data"    "warfpk_draws"   "warfpk_summary"</code></pre>
</div>
</div>
<p>So if you’re following along at home – or, much more likely – you are future me who has lost the local copy of the data, you can read the data as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">out_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(board, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warfpk_summary"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb33-2">out_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(board, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warfpk_draws"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
</div>
<p>Anyway, the main thing is that one way or another we can assume that the <code>out_summary</code> and <code>out_draws</code> tibbles are both available, so let’s get back to the main thread yes?</p>
</section>
</section>
<section id="model-behaviour" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="model-behaviour">Model behaviour</h2>
<p>Now that I’ve fit my Stan model, it’s time to take a look at what it does.</p>
<section id="population-parameters" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="population-parameters">Population parameters</h3>
<p>Let’s start by taking a look at a high level summary by extracting some relevant information from <code>out_summary</code>. For the time being I’m only really interested in the population level parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, and <img src="https://latex.codecogs.com/png.latex?%5Csigma">, so I’ll filter the results so that only those parameters (and the log-probability) are shown in the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">out_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb34-2">  variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(theta|omega|sigma|lp)"</span>)</span>
<span id="cb34-3">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 × 10
  variable     mean   median      sd     mad       q5     q95  rhat ess_bulk
  &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;
1 lp__     -104.    -103.    1.13e+1 1.12e+1 -124.    -87.2    1.01     431.
2 theta_KA    0.755    0.667 3.71e-1 1.91e-1    0.445   1.33   1.01     448.
3 theta_CL    0.135    0.135 8.11e-3 7.43e-3    0.123   0.149  1.00     841.
4 theta_V     7.70     7.69  3.65e-1 3.59e-1    7.12    8.31   1.00     944.
5 omega_KA    0.902    0.844 3.00e-1 2.48e-1    0.539   1.47   1.01     423.
6 omega_CL    0.303    0.298 4.82e-2 4.62e-2    0.233   0.389  1.00    3060.
7 omega_V     0.235    0.232 3.94e-2 3.70e-2    0.178   0.307  1.00    2693.
8 sigma       1.08     1.08  5.77e-2 5.88e-2    0.993   1.18   1.00    2910.
# ℹ 1 more variable: ess_tail &lt;dbl&gt;</code></pre>
</div>
</div>
<p>The fact that all the R-hat values are very close to 1 suggests that my MCMC chains are behaving themselves nicely, and all four chains are giving the same answers. But just to check – and because an earlier version of this model misbehaved quite badly and these plots turned out to be very helpful for diagnosing the problem – I’ll plot the marginal distributions over all the population level parameters (and the log-probability) separately for each chain. To do that, first I’ll extract the relevant columns from the <code>model1_draws.csv</code> file that contains all the raw samples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(theta|sigma|omega|lp|chain)"</span>)) </span>
<span id="cb36-3"></span>
<span id="cb36-4">draws</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4,000 × 9
    lp__ theta_KA theta_CL theta_V omega_KA omega_CL omega_V sigma .chain
   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 -130.     1.15    0.135    8.56     1.81    0.317   0.235  1.15      1
 2 -143.     1.36    0.139    6.88     1.95    0.435   0.225  1.13      1
 3 -138.     1.86    0.134    7.18     1.90    0.312   0.204  1.06      1
 4 -137.     1.55    0.144    7.95     1.46    0.324   0.306  1.11      1
 5 -130.     1.60    0.138    8.08     1.84    0.290   0.240  1.08      1
 6 -132.     1.94    0.146    7.33     1.57    0.290   0.234  1.06      1
 7 -140.     1.45    0.143    7.71     1.99    0.260   0.165  1.20      1
 8 -132.     1.52    0.142    7.46     1.24    0.325   0.313  1.13      1
 9 -134.     1.57    0.144    7.57     1.82    0.261   0.174  1.09      1
10 -133.     1.57    0.143    7.56     1.81    0.265   0.177  1.09      1
# ℹ 3,990 more rows</code></pre>
</div>
</div>
<p>After a little bit of data wrangling, I can create the appropriate plots:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">draws_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb38-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(id|chain)"</span>),</span>
<span id="cb38-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>,</span>
<span id="cb38-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb38-6">  ) </span>
<span id="cb38-7"></span>
<span id="cb38-8">draws_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(.chain), value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> parameter)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw_quantiles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb38-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MCMC chain"</span>,</span>
<span id="cb38-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sampled parameter value"</span></span>
<span id="cb38-16">  )</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/posterior-density-plots-1.png" class="img-fluid" width="1536"></p>
</div>
</div>
<p>That looks nice, so it’s time to move on.</p>
</section>
<section id="comparison-to-nonmem" class="level3">
<h3 class="anchored" data-anchor-id="comparison-to-nonmem">Comparison to NONMEM</h3>
<p>One of my fears when implementing this model in Stan was that I might have misunderstood what the NONMEM version of the model was doing, and as a consequence I’d end up estimating quite different things to what the conventional NONMEM model does. To help reassure myself that this isn’t the case, it seems wise to compare the parameter estimates that both versions of the model produce. The files distributed with the workshop include these estimates for the NONMEM model, which are as follows:<sup>14</sup></p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 3
  parameter estimate std_error
  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;
1 omega_CL     0.285   0.0405 
2 omega_KA     0.621   0.158  
3 omega_V      0.222   0.0320 
4 sigma        1.02    0.131  
5 theta_CL     0.134   0.00724
6 theta_KA     0.59    0.130  
7 theta_V      7.72    0.347  </code></pre>
</div>
</div>
<!-- 
Note: I feel like there should be a .res file, but apparently there isn't one
bundled with the tutorial. Fortunately, it looks like everything that matters 
is also in the .smr file. Here's the cut-and-paste for the relevant bits:

THETA:      POP_CL      POP_V       POP_KA      
THETA     = 0.134       7.72        0.59

ETA:        PPV_CL      PPV_V       PPV_KA      
ETASD     = 0.285       0.222       0.621

EPSSD     = 1.020

THETA:se% = 5.4         4.5         22.0
ETASD:se% = 14.2        14.4        25.4
EPSSD:se% = 12.8

Judging from the "se%" part, the fact that these numbers are completely
unhinged if treated as literal standard errors, and the fact that rescaling
places most of the standard error estimates in alignment with the Bayesian
output, I'm pretty certain these are reported as percentages.
-->
<p>To save you the effort of scrolling back and forth between this table and the Stan version above, here’s a truncated version of the Stan table showing an apples-to-apples comparison:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 3
  parameter posterior_mean posterior_sd
  &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;
1 omega_CL           0.303      0.0482 
2 omega_KA           0.902      0.300  
3 omega_V            0.235      0.0394 
4 sigma              1.08       0.0577 
5 theta_CL           0.135      0.00811
6 theta_KA           0.755      0.371  
7 theta_V            7.70       0.365  </code></pre>
</div>
</div>
<p>As you can see, the two versions are in pretty close agreement. There are some modest differences in the estimates of the population mean and variability in the absorption rate KA – compared to NONMEM, the Stan version suggests the absorption rate is slightly higher on average, but also more variable across people – but on the whole that seems like a minor discrepancy, and I’m not too concerned about it.</p>
</section>
<section id="model-fits" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="model-fits">Model fits</h3>
<p>Now reassured that my model is doing the right thing, the time has come to do my favourite part of any modelling exercise: comparing the fitted values <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> produced by the model to the observed values <img src="https://latex.codecogs.com/png.latex?y"> in the data set. It’s worth noting here that the summary representations produced by Stan are perfectly sufficient to draw these plots, because it includes summary statistics for the <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> values (the <code>c_pred</code> variables in the Stan model). However, the first version of the model I implemented had some weird bugs that required me to do a slightly deeper dive, and in order to work out where the bugs were I ended up writing code that extracts the relevant summaries from the raw MCMC samples. So, because I have that code at hand already, let’s do it the long way. First up, let’s plot the observed value <img src="https://latex.codecogs.com/png.latex?y"> against the fitted value <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> separately for each person. Here’s the code used to extract the relevant data:</p>
<div class="cell" data-hash="index_cache/html/manual-summary_dd116b7ce0b39cc42f29440ebac8cffa">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_pred"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb41-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_pred"</span>),</span>
<span id="cb41-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb41-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_hat"</span></span>
<span id="cb41-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb41-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obs_num =</span> variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-10">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-11">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb41-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(obs_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-15">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb41-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y_hat),</span>
<span id="cb41-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q5 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb41-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb41-19">  )  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-20">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(obs_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-21">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb41-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs,</span>
<span id="cb41-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time,</span>
<span id="cb41-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id</span>
<span id="cb41-25">  )</span>
<span id="cb41-26"></span>
<span id="cb41-27">fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 251 × 7
   obs_num    yh    q5   q95     y  time    id
     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1       1  1.44  1.16  1.77   0     0.5     0
 2       2  2.68  2.19  3.24   1.9   1       0
 3       3  4.69  3.95  5.50   3.3   2       0
 4       4  6.19  5.33  7.07   6.6   3       0
 5       5  8.61  7.75  9.47   9.1   6       0
 6       6  9.28  8.41 10.2   10.8   9       0
 7       7  9.14  8.21 10.1    8.6  12       0
 8       8  6.67  5.80  7.58   5.6  24       0
 9       9  4.48  3.52  5.42   4    36       0
10      10  2.99  2.01  3.99   2.7  48       0
# ℹ 241 more rows</code></pre>
</div>
</div>
<p>And here is the code used to draw the pretty picture:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(fit, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(yh, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb43-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fitted value for drug concentration, y_hat"</span>,</span>
<span id="cb43-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed value for drug concentration, y"</span></span>
<span id="cb43-10">  )</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/simple-plot-1.png" class="img-fluid" width="1536"></p>
</div>
</div>
<p>Well that’s just delightful. In almost every case the observed and fitted values line up rather nicely. You just don’t get that kind of prettiness in psychological data without doing some prior aggregation of raw data.</p>
<p>Let’s take it a step further, and plot the observed data as a pharmacokinetic function (time vs drug concentration) and superimpose these over the model-estimated pharamacokinetic functions for each person. Again, this starts with a bit of data wrangling to extract what we need from the raw samples:</p>
<div class="cell" data-hash="index_cache/html/pk-predictions_252fae3f8b1bc4e5f70b61b9518afad2">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">prd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_fit"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb44-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_fit"</span>),</span>
<span id="cb44-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb44-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_hat"</span></span>
<span id="cb44-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(variable) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb44-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y_hat),</span>
<span id="cb44-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q5 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb44-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb44-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obs_id =</span> variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-16">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-17">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) </span>
<span id="cb44-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-19">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(obs_id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_num"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-20">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obs_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(obs_num),</span>
<span id="cb44-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(id)]</span>
<span id="cb44-23">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-24">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(id, obs_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-25">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_fit, dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_ids))</span>
<span id="cb44-26"></span>
<span id="cb44-27">prd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,496 × 7
   variable       yh    q5   q95    id obs_num  time
   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 c_fit[1,1]  0.303 0.241 0.378     0       1   0.1
 2 c_fit[1,2]  0.599 0.478 0.743     0       2   0.2
 3 c_fit[1,3]  0.885 0.709 1.10      0       3   0.3
 4 c_fit[1,4]  1.16  0.936 1.44      0       4   0.4
 5 c_fit[1,5]  1.44  1.16  1.77      0       5   0.5
 6 c_fit[1,6]  1.70  1.37  2.08      0       6   0.6
 7 c_fit[1,7]  1.96  1.59  2.39      0       7   0.7
 8 c_fit[1,8]  2.20  1.79  2.68      0       8   0.8
 9 c_fit[1,9]  2.45  2.00  2.96      0       9   0.9
10 c_fit[1,10] 2.68  2.19  3.24      0      10   1  
# ℹ 2,486 more rows</code></pre>
</div>
</div>
<p>And again, we use a little bit of ggplot2 magic to make it pretty:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(</span>
<span id="cb46-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> prd, </span>
<span id="cb46-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, yh, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> q5, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> q95),</span>
<span id="cb46-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span></span>
<span id="cb46-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(</span>
<span id="cb46-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> prd,</span>
<span id="cb46-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, yh)</span>
<span id="cb46-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb46-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> fit, </span>
<span id="cb46-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id)), </span>
<span id="cb46-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb46-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb46-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label</span>(</span>
<span id="cb46-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb46-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>, </span>
<span id="cb46-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, </span>
<span id="cb46-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id</span>
<span id="cb46-22">    ),</span>
<span id="cb46-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> id)</span>
<span id="cb46-24">  )<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb46-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), </span>
<span id="cb46-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb46-30">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb46-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time (hours)"</span>,</span>
<span id="cb46-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb46-34">  )</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/pk-profiles-1.png" class="img-fluid" width="1536"></p>
</div>
</div>
<p>In each of these plots, the grey shaded region is a 90% confidence band<sup>15</sup>, the solid curve is the posterior predicted pharmacokinetic curve, and the dots are the raw data. As you’d hope and expect, the uncertainty bands are larger in those cases where the measurements were all taken after the drug concentration reaches its peak: if all you’ve observed is the tail<sup>16</sup> then you’ll necessarily have some uncertainty about how high the peak was. Anyway, the main thing here is that the plots are very pretty, and you get a strong sense that the model does a good job of capturing the pattern of differences across people.</p>
</section>
<section id="individual-parameters" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="individual-parameters">Individual parameters</h3>
<p>Moving along in our exploration of the model… here’s the empirical distribution of estimated absorption rates (KA), clearance values (CL), and volume of distribution (V) parameters across people:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^(KA|CL|V)"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb47-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), </span>
<span id="cb47-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb47-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb47-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-8">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb47-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ind =</span> ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb47-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-12">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(parameter, ind) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-13">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value))</span>
<span id="cb47-14"></span>
<span id="cb47-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(pars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> parameter)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/individual-parameters-1.png" class="img-fluid" width="1152"></p>
</div>
</div>
<p>Okay, seems good to me I guess?</p>
</section>
<section id="residuals" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="residuals">Residuals</h3>
<p>We’re getting very close to the end. The last thing I want to do with this model is take a look at the residuals, since that’s usually the best bet if you want to detect non-obvious model failures. In the plot below I’ve plotted the residual term <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20-%20y"> for every observation in the data set. As before, each panel corresponds to an individual subject, and the residuals are plotted as a function of the observed drug concentration <img src="https://latex.codecogs.com/png.latex?y">:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">residual =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yh) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, residual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb48-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed concentration"</span>,</span>
<span id="cb48-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Residual"</span></span>
<span id="cb48-12">  )</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/residuals-1.png" class="img-fluid" width="1536"></p>
</div>
</div>
<p>For most people in the data set, there’s nothing here to suggest systematic model misfit. The residuals are small, and show no systematic pattern. In a few cases, however, the model struggles slightly. As foreshadowed earlier in the post, participant 12 is the most obvious example: the estimated pharamacokinetic curve is a little too flat (the peak isn’t high enough), leading to a systematic pattern where the model overestimates low concentrations and underestimates high concentrations. The effect is quite easy to spot in the residual plot, but virtually invisible in the individual-subject PK curves I showed in the last section. The model error isn’t very large (even for the worst-fit person the posterior predictive PK curves are still awfully good), but it is there.</p>
<p>The second version of a residual plot shows the unsigned residuals <img src="https://latex.codecogs.com/png.latex?%7C%5Chat%7By%7D%20-%20y%7C"> as a function of <img src="https://latex.codecogs.com/png.latex?y">. Here, what I’m looking for is evidence that the <em>magnitude</em> of the residuals is systematically larger at higher concentrations, and would be a hint that the additive error assumption I’ve used in this model is inadequate for modelling the data:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">residual =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yh)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, residual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb49-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed concentration"</span>,</span>
<span id="cb49-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsigned Residual"</span></span>
<span id="cb49-11">  )</span></code></pre></div>
<div class="cell-output-display column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/unsigned-residuals-1.png" class="img-fluid" width="1536"></p>
</div>
</div>
<p>On the whole I don’t think there’s much to worry about here. Of course that doesn’t mean that additive errors are theoretically plausible or correct, it simply means that the statistical model appears to work just fine even without tinkering with this assumption.</p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>As someone learning pharmacometrics coming from a rather different technical discipline (mathematical psychology), the thing I find truly surprising in this is how clean the data set is, despite containing relatively few data points. Folks outside of mathematical psychology might find it surprising to learn that there are some extremely effective formal models in psychology, some of which are horrifyingly technical (reading the infamous 2000 paper by Philip Smith in the <em>Journal of Mathematical Psychology</em> nearly broke me as a graduate student), but it’s usually the case for those models that you’re working with extremely noisy or impoverished data, so you need quite a lot of data to work with them safely. Yet here, we have a data set with a mere 32 people and only a handful of observations per person, and it’s entirely possible to fit a stochastic dynamic hierarchical Bayesian model that produces person-specific pharmacokinetic curves that closely match the observed data, only occasionally show hints of systematic misfit, and allow estimation of population level parameters with only modest uncertainty. Granted, from an empirical perspective it’s far more costly to take a measurement, and – quite rightly – there are stricter regulatory and ethical constraints that go into conducting a study like this than there would be for a typical psychological study, but even so, it still comes as a shock to me that it “just works”.</p>
<p>I could get used to this.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><p>Bauer, R. J., Guzy, S., &amp; Ng, C. (2007). A survey of population analysis methods and software for complex pharmacokinetic and pharmacodynamic models with examples. <em>The AAPS Journal, 9</em>, E60-E83. <a href="https://doi.org/10.1208/aapsj0901007">doi.org/10.1208/aapsj0901007</a></p></li>
<li><p>Bauer, R. J. (2019). NONMEM tutorial part I: Description of commands and options, with simple examples of population analysis. <em>CPT: Pharmacometrics &amp; Systems Pharmacology, 8</em>(8), 525-537. <a href="https://doi.org/10.1002/psp4.12404">doi.org/10.1002/psp4.12404</a></p></li>
<li><p>Bauer, R. J. (2019). NONMEM tutorial part II: Estimation methods and advanced examples. <em>CPT: Pharmacometrics &amp; Systems Pharmacology, 8</em>(8), 538-556. <a href="https://doi.org/10.1002/psp4.12422">doi.org/10.1002/psp4.12422</a></p></li>
<li><p>Foster, D., Abuhelwa, A. &amp; Hughes, J. (2019). <em>Population Analysis Using NONMEM Beginners Workshop</em>. Retrieved from: <a href="https://www.paganz.org/resources/">www.paganz.org/resources/</a></p></li>
<li><p>Navarro, D. J., Griffiths, T. L., Steyvers, M. and Lee, M. D. (2006). Modeling individual differences using Dirichlet processes. <em>Journal of Mathematical Psychology, 50</em>, 101-122. <a href="https://dx.doi.org/10.1016/j.jmp.2005.11.006">dx.doi.org/10.1016/j.jmp.2005.11.006</a></p></li>
<li><p>O’Reilly, R. A., &amp; Aggeler, P. M. (1968). Studies on coumarin anticoagulant drugs: initiation of warfarin therapy without a loading dose. <em>Circulation, 38</em>(1), 169-177. <a href="https://doi.org/10.1161/01.CIR.38.1.169">doi.org/10.1161/01.CIR.38.1.169</a></p></li>
<li><p>O’Reilly, R. A., Aggeler, P. M., &amp; Leong, L. S. (1963). Studies on the coumarin anticoagulant drugs: the pharmacodynamics of warfarin in man. <em>The Journal of Clinical Investigation, 42</em>(10), 1542-1551. <a href="https://doi.org/10.1172%2FJCI104839">doi.org/10.1172%2FJCI104839</a></p></li>
<li><p>Smith, P. L. (2000). Stochastic dynamic models of response time and accuracy: A foundational primer. <em>Journal of Mathematical Psychology, 44</em>(3), 408-463. <a href="https://doi.org/10.1006/jmps.1999.1260">doi.org/10.1006/jmps.1999.1260</a></p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes this is indeed a joke. Tom Griffiths, Mark Steyvers, and Michael Lee are all considerably more successful as academics than I ever was, so much so that when Mark fed the text of the paper – which is about 99% my writing – into an author-topic model that allows specific passages to be attributed to specific authors, it did not attribute a single word of the text to me. Oh well.↩︎</p></li>
<li id="fn2"><p>Technically I’m guessing the code here, but there’s a lot more 1s in the data than 0s, and a lot more of male subjects reported by O’Reilly &amp; Aggeler, so it seems a safe bet!↩︎</p></li>
<li id="fn3"><p>There’s an irony here: if these were psychological data we’d be delighted to have data this clean. Psychological data are as noisy as a drunken fuck on a Friday (to use a technical term). Nevertheless, the reality of the warfarin data set is that the data are actually a lot cleaner than this plot makes it seem.↩︎</p></li>
<li id="fn4"><p>I mean, from a statistical perspective what we’re saying is that we need a hierarchical model, and those are essentially the same thing regardless of the domain of application, but whatever.↩︎</p></li>
<li id="fn5"><p>Okay, technically these don’t have to be means: really what we’re talking about are location parameters. Again, whatevs.↩︎</p></li>
<li id="fn6"><p>Same as above: technically, we’re talking about scale parameters.↩︎</p></li>
<li id="fn7"><p>If we wanted to consider this correlation then we’d have a full variance-covariance matrix denoted <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, but I’m not going to go there in this post↩︎</p></li>
<li id="fn8"><p>Honestly, I wasn’t 100% certain that my interpretation was correct, but eventually I managed to find copies of the NONMEM user manuals online and they explain it there.↩︎</p></li>
<li id="fn9"><p>My notation is a little different to what I used in the previous post. That’s deliberate: last time around I wrote my model code and expressed the differential equations using notation that made sense to me. This time around I’m trying to bring my notation a little closer to the terminology used in the NONMEM control file I’m working from, in order to more closely match typical practice in the field.↩︎</p></li>
<li id="fn10"><p>Whenever I am being lazy I have the bad habit of assuming that the volume of distribution is basically the same thing as “the amount of blood plasma in the body”, but that’s not actually true. Certainly it makes sense as a crude first-approximation mental model, but bodies are complicated things so the reality is messier, and the apparent volume of distribution can be large than the amount of blood in the body.↩︎</p></li>
<li id="fn11"><p>If you believe the testimony of my ex-boyfriends, that is.↩︎</p></li>
<li id="fn12"><p>…or so I’m told. Honestly, the last time I had to work so hard to keep a straight face in front of a statistical audience was writing academic papers that required me to talk about posterior Weiner processes.↩︎</p></li>
<li id="fn13"><p>Not gonna lie, the only reason I finally forced myself to set this up is that, courtesy of an extremely unwise <code>git reset --hard</code> command while writing this post, I deleted the local copy of the <code>model1_draws.csv</code> file, and – lacking any remote copy of the bloody thing – had to rerun the entire sampler from the beginning to create a new one, wasting a lot of cpu cycles and exhausting most of my patience. Burned hands are the best teachers I guess…↩︎</p></li>
<li id="fn14"><p>The NONMEM output expressed the standard error as a percentage of the point estimate, but for the purposes of comparison to the Stan model I’ve converted them back to raw values.↩︎</p></li>
<li id="fn15"><p>More precisely, it’s a Bayesian 90% equal-tail credible region. Whatevs.↩︎</p></li>
<li id="fn16"><p>Sometimes referred to as the elimination phase, but of course this is a dynamic system, so in reality absorbption and elimination are happening in parallel all the time. However, in practice you end up with a situation where early on the absorption process is the primary driver and later on the elimination process is the primary driver.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Building a Population Pharmacokinetic Model with {Stan}},
  date = {2023-06-10},
  url = {https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Building a Population Pharmacokinetic
Model with Stan.”</span> June 10, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models">https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Pharmacokinetics</category>
  <category>R</category>
  <category>Stan</category>
  <category>NONMEM</category>
  <category>Bayes</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index.html</guid>
  <pubDate>Fri, 09 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/raimond-klavins-n-7HTOiJPso-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Software design by example</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>The book I’m currently reading is <a href="https://www.routledge.com/Software-Design-by-Example-A-Tool-Based-Introduction-with-JavaScript/Wilson/p/book/9781032330235">Software Design by Example: A Tool-Based Introduction with JavaScript</a> by <a href="https://third-bit.com/">Greg Wilson</a>. Greg was kind enough to send me a review copy a little while back, and I’ve been slowly working my way through it.</p>
<p>In some ways I’m not the target audience for the book: it’s a book about software engineering that uses JavaScript for the worked examples, not a book designed to teach you JavaScript. I’m not the worst JavaScript coder in the world, but I’m not the strongest either, so it’s harder work for me than maybe it would have been if JavaScript were my primary language.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example/cover.jpg" class="img-fluid figure-img" alt="Book cover for 'Software Design by Example'"></p>
</figure>
</div>
<section id="who-is-the-book-for" class="level2">
<h2 class="anchored" data-anchor-id="who-is-the-book-for">Who is the book for?</h2>
<p>Some years ago I took a very good course that Greg ran on how to teach technical concepts,<sup>1</sup> and one thing he emphasised in that course is the importance of designing teaching materials with <em>specific</em> learning personas in mind. Having a small number of representative examples in mind when you write the content is incredibly useful when teaching, so it is no surprise that – literally on page 1 – the book states explicitly what the learner personas used to write the book were.</p>
<p>I’m going to reproduce them in full in this blog post as a reminder to myself that this is the right way to construct learner personas.</p>
<blockquote class="blockquote">
<ul>
<li>Aïsha started writing VB macros for Excel in an accounting course and never looked back. After spending three years doing front-end JavaScript work she now wants to learn how to build back-end applications. This material will fill in some gaps in her programming knowledge and teach her some common design patterns</li>
<li>Rupinder is studying computer science at college. He has learned a lot about the theory of algorithms, and while he uses Git and unit testing tools in his assignments, he doesn’t feel he understands how they work. This material will give him a better understanding of these tools and how to design new ones.</li>
<li>Yim builds mobile apps for a living but also teaches two college courses: one on full-stack web development using JavaScript and Node and another titled “Software Design”. They are happy with the former, but frustrated that so many books about the latter subject talk about it in the abstract and use examples that their students can’t relat to. This material will fill those gaps and give them starting points for a wide variety of course assignments.</li>
</ul>
</blockquote>
<p>They’re detailed enough to make the teacher engage with the personas during the writing process, diverse enough to help catch things the writer might not have thought of, and provide a <em>strong</em> indication to the learner about whether the book is written for them. In my case, for instance, it’s pretty clear from the outset that I’m likely to struggle with the level of JavaScript involved. Indeed, when I look at the list of skills that the reader is expected to have (on pages 1-2) I’m fine on most things but I suspect I have a little less practical experience with JavaScript than is ideal for a reader of this book. I’m not terrible at it, I just don’t spend enough time with it to feel fluent.</p>
<p>That’s okay, of course. It’s often a good experience as a learner to read content that pushes you outside your comfort zone. What matters is that you <em>know in advance</em> which aspects are going to be hard work for you. Thankfully, <em>Software Design by Example</em> does that very well at the beginning.</p>
</section>
<section id="rewarding-the-cursory-reader" class="level2">
<h2 class="anchored" data-anchor-id="rewarding-the-cursory-reader">Rewarding the cursory reader</h2>
<p>Despite knowing from the outset that I’m ever-so-slightly outside the target audience for the book, I’m still finding it very rewarding. To understand why, it’s worth taking a moment to look at how the book uses the glossary as the end to help readers like myself who have never received a formal education in programming… I’m basically the Aïsha persona, except with R playing the same role for me that JavaScript plays for her.</p>
<p>Because I don’t have a formal background and – to put it gently – don’t belong to a demographic that can easily acquire the “culture” of software engineering, I very commonly have the experience in conversation that software engineers will use terms that they simply assume that “everybody knows”, and never take the time to explain them. The actual concepts are often very simple things, and often I’ve had experience with them without knowing the names, but no-one ever tells you what the words mean and – sadly – many people in the field have a tendency to make you feel like an idiot if you ask.</p>
<p>With that as the real world backdrop, I’m finding the glossary to be worth its weight in gold. Here’s a little snippet from the top of page 318:</p>
<blockquote class="blockquote">
<ul>
<li><strong>query string</strong>. The portion of a <strong>URL</strong> after the question mark ? that specfies extra parameters for the <strong>HTTP request</strong> as name-value pairs</li>
<li><strong>race condition</strong>. A situation in which a result depend on the order in which two or more concurrent operations are carried out.</li>
<li><strong>raise (an exception)</strong>. To signal that something unexpected or unusual has happened in a program by creating an <strong>exception</strong> and handling it to the <strong>error-handling</strong> system, which then tries to find a point in the program that will <strong>catch</strong> it.</li>
<li><strong>read-eval-print-loop (REPL)</strong>. An interactive program that reads a command typed in by a user, executes it, prints the result, and then waits patiently for the next command. REPLs are often used to explore new ideas, or for debugging.</li>
</ul>
</blockquote>
<p>I can honestly say that at no point in my life has someone explained to me what a <a href="https://en.wikipedia.org/wiki/Race_condition">race condition</a> is or what a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> actually is. Seriously. I’ve worked in tech companies and people use those terms all the time but they never explain them. Very frustrating. So when I read entries like this in the glossary I find myself going “oh, <em>that’s</em> what <blah> means… okay, yes, I did already know this… but now I know what the name for it is”. I mean, race conditions are not at all unfamiliar to me – I encounter them quite a bit – but because software engineers have a tendency to refer to “race conditions” without ever saying what the term means, I’ve sat in a lot of very confusing conversations over the years that would have made a lot more bloody sense had I known the nomenclature or been in a position to “just ask” without being made to feel stupid.</blah></p>
<p>I think that’s likely to be true for a lot of self-taught programmers who never studied computer science, but instead had to learn to code in order to solve practical problems. The mere act of reading a concise definition of each thing has the effect of making my mental model more precise, and better aligned with the mental models that other people in the field adopt. It’s a helpful way to learn the culture and avoid getting caught out by the various <a href="https://en.wikipedia.org/wiki/Shibboleth">shibboleths</a> that are sadly pervasive the tech industry.<sup>2</sup></p>
<p>There are other examples of this sort of thing throughout the book, historical anecdotes and other tidbits that make it a little easier for an outsider to make sense of the culture of software engineering. As an example, this little passage on page 145 makes sense of something I’ve never understood:</p>
<blockquote class="blockquote">
<p>The coordinate systems for screens puts (0, 0) in the upper left corner instead of the lower left. X increases to the right as usual, but Y increases as we go down, rather than up [The book has a little picture here]. This convention is a holdover from the days of teletype terminals that printed lines on rolls of paper</p>
</blockquote>
<p>These historical asides are really valuable. It feels a little bit like one of those “Magician’s Secrets Revealed!” shows. Knowing the terminology, conventions, and history behind a thing does so much of the work in making it all feel a bit more coherent.</p>
<p>Anyway, let’s dive a little deeper, shall we?</p>
</section>
<section id="a-worked-example" class="level2">
<h2 class="anchored" data-anchor-id="a-worked-example">A worked example</h2>
<blockquote class="blockquote">
<p>My mum always liked Delia Smith <br> And I drank, drank, drank just to deal with my shit <br> I learned to tell little white lies <br> When I feel inadequate almost all the time <br> <br> I’d like to think I’m deep <br> I’d like to think I’m deep <br> I’d like to think I’m deep <br> But I just skim the pages, so I can fake my speech <br> &nbsp; &nbsp; - <a href="https://youtu.be/zHHjDihVwiQ">Sprints</a></p>
</blockquote>
<p>A little honesty when writing blog posts is important, I feel. When reading the book I did not, in fact, attempt all the exercises or work through all the code examples. I tinkered with a few of the examples, read some parts thoroughly, and skimmed other parts. That’s pretty representative of how I read technical books, really. I’ll pick a few parts that I want to understand properly and do a deep dive in those sections, and read the rest of it in a much more superficial way.</p>
<p>The parts that I did read fairly deeply are Chapters 7 and 8, which talk about how to <a href="https://en.wikipedia.org/wiki/Parsing">parse</a> a <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expression</a>, and how to write the code that does <a href="https://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a> using them. Actually, if I’m super honest the part I spent most time with is Chapter 8, which shows you how to extract <a href="https://en.wikipedia.org/wiki/Lexical_analysis#Token">tokens</a> and a <a href="https://en.wikipedia.org/wiki/Parse_tree">parse tree</a> for a restricted form of regular expression syntax. For that chapter, I worked through the examples and translated (most of) the code in R. In the rest of the post I’ll show the code that I wrote, tie it back to the structure of Chapter 8 in the book, and at the end I’ll say a little about what I learned from this exercise.</p>
<p>The subset of regular expression syntax that the book uses for this chapter has the following rules:</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 56%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Token Kind</th>
<th style="text-align: left;">Meaning</th>
<th style="text-align: center;">Characters used</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Literal</td>
<td style="text-align: left;">A literal character</td>
<td style="text-align: center;"><code>a</code>, <code>b</code>, <code>c</code>, etc</td>
</tr>
<tr class="even">
<td style="text-align: left;">Start</td>
<td style="text-align: left;">Beginning of string</td>
<td style="text-align: center;"><code>^</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">End</td>
<td style="text-align: left;">End of string</td>
<td style="text-align: center;"><code>$</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Any</td>
<td style="text-align: left;">Zero or more of the previous thing</td>
<td style="text-align: center;"><code>*</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Or</td>
<td style="text-align: left;">Either the thing before or the thing after</td>
<td style="text-align: center;"><code>|</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group</td>
<td style="text-align: left;">Collection of tokens to treat as one thing</td>
<td style="text-align: center;"><code>(</code> and <code>)</code></td>
</tr>
</tbody>
</table>
<p>It’s a very small subset of the regular expression grammar available for pattern matching in R, JavaScript, and pretty much every language these days, but it’s a handy one. It’s certainly rich enough to make it an interesting exercise to write a parser. Not that it’s particularly important to write my own parser: the purpose of doing so is to wrap my head around the basics of how parsers work and nothing more. As Greg helpfully reminds us on page 99, if a format is commonly known there will be good tools already, and if you find yourself wanting to roll your own parser to interpret some new file format you just invented for something… there’s a good chance you shouldn’t do it. The world has enough file formats already.</p>
</section>
<section id="writing-the-tokenizer" class="level2">
<h2 class="anchored" data-anchor-id="writing-the-tokenizer">Writing the tokenizer</h2>
<p>If you want to write a regular expression parser, or any other parser for that matter, you actually have two distinct but interrelated problems to solve. Your data takes the form of an input string that you need to process. In English text, an input string might look like <code>"Danielle hates regular expressions"</code> but in a regular expression you’re more likely to have something that looks like <code>"^caa*t$</code>. To interpret these strings – in a purely <a href="https://en.wikipedia.org/wiki/Syntax">syntactic</a> sense, not a <a href="https://en.wikipedia.org/wiki/Semantics">semantic</a> one – you need to</p>
<ul>
<li><p>Carve the string up into a sequence of distinct (and possibly labelled) <strong>tokens</strong>. My English expression could be divided into a sequence of four tokens corresponding to the four words: <code>"Danielle"</code>, <code>"hates"</code>, <code>"regular"</code>, <code>"expressions"</code>. This <strong>tokenization</strong> process is not uniquely defined. For instance, I might choose to acknowledge that the <code>"-s"</code> ending in some words is in fact a distinct unit. While this is absolutely not the post to talk about <a href="https://en.wikipedia.org/wiki/Inflection">inflexional morphology</a> in linguistics, it’s important to recognise that in some contexts you might want to tokenize my sentence as <code>"Danielle"</code>, <code>"hate"</code>, <code>"-s"</code>, <code>"regular"</code>, <code>"expression"</code>, <code>"-s"</code>.</p></li>
<li><p>Organise (or <strong>parse</strong>) the tokens into a structured format that explicitly acknowledges the way they relate to each other grammatically. For my English sentence this parsing might be something like this <code>[Danielle] [[hates] [regular expressions]]</code>, where I’m using the square brackets to illustrate the organisation: <code>"regular expressions"</code> and <code>"Danielle"</code> are both <a href="https://en.wikipedia.org/wiki/Noun_phrase">noun phrases</a>, <code>[hates]</code> is a verb, and <code>[hates regular expressions]</code> is a <a href="https://en.wikipedia.org/wiki/Verb_phrase">verb phrase</a>.</p></li>
</ul>
<p>The difference between the two is visually apparent when you try to draw them. When you tokenize the input you end up with a list of tokens:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Danielle
hates
regular
expressions</code></pre>
</div>
</div>
<p>After parsing this list of tokens, you end up with a tree. There’s lots of ways you could visualise this tree, but something like this is good enough for my purposes:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[
  Danielle
]
[
  [
    hates
  ]
  [
    regular
    expressions
  ]
]</code></pre>
</div>
</div>
<p>I could probably take this a bit further and annotate each part of the tree the way that linguists like to do, but it’s not necessary to get the basic idea.</p>
<p>The key thing to realise is that these two problems aren’t independent. If you tokenize the string in a way that isn’t suited to your problem, you’re going to make life harder when you try to write the parser. As it happens, <em>Software Design by Example</em> gives you a very gentle example of how this happens, which I’ll get to in moment when I try to write some code that automatically parses regular expressions like <code>^caa*t$</code>.</p>
<section id="preliminaries" class="level3">
<h3 class="anchored" data-anchor-id="preliminaries">Preliminaries</h3>
<p>In the book, all the examples are – obviously!!! – written in JavaScript, and my code is going to be written in R. This matters somewhat since R and JavaScript are different languages with different assumptions about how you write code.<sup>3</sup> To make my life a little easier, I’m going to define some extremely informal R classes<sup>4</sup> that don’t actually do much. In my code, a “token” is just a list that has three fields: the <code>kind</code> of token referred to, the <code>loc</code> (location) of the token within the original string, and (optionally) a <code>value</code> that specifies the character (or characters) that represent the token in that string. Relatedly, the “token list” class is literally just a list:</p>
<div class="cell" data-file="token_class.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>token_class.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(kind, loc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> kind, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> loc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value),</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span></span>
<span id="cb3-5">  )</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">token_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...),</span>
<span id="cb3-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_list"</span></span>
<span id="cb3-12">  )</span>
<span id="cb3-13">}</span>
<span id="cb3-14"></span>
<span id="cb3-15">print.token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Token at "</span>,  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt; "</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value)) {</span>
<span id="cb3-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value)</span>
<span id="cb3-19">  }</span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb3-22">}</span>
<span id="cb3-23"></span>
<span id="cb3-24">print.token_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb3-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Empty token list&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-27">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb3-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(token <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) {</span>
<span id="cb3-29">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(token)</span>
<span id="cb3-30">    }</span>
<span id="cb3-31">  }</span>
<span id="cb3-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb3-33">}</span></code></pre></div>
</div>
</div>
<p>The reason I decided to write this code for this post is that it also defines <code>print()</code> methods for these objects that make the printed output a little prettier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Noun"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Noun: Danielle</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_list</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Noun"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle"</span>),</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verb"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hates"</span>)</span>
<span id="cb6-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Noun: Danielle
&lt;Token at 10&gt; Verb: hates</code></pre>
</div>
</div>
<p>Without the print methods, you’d see each token printed as a list, and the list of tokens printed as a list of lists. It’s not super-important, but it does help me stay sane as I write. But whatever, let’s move on and start writing a tokenizer for (very restricted!) regular expressions…</p>
</section>
<section id="version-1" class="level3">
<h3 class="anchored" data-anchor-id="version-1">Version 1</h3>
<p>A hallmark of good teaching – in my not-entirely-humble opinion – is when the instructor designs material in a way that gently encourages the learner to discover things on your own. Chapter 8 of <em>Software Design by Example</em> does this rather nicely at the beginning, by having the reader start out by writing a simple tokenizer that is later revealed to be “readable, efficient, and wrong”. At the risk of revealing the instructional magic that Greg is so terribly good at, I’ll explicitly state the flawed intuition that might lead you to write a tokenizer like this.</p>
<p>Suppose I were to think about my tokenizer by considering a regular expression like <code>"^(cat)|(dog)$"</code>. There’s a real trap you can fall into here, because this regular expression has natural language words, and you might be tempted to write a tokenizer that treats <code>"cat"</code> and <code>"dog"</code> as tokens. Or, to be slightly more precise, you might decide that to create tokens that allow “Literals” to contain multiple characters, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^(cat|dog)$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; GroupStart
&lt;Token at 3&gt; Literal: cat
&lt;Token at 6&gt; Or
&lt;Token at 7&gt; Literal: dog
&lt;Token at 10&gt; GroupEnd
&lt;Token at 11&gt; End</code></pre>
</div>
</div>
<p>Merging a sequence of literal characters into a single multi-character literal makes the output readable, and who doesn’t love it when the tokenizer informs you that you have a “Literal cat” in your string?</p>
<p>The book then walks you through the process of writing a <code>tokenize()</code> function that behaves exactly like this. Obviously, the original is in JavaScript, but here’s an R version:</p>
<div class="cell" data-file="tokenizer_1.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tokenizer_1.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb10-1">simple <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>,</span>
<span id="cb10-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>,</span>
<span id="cb10-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>,</span>
<span id="cb10-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span></span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8">tokenize <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb10-9">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_list</span>()</span>
<span id="cb10-10">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb10-12">    chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> i)</span>
<span id="cb10-13"></span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simple cases are always added as non-literal tokens</span></span>
<span id="cb10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(simple)) {</span>
<span id="cb10-16">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(simple[[chr]], i)</span>
<span id="cb10-17">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-18"></span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ^ character is non-literal if position is 1</span></span>
<span id="cb10-20">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb10-21">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, i)</span>
<span id="cb10-22">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-23"></span>
<span id="cb10-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the $ character is non-literal if it's the last character</span></span>
<span id="cb10-25">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb10-26">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, i)</span>
<span id="cb10-27">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-28"></span>
<span id="cb10-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># literals that follow a non-literal create a new token</span></span>
<span id="cb10-30">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> result[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>){</span>
<span id="cb10-31">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> chr)</span>
<span id="cb10-32">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-33"></span>
<span id="cb10-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># literals that follow a literal are combined with it</span></span>
<span id="cb10-35">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb10-36">      result[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(result[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, chr)</span>
<span id="cb10-37">    }</span>
<span id="cb10-38">  }</span>
<span id="cb10-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb10-40">}</span></code></pre></div>
</div>
</div>
<p>I won’t recapitulate all the steps that go into writing code like this – read the book if you want to know things at this level of detail – but suffice it to say that if I were better at JavaScript I’d have found it very easy to follow.</p>
<p>The point that matters here is that the reader is being encouraged to consider what happens to you later if you tokenize the input this way. Merging a sequence of literal characters into a single multi-character literal makes the output readable, and <em>in this specific case</em> the token list is very convenient if I later wanted to write a regular expression matcher that builds on top of this tokenizer. Using the base R <code>grepl()</code> function, you can see which strings match <code>"^(cat|dog)$"</code> and which don’t:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^(cat|dog)$"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dag"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ca"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE FALSE</code></pre>
</div>
</div>
<p>If my tokenizer represents the literals in <code>^(cat|dog)$</code> as the two multicharacter literals <code>"cat"</code> and <code>"dog"</code> then – in this instance – it’s going to be easier for me to write a regex matcher that mirrors the behaviour of <code>grepl()</code>.</p>
<p>Very nice.</p>
<p>Unfortunately, once you start thinking about regular expressions more generally, there’s a big problem with this tokenizer. It’s trying to be clever, by grouping multiple literals together without considering how those literals will be used later on by the parser, and it ends up being too greedy sometimes. Consider the regular expression <code>"^caa*t$"</code>. This is a pattern that should match against <code>"cat"</code> and <code>"caaaaat"</code> but should not match <code>"caacaat"</code>, as illustrated below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"caaaaat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"caacaat"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
</div>
<p>However, let’s look at the tokens produced by our <code>tokenizer()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: caa
&lt;Token at 5&gt; Any
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>Yeah, we’re in big trouble here.</p>
<p>That’s the wrong way to tokenize this input: in this regular expression the <code>*</code> operator (i.e., the <code>Any</code> token in our token list) needs to be applied only to the preceding character, so it’s not correct to treat <code>"caa"</code> as a single literal string. To write a functioning parser on top of this tokenizer would be a nightmare, because the parser would need to inspect the internal contents of the tokens: in order to parse the <code>*</code> character (the <code>Any</code> token), it would need to grab the <code>Literal caa</code> token and split it into two parts, a prefix <code>"ca"</code> and a suffix <code>"a"</code>, because <code>*</code> applies only to the suffix.</p>
<p>What this is telling us is that we’ve chosen a poor tokenizing scheme. The book is quite gentle in leading the reader to this conclusion, but when you’re actually writing the code yourself you can’t avoid discovering it. If your parser has to break apart your tokens to organise the input, then really you should be rethinking the tokenizer.</p>
</section>
<section id="version-2" class="level3">
<h3 class="anchored" data-anchor-id="version-2">Version 2</h3>
<p>Okay so that doesn’t work. The second approach considered in the chapter simplifies the code a little and produces a token list where every literal character is treated as a distinct token. The code is only a minor modification of the previous version:</p>
<div class="cell" data-file="tokenizer_2.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tokenizer_2.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb17-1">simple <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb17-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>,</span>
<span id="cb17-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>,</span>
<span id="cb17-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>,</span>
<span id="cb17-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span></span>
<span id="cb17-6">)</span>
<span id="cb17-7"></span>
<span id="cb17-8">tokenize <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb17-9">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_list</span>()</span>
<span id="cb17-10">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb17-12">    chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> i)</span>
<span id="cb17-13"></span>
<span id="cb17-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simple cases are always added as non-literal tokens</span></span>
<span id="cb17-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(simple)) {</span>
<span id="cb17-16">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(simple[[chr]], i)</span>
<span id="cb17-17">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-18"></span>
<span id="cb17-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ^ character is non-literal if position is 1</span></span>
<span id="cb17-20">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb17-21">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, i)</span>
<span id="cb17-22">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-23"></span>
<span id="cb17-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the $ character is non-literal if it's the last character</span></span>
<span id="cb17-25">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb17-26">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, i)</span>
<span id="cb17-27">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># literals always create a new token</span></span>
<span id="cb17-30">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb17-31">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> chr)</span>
<span id="cb17-32">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-33">    }</span>
<span id="cb17-34">  }</span>
<span id="cb17-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb17-36">}</span></code></pre></div>
</div>
</div>
<p>Here’s the sort of output we get from this version of the tokenizer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: c
&lt;Token at 3&gt; Literal: a
&lt;Token at 4&gt; Literal: a
&lt;Token at 5&gt; Any
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>This output is entirely correct, as long as our goal is <em>only</em> to extract and label the tokens in our regular expression. The output correctly labels each literal as a literal and assigns the appropriate label to the non-literals. What is very clear, though, when you look at the output from this version of <code>tokenize()</code> is that it is absolutely <em>not</em> a parser. We’ve lost the grouping structure that we had in our original version. The tokenizer has no way of expressing the idea that <code>"ca"</code> is a syntactically coherent unit in the expression <code>^caa*t$</code>, or that <code>"cat"</code> is similarly coherent within <code>^(cat|dog)$</code>. It’s a good tokenizer, but a bad parser.</p>
<p>That’s okay: it’s not meant to be a parser. The tokenizer does its job perfectly well, and importantly it provides output that a good parser can work with. It requires a little thought, but it’s going to work out okay because the tokenizer is reliable <em>as</em> a tokenizer. Each tool does one job and only that job: you don’t need your tokenizer to parse the syntax, and you don’t want your parser to mess around with the internal contents of the tokens.</p>
<p>Gosh… I wonder if that’s one of those software engineering principles?</p>
</section>
<section id="post-mortem" class="level3">
<h3 class="anchored" data-anchor-id="post-mortem">Post-mortem</h3>
<p>At this point any competent software engineer is probably screaming internally, because I have not written any unit tests for my code. This is terribly bad practice, and something I would never do when writing actual software.<sup>5</sup> Suffice it to say <em>Software Design by Example</em> is at great pains to emphasize the importance of unit tests, and if you were actually following the chapter step by step you’d see that Greg does in fact introduce tests as he develops this example. I’ve been lazy in this blog post because… well, it’s a blog post. It’s neither intended to be software nor a chapter in a book on software engineering.</p>
<p>Anyway… let’s return to the development of ideas in the chapter, yes?</p>
</section>
</section>
<section id="parsing-the-tokens" class="level2">
<h2 class="anchored" data-anchor-id="parsing-the-tokens">Parsing the tokens</h2>
<p>The second half of chapter 8 in <em>Software Design by Example</em> focuses on the parser, and again I’m not going to try to recapitulate all the logic that the book walks you through. It takes the reader through an intuitive process of thinking about how you want to write the parser, but the key thing I want to highlight is that when you’re reading the book you get a strong sense of why you want to write the parser in two parts: there’s a “forward pass” where the parser sweeps through the token list from first to last, constructing the parts of the parse tree that it can handle on the basis of what it has seen so far, and then a subsequent clean up phase where it sweeps back and fixes all the incomplete parts. When I came to implement it in R myself I made some small departures from the way Greg has done it in the book, but the essence is the same. What I’ll do here is present two versions of the parser, one that <em>only</em> does the forward pass (so you can see all the missing bits), and then a second version that does the clean up afterwards.</p>
<section id="preliminaries-1" class="level3">
<h3 class="anchored" data-anchor-id="preliminaries-1">Preliminaries</h3>
<p>As before, I’ll do some preliminary work that isn’t really essential for the purposes of the book, but I find helpful for writing this blog post. Specifically, I’ll define a <code>subtree()</code> function that provides a “subtree” class. All it does is capture the fundamental structure of a tree: each node is defined by a <code>parent</code> element, and that parent can have zero, one, or more <code>children</code>. This isn’t really necessary for our parser, but it does allow me to define a <code>print()</code> method that makes the parse trees in this post look a little prettier:</p>
<div class="cell" data-file="parse_class.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parse_class.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb20-1">subtree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(parent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> parent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> children),</span>
<span id="cb20-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subtree"</span></span>
<span id="cb20-5">  )</span>
<span id="cb20-6">}</span>
<span id="cb20-7"></span>
<span id="cb20-8">print.subtree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb20-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb20-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Empty parse_tree&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-11">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent)</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb20-14">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(child <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) {</span>
<span id="cb20-15">        out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(child))</span>
<span id="cb20-16">        out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"    "</span>, out)</span>
<span id="cb20-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(out, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-18">      }</span>
<span id="cb20-19">    }</span>
<span id="cb20-20">  }</span>
<span id="cb20-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb20-22">}</span></code></pre></div>
</div>
</div>
<p>Whatevs. That’s not really the point of the book, and frankly if I were writing a book on software design<sup>6</sup> I would probably make the same choice that Greg has made: for the blog post I want pretty output because it’s supposed to be an easy read. For a book that is intended to help you think about software design? For that you actually want the reader to engage deeply with the “list of lists of lists of…” data structure that my print methods are glossing over.</p>
</section>
<section id="version-1-1" class="level3">
<h3 class="anchored" data-anchor-id="version-1-1">Version 1</h3>
<p>With that out of the way, let’s have a look at the code for a parser that only does the forward sweep. The key insight that the book walks you through is that there are three distinct types of action the parser takes at this step:</p>
<ul>
<li>There are kinds of token (<code>Literal</code>, <code>Start</code>, <code>End</code>, and <code>GroupStart</code>) that the parser can process simply by appending the token to the bottom of the tree the moment it encounters them.</li>
<li>There are other kinds of token (<code>GroupEnd</code> and <code>Any</code>) that require the parser to restructure the tree, but they rely only on the tokens seen so far, so the parser can reorganise the tree on the fly during this first pass</li>
<li>There is one annoying token (<code>Or</code>) that depends both on things the parser has already seen <em>and</em> on things that haven’t been observed yet as the parser sweeps forward. What we do here is a partial organisation: we process the bits we know about (e.g., the <code>a</code> on the left hand side of an <code>a|b</code> statement is known even when we’ve only read <code>a|</code> so far) but then leave a “Missing” placeholder token to express the fact that we know that the <code>Or</code> operator <code>|</code> has two children: we know <code>a</code>, but <code>b</code> will need to be filled in later.</li>
</ul>
<p>Here’s the R code, which supplies an <code>update_tree()</code> function that sequentially modifes the parse tree whenever new tokens arrive:<sup>7</sup></p>
<div class="cell" data-file="parser_1.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parser_1.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb21-1">list_reverse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb21-2">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-3">}</span>
<span id="cb21-4"></span>
<span id="cb21-5">update_tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree, token) {</span>
<span id="cb21-6"></span>
<span id="cb21-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For some kinds of token, we simply append them to the tree</span></span>
<span id="cb21-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>)) {</span>
<span id="cb21-9">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(token)</span>
<span id="cb21-10">  }</span>
<span id="cb21-11"></span>
<span id="cb21-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When GroupEnd is encountered, find the most recent GroupStart and</span></span>
<span id="cb21-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the tokens between them the children of a Group</span></span>
<span id="cb21-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span>) {</span>
<span id="cb21-15">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb21-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb21-17">      last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb21-18">      tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]</span>
<span id="cb21-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>) {</span>
<span id="cb21-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb21-21">      }</span>
<span id="cb21-22">      children[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> last</span>
<span id="cb21-23">    }</span>
<span id="cb21-24">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb21-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>, last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loc),</span>
<span id="cb21-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_reverse</span>(children)</span>
<span id="cb21-27">    )</span>
<span id="cb21-28">  }</span>
<span id="cb21-29"></span>
<span id="cb21-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Any is encountered, make the preceding token (or subtree)</span></span>
<span id="cb21-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the child of the Any token</span></span>
<span id="cb21-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>) {</span>
<span id="cb21-33">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb21-34">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb21-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb21-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last)</span>
<span id="cb21-37">    )</span>
<span id="cb21-38">  }</span>
<span id="cb21-39"></span>
<span id="cb21-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Or is encountered, create a subtree with two children. The</span></span>
<span id="cb21-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first (or left) child is taken by moving it from the previous</span></span>
<span id="cb21-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># token/subtree in our list. The second child is tagged as "Missing"</span></span>
<span id="cb21-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and will be filled in later</span></span>
<span id="cb21-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>) {</span>
<span id="cb21-45">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb21-46">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb21-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb21-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb21-49">    )</span>
<span id="cb21-50">  }</span>
<span id="cb21-51"></span>
<span id="cb21-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb21-53">}</span>
<span id="cb21-54"></span>
<span id="cb21-55">parse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb21-56">  tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb21-57">  tokens <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(text)</span>
<span id="cb21-58">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(token <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tokens) {</span>
<span id="cb21-59">    tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_tree</span>(tree, token)</span>
<span id="cb21-60">  }</span>
<span id="cb21-61">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(tree) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_list"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allows pretty printing</span></span>
<span id="cb21-62">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb21-63">}</span></code></pre></div>
</div>
</div>
<p>For expressions like <code>"^caa*t$</code> that don’t have a <code>|</code>, this version of the parser constructs a completed parse tree:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: c
&lt;Token at 3&gt; Literal: a
&lt;Token at 5&gt; Any
     &lt;Token at 4&gt; Literal: a
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>Notice that the ordering of the tokens has changed: to represent the subexpression <code>a*</code>, the parser creates an <code>Any</code> token corresponding to the <code>*</code> character and ensures that the <code>Literal</code> <code>a</code> token is a child of the <code>Any</code> operator.</p>
<p>A similar thing happens where <code>GroupStart</code> and <code>GroupEnd</code> tokens are collapsed into a single <code>Group</code> token that has all tokens within the group as children:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(na)* hey yeah goodbye"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 5&gt; Any
     &lt;Token at 1&gt; Group
          &lt;Token at 2&gt; Literal: n
          &lt;Token at 3&gt; Literal: a
&lt;Token at 6&gt; Literal:  
&lt;Token at 7&gt; Literal: h
&lt;Token at 8&gt; Literal: e
&lt;Token at 9&gt; Literal: y
&lt;Token at 10&gt; Literal:  
&lt;Token at 11&gt; Literal: y
&lt;Token at 12&gt; Literal: e
&lt;Token at 13&gt; Literal: a
&lt;Token at 14&gt; Literal: h
&lt;Token at 15&gt; Literal:  
&lt;Token at 16&gt; Literal: g
&lt;Token at 17&gt; Literal: o
&lt;Token at 18&gt; Literal: o
&lt;Token at 19&gt; Literal: d
&lt;Token at 20&gt; Literal: b
&lt;Token at 21&gt; Literal: y
&lt;Token at 22&gt; Literal: e</code></pre>
</div>
</div>
<p>For expressions that contain an either/or operation, we end up with a parse tree that contains one or more <code>Missing</code> tokens. That’s my way of expressing the fact that the parser needs to come back and clean up afterwards:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(cat)|(dog)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 6&gt; Or
     &lt;Token at 1&gt; Group
          &lt;Token at 2&gt; Literal: c
          &lt;Token at 3&gt; Literal: a
          &lt;Token at 4&gt; Literal: t
     &lt;Token at 0&gt; Missing
&lt;Token at 7&gt; Group
     &lt;Token at 8&gt; Literal: d
     &lt;Token at 9&gt; Literal: o
     &lt;Token at 10&gt; Literal: g</code></pre>
</div>
</div>
<p>Notice that there are some kinds of regular expressions for which this clean-up might require us to dive deep into the tree to fix the incomplete parts:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab|((cd*)|ef)|g"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Literal: a
&lt;Token at 3&gt; Or
     &lt;Token at 2&gt; Literal: b
     &lt;Token at 0&gt; Missing
&lt;Token at 14&gt; Or
     &lt;Token at 4&gt; Group
          &lt;Token at 10&gt; Or
               &lt;Token at 5&gt; Group
                    &lt;Token at 6&gt; Literal: c
                    &lt;Token at 8&gt; Any
                         &lt;Token at 7&gt; Literal: d
               &lt;Token at 0&gt; Missing
          &lt;Token at 11&gt; Literal: e
          &lt;Token at 12&gt; Literal: f
     &lt;Token at 0&gt; Missing
&lt;Token at 15&gt; Literal: g</code></pre>
</div>
</div>
<p>Again, there’s a kind of principle here: each part of the tool has its own job to do. The forward pass does the parts that it can do, and delegates the unfinished work to the clean-up process. When reading the book, and especially when implementing it yourself, the learner is invited to think about the importance of carving up the software into sensible parts.</p>
<p>Seems like a thing worth knowing.</p>
</section>
<section id="version-2-1" class="level3">
<h3 class="anchored" data-anchor-id="version-2-1">Version 2</h3>
<p>At this point in the post I’m guessing that the reader is about ready to see the end product. The final version of the code adds a <code>compress_tree()</code> function that is called once the forward pass is complete. For simple trees all it really does is sweep up from bottom to top, but because there are regular expressions in which you can have <code>Or</code> tokens nested quite a long way into the parse tree it also sweeps up through the subtrees when they are encountered:</p>
<div class="cell" data-file="parser_2.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parser_2.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb30-1">list_reverse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb30-2">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-3">}</span>
<span id="cb30-4"></span>
<span id="cb30-5">update_tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree, token) {</span>
<span id="cb30-6"></span>
<span id="cb30-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For some kinds of token, we simply append them to the tree</span></span>
<span id="cb30-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>)) {</span>
<span id="cb30-9">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(token)</span>
<span id="cb30-10">  }</span>
<span id="cb30-11"></span>
<span id="cb30-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When GroupEnd is encountered, find the most recent GroupStart and</span></span>
<span id="cb30-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the tokens between them the children of a Group</span></span>
<span id="cb30-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span>) {</span>
<span id="cb30-15">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb30-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb30-17">      last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb30-18">      tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]</span>
<span id="cb30-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>) {</span>
<span id="cb30-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb30-21">      }</span>
<span id="cb30-22">      children[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> last</span>
<span id="cb30-23">    }</span>
<span id="cb30-24">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb30-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>, last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loc),</span>
<span id="cb30-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_reverse</span>(children)</span>
<span id="cb30-27">    )</span>
<span id="cb30-28">  }</span>
<span id="cb30-29"></span>
<span id="cb30-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Any is encountered, make the preceding token (or subtree)</span></span>
<span id="cb30-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the child of the Any token</span></span>
<span id="cb30-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>) {</span>
<span id="cb30-33">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb30-34">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb30-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb30-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last)</span>
<span id="cb30-37">    )</span>
<span id="cb30-38">  }</span>
<span id="cb30-39"></span>
<span id="cb30-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Or is encountered, create a subtree with two children. The</span></span>
<span id="cb30-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first (or left) child is taken by moving it from the previous</span></span>
<span id="cb30-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># token/subtree in our list. The second child is tagged as "Missing"</span></span>
<span id="cb30-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and will be filled in later</span></span>
<span id="cb30-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>) {</span>
<span id="cb30-45">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb30-46">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb30-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb30-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb30-49">    )</span>
<span id="cb30-50">  }</span>
<span id="cb30-51"></span>
<span id="cb30-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-53">}</span>
<span id="cb30-54"></span>
<span id="cb30-55">has_children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb30-56">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb30-57">}</span>
<span id="cb30-58"></span>
<span id="cb30-59">compress_or_skip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree, location) {</span>
<span id="cb30-60">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_children</span>(tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])) {</span>
<span id="cb30-61">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children)</span>
<span id="cb30-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing"</span>) {</span>
<span id="cb30-63">      tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children[[n]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[location]]</span>
<span id="cb30-64">      tree[[location]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb30-65">    }</span>
<span id="cb30-66">  }</span>
<span id="cb30-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-68">}</span>
<span id="cb30-69"></span>
<span id="cb30-70">compress_tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree) {</span>
<span id="cb30-71">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb30-72">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-73">  }</span>
<span id="cb30-74"></span>
<span id="cb30-75">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compress branches of the top-level tree</span></span>
<span id="cb30-76">  loc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)</span>
<span id="cb30-77">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (loc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb30-78">    tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compress_or_skip</span>(tree, loc)</span>
<span id="cb30-79">    loc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> loc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb30-80">  }</span>
<span id="cb30-81"></span>
<span id="cb30-82">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursively compress branches of children subtrees</span></span>
<span id="cb30-83">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (loc <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)) {</span>
<span id="cb30-84">    tree[[loc]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compress_tree</span>(tree[[loc]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children)</span>
<span id="cb30-85">  }</span>
<span id="cb30-86"></span>
<span id="cb30-87">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-88">}</span>
<span id="cb30-89"></span>
<span id="cb30-90">parse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb30-91">  tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb30-92">  tokens <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(text)</span>
<span id="cb30-93">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(token <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tokens) {</span>
<span id="cb30-94">    tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_tree</span>(tree, token)</span>
<span id="cb30-95">  }</span>
<span id="cb30-96">  tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compress_tree</span>(tree)</span>
<span id="cb30-97">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(tree) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_list"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allows pretty printing</span></span>
<span id="cb30-98">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-99">}</span></code></pre></div>
</div>
</div>
<p>For expressions that don’t have an <code>Or</code> token, the output is the same as before:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: c
&lt;Token at 3&gt; Literal: a
&lt;Token at 5&gt; Any
     &lt;Token at 4&gt; Literal: a
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>However, what we see in this version is that the parse tree for expressions like <code>"(cat)|(dog)"</code> now places the right hand side of the either/or expression (i.e., the <code>(dog)</code> group) in the appropriate place:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(cat)|(dog)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 6&gt; Or
     &lt;Token at 1&gt; Group
          &lt;Token at 2&gt; Literal: c
          &lt;Token at 3&gt; Literal: a
          &lt;Token at 4&gt; Literal: t
     &lt;Token at 7&gt; Group
          &lt;Token at 8&gt; Literal: d
          &lt;Token at 9&gt; Literal: o
          &lt;Token at 10&gt; Literal: g</code></pre>
</div>
</div>
<p>No more of those “Missing” tokens. And because the <code>compress_tree()</code> function is recursively applied to the subtrees, it can also handle uglier expressions like <code>"ab|((cd*)|ef)|g"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab|((cd*)|ef)|g"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Literal: a
&lt;Token at 3&gt; Or
     &lt;Token at 2&gt; Literal: b
     &lt;Token at 14&gt; Or
          &lt;Token at 4&gt; Group
               &lt;Token at 10&gt; Or
                    &lt;Token at 5&gt; Group
                         &lt;Token at 6&gt; Literal: c
                         &lt;Token at 8&gt; Any
                              &lt;Token at 7&gt; Literal: d
                    &lt;Token at 11&gt; Literal: e
               &lt;Token at 12&gt; Literal: f
          &lt;Token at 15&gt; Literal: g</code></pre>
</div>
</div>
<p>Neat. I mean… the thing itself is ugly as sin, but the fact that an amateur like myself can spend a day or two working through the relevant chapters in the book and write code that can handle parse trees like these ones… yeah, that’s very neat indeed.</p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts?</h2>
<p>Back when I was an academic, as opposed to whatever the hell it is I am in my middle aged unemployment era, there was this whole tradition of writing “critical” book reviews that would ostensibly count as scholarly output. This led to this weird thing where you’d read a book and enjoy it, but you’d feel this obligation to write a Proper Academic Review, and like most things in academia that have Prestige Points associated with them, these reviews would be extremely thorough, mind-meltingly boring, and pointlessly cruel. Because that’s what academia is designed to encourage.</p>
<p>Yeah nah. I’m too old for that shit, and I gave up tenure a lifetime<sup>8</sup> ago.</p>
<p>Having read most of the book at a superficial level and done a deep dive into the parts that I felt like diving into, I have to say I rather like <em>Software Design by Example</em>. It’s not written the way I would write a book: anyone who knows me understands that I will never choose to write a 200 page book when I could write a 600 page book instead. Greg Wilson doesn’t write like me: the book is brief, it covers a lot of topics concisely, and yet still manages to convey a lot of the “folk knowledge” and other cultural bits and pieces that actually matter in the wild. Honestly that’s an awfully impressive achievement. I quite enjoyed it.</p>
<p>Totally worth the time I spent reading it. Would recommend to others.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Something that you’d think I’d have been taught back when I was an academic and had to do it for a living. Universities, however, are utterly useless at this kind of thing. They tend to throw professors in the deep end with this expectation that someone who has made a career as a good researcher will automatically work out how to be a good teacher. Suffice it to say, this widespread practice has not been the best thing for higher education.↩︎</p></li>
<li id="fn2"><p>As an aside, this is hardly unique to the tech world. Academia is just as bad. Probably worse, actually.↩︎</p></li>
<li id="fn3"><p>Example: Greg’s code relies heavily on JavaScript <code>.push()</code> and <code>.pop()</code> methods that make it very easy to treat an array as a <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">stack</a>. I’m going to work with R lists that don’t have these little niceties. It’s going to make some of my code later a little ugly, I’m afraid. Oh well.↩︎</p></li>
<li id="fn4"><p>This is not the place for me to talk about my love/hate relationship with the <a href="http://adv-r.had.co.nz/S3.html">S3 object-oriented programming system</a> in R. Suffice it to say, I have <em>feelings</em>. That’s enough for now.↩︎</p></li>
<li id="fn5"><p>Okay, I’ll be honest, I did have a set of informal tests that I wrote to accompany my code, even for this blog post: I was too lazy to bother writing a proper test suite, but the initial drafts of this blog post had a bunch of regular expressions that would be tokenized/parsed every time I rendered the draft, which let me check that the code I was writing was not “total batshit”. I do have <em>some</em> standards, at least when it comes to code. The same cannot be said of my <a href="https://youtu.be/5QML71sBu1E">taste in men</a>, but that’s a different story…↩︎</p></li>
<li id="fn6"><p>Yeah no that will never happen. If you’re waiting for me to attempt something like what Greg has done, then – to quote Paul Kelly and Kev Carmody – <a href="https://youtu.be/dAONlfoNVuY">you don’t stand the chance of a cinder in snow</a>. I know my limits.↩︎</p></li>
<li id="fn7"><p>This is analogous to the <code>handle()</code> JavaScript function that appears in the book. What can I say? I’m a perverse woman who likes to use her own names for things.↩︎</p></li>
<li id="fn8"><p>Two years, but that’s a lifetime in tranny-years. We age fast, you know.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Software Design by Example},
  date = {2023-05-31},
  url = {https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Software Design by Example.”</span> May
31, 2023. <a href="https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example">https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example</a>.
</div></div></section></div> ]]></description>
  <category>Software Design</category>
  <category>Javascript</category>
  <category>R</category>
  <category>Regular Expressions</category>
  <guid>https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example/index.html</guid>
  <pubDate>Tue, 30 May 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Santoku</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-05-22_santoku/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Once upon a time in a blog that has vanished into the mists of the internet past, I used to have a habit of writing short posts talking about R packages I liked. The idea behind that habit was to spend a bit of time diving a little deeper into tool than I otherwise might have done. The intent wasn’t to write tutorials or anything quite that ambitious, it was simply to spend a bit of time with the package and commit my thoughts about it to paper, metaphorically speaking. It was quite a lot of fun.</p>
<p>Today I find myself having a few hours of free time on my hands, and thought I might revive the habit. I’ll pick one R package, play with it for a bit, and then write about it for no reason except for the joy I get in doing so.</p>
<p>With that in mind today’s post is about the <a href="https://hughjonesd.github.io/santoku/">santoku</a> package authored by <a href="https://www.davidhughjones.co.uk/">David Hugh-Jones</a>. Why santoku,<sup>1</sup> I hear you ask? Honestly, no particular reason except that I like it. That, and the fact that it has a cool hex sticker:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-05-22_santoku/logo.png" class="img-fluid figure-img" alt="Hex sticker image for the santoku R package"></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(santoku)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span></code></pre></div>
</div>
<p><br></p>
<div class="column-body-outset">
<p><img src="https://blog.djnavarro.net/posts/2023-05-22_santoku/webvilla-hv1MrBzGGNY-unsplash.jpg" class="img-fluid" alt="Photo of chopped onion and other vegetables"></p>
</div>
<section id="what-problem-does-santoku-solve" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-problem-does-santoku-solve">What problem does santoku solve?</h2>
<p>In my academic days as a computational social scientist, I’d very often find myself needing to bin continuous data into discrete (and usually ordered) categories. It was one of those little data wrangling tasks that popped up a lot. When working with survey data, for instance, I might need to take raw test scores on some psychometric scale and carve them up into easily interpreted groups. The original data would be quantitative in nature but the raw numbers often didn’t mean much: it was often convenient to bin the respondents into “high”, “medium”, and “low” scores on… whatever it was about. Sometimes I’d have external guidance on what constitutes “high” and what constitutes “low”. For example, clinical measurement tools generally have some rough guidelines about what scores on a questionnaire roughly match up to “mild depression” versus “severe depression”. But sometimes there would be no external guidelines to rely on so I’d just have to make choices based on the data themselves.</p>
<p>Making these choices in real world data analysis can sometimes be fraught, particularly when someone later wants to use those categories as input to some subsequent analysis.<sup>2</sup> Because it’s a decision that needs to be made with care, you really do want to have versatile tools that make the process painless and even – dare I say it – fun.</p>
<p>So, how do you do this in R? The way I have traditionally done this is to use the <code>cut()</code> function. For example, if I wanted to take some numbers that vary from 1 to 100 and bin them into intervals of size 25, I would do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb2-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group   
   &lt;dbl&gt; &lt;fct&gt;   
 1 27.3  (25,50] 
 2 37.8  (25,50] 
 3 57.7  (50,75] 
 4 90.9  (75,100]
 5 21.0  (0,25]  
 6 89.9  (75,100]
 7 94.5  (75,100]
 8 66.4  (50,75] 
 9 63.3  (50,75] 
10  7.12 (0,25]  </code></pre>
</div>
</div>
<p>There’s nothing wrong with this workflow at all. The <code>cut()</code> function does the job it was designed for, and a little bit of extra work allows me to assign labels:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(</span>
<span id="cb4-4">    value,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grp 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grp 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grp 3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grp 4"</span>)</span>
<span id="cb4-7">  )</span>
<span id="cb4-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group
   &lt;dbl&gt; &lt;fct&gt;
 1  21.4 grp 1
 2  18.5 grp 1
 3  69.0 grp 3
 4  39.0 grp 2
 5  77.2 grp 4
 6  50.3 grp 3
 7  72.0 grp 3
 8  99.2 grp 4
 9  38.6 grp 2
10  78.0 grp 4</code></pre>
</div>
</div>
<p>I could extend this workflow and use the <code>quantile()</code> function to carve the data set up into two groups of roughly equal size:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(</span>
<span id="cb6-4">    value,</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-6">  ))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group      
   &lt;dbl&gt; &lt;fct&gt;      
 1 93.5  (36.8,93.5]
 2 22.0  (2.33,36.8]
 3 65.5  (36.8,93.5]
 4 13.4  (2.33,36.8]
 5 27.5  (2.33,36.8]
 6 39.2  (36.8,93.5]
 7  2.33 &lt;NA&gt;       
 8 38.9  (36.8,93.5]
 9 87.1  (36.8,93.5]
10 34.7  (2.33,36.8]</code></pre>
</div>
</div>
<p>Okay that doesn’t <em>quite</em> work, because the smallest value in the data doesn’t get included: the zeroth quantile of the empirical data is always equal to the smallest value in the data, and by default the intervals constructed by <code>cut()</code> are left-open, right-closed. Fortunately, the <code>cut()</code> function has an <code>include.lowest</code> argument that I can use to fix this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(</span>
<span id="cb8-4">    value,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include.lowest =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-7">  ))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group      
   &lt;dbl&gt; &lt;fct&gt;      
 1  48.7 [11.7,55.1]
 2  60.4 (55.1,82.9]
 3  49.9 [11.7,55.1]
 4  19.4 [11.7,55.1]
 5  82.9 (55.1,82.9]
 6  67.2 (55.1,82.9]
 7  79.6 (55.1,82.9]
 8  11.7 [11.7,55.1]
 9  72.6 (55.1,82.9]
10  41.7 [11.7,55.1]</code></pre>
</div>
</div>
<p>The automated labels helpfully make clear that the lowest interval is closed on both sides. It isn’t always pretty, but it works.</p>
<p>Given that the base R tools work, it’s not obvious from afar why there would be any need or desire to have a specialised R package that provides a replacement for <code>cut()</code>. To that I would answer thusly: if discretising a continuous variable is something you do rarely, you probably don’t need a specialised package. The tools in base R are perfectly functional, and the “pain points” aren’t hard to work around: the <code>include.lowest</code> issue I mentioned above is a good example. On the other hand, if this is a data wrangling task you have to perform a lot – as I used to – these pain points start to become really annoying. Over and over I’d forget the workarounds, and I’d have to reinvent solutions and rewrite code that I’d written a dozen times before. When revisiting code that I’d written months before, I’d find myself wondering “why did I do it that way?” because I’d forgotten the specific edge case I was trying to work around.</p>
<p>Whenever you find yourself in that situation – where very small pain points in the standard tooling are adding up to a substantial annoyance because you happen to be one of those people who encounters them a lot – you might very well be in the market for a more specialised tool.</p>
<p>Enter, stage left, the santoku package…</p>
<p><br></p>
<div class="column-body-outset">
<p><img src="https://blog.djnavarro.net/posts/2023-05-22_santoku/jametlene-reskp-sb6UGjIYIpo-unsplash.jpg" class="img-fluid" alt="Photo of someone using a santoku knife"></p>
</div>
</section>
<section id="specialist-chop-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="specialist-chop-functions">Specialist chop functions</h2>
<p>Let’s start with the basics. As you might hope, the santoku package provides a drop-in replacement for <code>cut()</code>, called <code>chop()</code>. If I re-run my first example using the <code>chop()</code> function, I’d hope to get the same results and indeed – random sampling notwithstanding – I more or less do…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb10-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group    
   &lt;dbl&gt; &lt;fct&gt;    
 1 82.3  [75, 100]
 2 65.1  [50, 75) 
 3 78.5  [75, 100]
 4 55.8  [50, 75) 
 5 53.4  [50, 75) 
 6 79.1  [75, 100]
 7  3.31 [0, 25)  
 8 48.2  [25, 50) 
 9 73.5  [50, 75) 
10 69.6  [50, 75) </code></pre>
</div>
</div>
<p>Looking carefully at the output we can see some minor differences: the default behavior of <code>chop()</code> is to create intervals that are left-closed and right-open, whereas <code>cut()</code> is left-open and right-closed. Both functions have arguments that allow you to switch between these two forms, and to my mind there’s not a strong argument to prefer one default over the other.<sup>3</sup></p>
<p>However, let’s have a look at what happens when I try my second example with <code>chop()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop</span>(</span>
<span id="cb12-4">    value,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb12-6">  ))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group
   &lt;dbl&gt; &lt;fct&gt;
 1 48.3  50%  
 2 86.3  50%  
 3 44.4  50%  
 4 25.2  0%   
 5  8.00 0%   
 6 10.8  0%   
 7 32.3  0%   
 8 52.3  50%  
 9 66.5  50%  
10 41.3  0%   </code></pre>
</div>
</div>
<p>Ooh. Something nice has happened. Notice that there are no <code>NA</code> values: <code>chop()</code> has a <code>close_end</code> argument that is analogous to the <code>include.lowest</code> argument to <code>cut()</code>, but it defaults to <code>TRUE</code> rather than <code>FALSE</code>. Though mathematically inelegant,<sup>4</sup> the <code>chop()</code> default is nicely aligned with the needs of the analyst.</p>
<p>A second interesting thing to note is that if the user doesn’t explicitly specify labels, but the <code>breaks</code> argument is a named vector – like the ones produced by <code>quantile()</code> – the discretised variable will inherit those names. That’s usually a good thing, in my experience, though it’s a little clunky in this instance because the names produced by <code>quantile()</code> aren’t precisely the labels I’d like to have when chopping the data into two equally sized groups.</p>
<p>Actually… you know what? Chopping the data into <img src="https://latex.codecogs.com/png.latex?n"> equally sized groups is something that happens so bloody often in practice that it deserves to have a specialist function. Rather than tediously passing <img src="https://latex.codecogs.com/png.latex?n+1"> quantiles to the <code>quantile()</code> function and then passing the result to <code>cut()</code>, it would be nice to have a specialised function that handles this case. That’s the job of <code>chop_equally()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop_equally</span>(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   value group         
   &lt;dbl&gt; &lt;fct&gt;         
 1 91.4  [47.41, 91.37]
 2 30.1  [9.34, 47.41) 
 3 46.4  [9.34, 47.41) 
 4 33.9  [9.34, 47.41) 
 5 65.4  [47.41, 91.37]
 6 26.5  [9.34, 47.41) 
 7 48.4  [47.41, 91.37]
 8 76.9  [47.41, 91.37]
 9  9.34 [9.34, 47.41) 
10 87.7  [47.41, 91.37]</code></pre>
</div>
</div>
<p>Lovely. I mean, compare the pair…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base R</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(</span>
<span id="cb16-3">  value,</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb16-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include.lowest =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb16-6">)</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># santoku</span></span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop_equally</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groups =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>If you have to do the task on a daily basis, you <em>really</em> want to use the second version. It’s easy to write, easy to read, and it “just works”. True, if you’re a package developer or an R user who doesn’t have to discretise continuous data regularly, it might not be worth the effort of learning santoku. But for everyday data wrangling? As someone who has<sup>5</sup> to do this over and over again… yes please.</p>
<p>Fundamentally, this is the value of specialised tools. I honestly don’t think there’s anything wrong with the <code>cut()</code> function in base R. Most languages wouldn’t even supply something like <code>cut()</code> as part of the core language because most programmers don’t have a need for it, but R is not a typical language: it is a language for data analysts and it is designed to allow data analysts to – and I’m going to quote Hadley Wickham here – “get shit done”. The R core devs know that this matters in data analysis so there is a <code>cut()</code> function that sits at this sweet spot that is simple and convenient for a typical data analyst who has to very occasionally solve this problem. But if you’re doing it a lot… oh my the specialist functions provided by santoku really make a difference.</p>
<p><br></p>
<div class="column-body-outset">
<p><img src="https://blog.djnavarro.net/posts/2023-05-22_santoku/kirill-tonkikh-gxpY2_vHjJg-unsplash.jpg" class="img-fluid" alt="Photo of chopped lemon, chilli, and possibly spring onion"></p>
</div>
</section>
<section id="you-had-me-at-hello-but" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="you-had-me-at-hello-but">You had me at “hello” but…</h2>
<p>At this point, I have to be honest. I liked santoku when I first looked at the defaults for <code>chop()</code>, and I was already in love when I saw <code>chop_equally()</code>. Anything else beyond those two functions is icing on the cake that I was already salivating over. As it happens, however, santoku goes quite a long way past these things. There are so many gorgeous details in how it works that you just know that the author has suffered some version of the same fucking pain I have suffered when trying to discretise a variable that is “technically” continuous but kinda isn’t really.</p>
<p>Want an example? Of course you do.</p>
<p>One of the many weird topics that I spent far too much of my former life working on is human probability judgments. Like, in some experiment, the researcher would present participants with some scenario or proposition, and then actual human beings would be asked to provide a numeric rating corresponding to the probability that the scenario will actually happen, or that the proposition is actually true.</p>
<p>When you think about this as a mathematical or inferential question, it’s well posed. “What is the probability of rain tomorrow?” is a perfectly sensible question and the set of admissable answers corresponds to the unit interval: 0 means impossible, 1 means definite, and every number in between is a quantified measure of uncertainty. Literally this is the sort of question that the discipline of meteorology exists to answer. Meteorologists, in fact, are shockingly good at answering these questions.</p>
<p>The rest of us, however, are not so good.</p>
<p>One of the nastiest features of probability judgment data arises because the natural language semantics of chance don’t map cleanly onto the mathematics of probability. In everyday usage, people often use “fifty-fifty” as a non-literal expression to that rougly means “I have no fucking idea what will happen”. So when somebody responds with “50%” to a probability question, the interpretation of that answer is ambiguous. Sometimes it means what it says it means: “the event is exactly as likely to happen as not happen”. But at other times it means: “fucked if I know”. Those aren’t equivalent statements, not by a long shot. And what happens in practice when you analyse data from those kinds of studies is that your notionally-continuous variable has a massive spike at 0.5, because people are doing something with the question that isn’t quite in alignment with the formal logic of uncertainty. That is to say, there is a qualitative difference between 49% and 50%. “50%” is a special category.</p>
<p>Okay, so let’s create a silly vector that captures this intuition.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">sigh <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45634</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5842</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95234</span>)</span></code></pre></div>
</div>
<p>In real life, human participants don’t give responses to several decimal places, but you get the idea. There are three people who have responded with <code>.5</code> because that’s a special value, and there are four people who have given other answers.</p>
<p>How would I carve this into three categories using <code>cut()</code>? It’s clunky but doable. You create intervals that are a tiny bit above and a tiny bit below the special value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> sigh,</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49999</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb18-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
  value group            
  &lt;dbl&gt; &lt;fct&gt;            
1 0.123 (0,0.49999]      
2 0.456 (0,0.49999]      
3 0.5   (0.49999,0.50001]
4 0.5   (0.49999,0.50001]
5 0.5   (0.49999,0.50001]
6 0.584 (0.50001,1]      
7 0.952 (0.50001,1]      </code></pre>
</div>
</div>
<p>It works, but it’s kind of weird. It feels like a workaround because it is: <code>cut()</code> doesn’t allow you to specify a specific value as a category:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb20-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> sigh,</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-4">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in cut.default(value, breaks = c(0, 0.5, 0.5, 1)): 'breaks' are not unique</code></pre>
</div>
</div>
<p>Again, this is behaviour that makes sense mathematically if you are dealing with strictly continuous data: a set that has measure zero in the domain will necessarily include zero observations when presented with a finite sample from a continuous distribution specified over that domain. But… real life is not like that. You absolutely <em>can</em> observe data from distributions that are best modelled as a mixture of discrete point masses blended with an underlying continuous distribution,<sup>6</sup> and so you need data chopping tools that accommodate continuous ranges and discrete points at the same time.</p>
<p>Happily, <code>chop()</code> does precisely this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb22-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> sigh,</span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb22-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
  value group   
  &lt;dbl&gt; &lt;fct&gt;   
1 0.123 [0, 0.5)
2 0.456 [0, 0.5)
3 0.5   {0.5}   
4 0.5   {0.5}   
5 0.5   {0.5}   
6 0.584 (0.5, 1]
7 0.952 (0.5, 1]</code></pre>
</div>
</div>
<p>Notice how the labels for the intervals automatically adjust to accommodate this specification. The point mass interval in the middle is labelled in discrete set notation as <code>{0.5}</code>, and the continuous intervals that surround it are both open on that side, leading to <code>[0, 0.5)</code> as the label on the lower side and <code>(0.5, 1]</code> as the label on the upper side. It’s the exactly correct way to refer to these categories, and while <code>cut()</code> probably doesn’t need this level of nuance, it is <em>deeply</em> appreciated when you have to work with “fuck ugly”<sup>7</sup> data that arise when you run a behavioural experiment with probability judgments as an outcome variable.</p>
<p>You love to see it, honestly.</p>
<p><br></p>
<div class="column-body-outset">
<p><img src="https://blog.djnavarro.net/posts/2023-05-22_santoku/freestocks-xSGCbGYQtO4-unsplash.jpg" class="img-fluid" alt="Photo of chopped citrus fruit"></p>
</div>
</section>
<section id="want-more" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="want-more">Want more?</h2>
<p>When I started writing this post earlier this morning I promised myself I wouldn’t turn it into a whole <em>thing</em> the way I usually do. This is not meant to be a comprehensive treatment or a deep dive or whatever. Today is a day off for me and I’m having fun playing with a thing that I enjoy. So I shall resist the temptation to dive too much deeper. Nevertheless, I’ll add a few other remarks that give a sense of why I love the santoku package. First, it has convenience functions that allow you to automatically tabulate. Let’s say I have a bunch of dull, normally distributed observations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<p>As described above, I can chop them into 5 equally sized groups like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop_equally</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groups =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] [-1.805, -0.3243) [-1.805, -0.3243) [-0.3243, 0.3842)
  [4] [0.3842, 2.402]   [0.3842, 2.402]   [-0.3243, 0.3842)
  [7] [-0.3243, 0.3842) [0.3842, 2.402]   [0.3842, 2.402]  
 [10] [-1.805, -0.3243) [-1.805, -0.3243) [-0.3243, 0.3842)
 [13] [0.3842, 2.402]   [-0.3243, 0.3842) [0.3842, 2.402]  
 [16] [0.3842, 2.402]   [-1.805, -0.3243) [-0.3243, 0.3842)
 [19] [-1.805, -0.3243) [0.3842, 2.402]   [0.3842, 2.402]  
 [22] [-1.805, -0.3243) [-1.805, -0.3243) [0.3842, 2.402]  
 [25] [-0.3243, 0.3842) [0.3842, 2.402]   [-0.3243, 0.3842)
 [28] [0.3842, 2.402]   [-0.3243, 0.3842) [-1.805, -0.3243)
 [31] [-0.3243, 0.3842) [-1.805, -0.3243) [0.3842, 2.402]  
 [34] [-0.3243, 0.3842) [0.3842, 2.402]   [0.3842, 2.402]  
 [37] [-1.805, -0.3243) [0.3842, 2.402]   [-1.805, -0.3243)
 [40] [-1.805, -0.3243) [-0.3243, 0.3842) [-1.805, -0.3243)
 [43] [-0.3243, 0.3842) [-0.3243, 0.3842) [-1.805, -0.3243)
 [46] [-1.805, -0.3243) [-0.3243, 0.3842) [0.3842, 2.402]  
 [49] [-1.805, -0.3243) [0.3842, 2.402]   [-0.3243, 0.3842)
 [52] [0.3842, 2.402]   [-0.3243, 0.3842) [-0.3243, 0.3842)
 [55] [-0.3243, 0.3842) [-1.805, -0.3243) [0.3842, 2.402]  
 [58] [0.3842, 2.402]   [0.3842, 2.402]   [0.3842, 2.402]  
 [61] [0.3842, 2.402]   [-1.805, -0.3243) [-1.805, -0.3243)
 [64] [-1.805, -0.3243) [-1.805, -0.3243) [-1.805, -0.3243)
 [67] [-0.3243, 0.3842) [-1.805, -0.3243) [-0.3243, 0.3842)
 [70] [-1.805, -0.3243) [0.3842, 2.402]   [0.3842, 2.402]  
 [73] [0.3842, 2.402]   [0.3842, 2.402]   [0.3842, 2.402]  
 [76] [-1.805, -0.3243) [-1.805, -0.3243) [0.3842, 2.402]  
 [79] [-1.805, -0.3243) [-0.3243, 0.3842) [-1.805, -0.3243)
 [82] [-0.3243, 0.3842) [-0.3243, 0.3842) [0.3842, 2.402]  
 [85] [-0.3243, 0.3842) [-1.805, -0.3243) [0.3842, 2.402]  
 [88] [-0.3243, 0.3842) [-0.3243, 0.3842) [-0.3243, 0.3842)
 [91] [0.3842, 2.402]   [-0.3243, 0.3842) [-0.3243, 0.3842)
 [94] [-1.805, -0.3243) [-0.3243, 0.3842) [-0.3243, 0.3842)
 [97] [-1.805, -0.3243) [0.3842, 2.402]   [-1.805, -0.3243)
[100] [-0.3243, 0.3842)
Levels: [-1.805, -0.3243) [-0.3243, 0.3842) [0.3842, 2.402]</code></pre>
</div>
</div>
<p>But what if I want to tabulate them? That’s a <em>spectacularly</em> common task for discretised data, and in base R I have the <code>table()</code> function for this purpose, so I could turn this into a pipeline and write my code like this if I wanted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chop_equally</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groups =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
[-1.805, -0.3243) [-0.3243, 0.3842)   [0.3842, 2.402] 
               33                33                34 </code></pre>
</div>
</div>
<p>Except, because santoku has anticipated this as a need and provided me with a <code>tab_equally()</code> function that tabulates the data but otherwise mirrors <code>chop_equally()</code>, I don’t have to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_equally</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groups =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-1.805, -0.3243) [-0.3243, 0.3842)   [0.3842, 2.402] 
               33                33                34 </code></pre>
</div>
</div>
<p>Ah, lovely.</p>
<p>Better yet, there are quite a lot of specialised <code>chop_*()</code> functions that have corresponding <code>tab_*()</code> functions.</p>
<ul>
<li><code>chop_equally()</code> splits the data into equally frequent groups</li>
<li><code>chop_evenly()</code> splits the data into groups of equal width</li>
<li><code>chop_mean_sd()</code> splits the data into groups of equal numbers of standard deviations around the mean</li>
<li>… and so on.</li>
</ul>
<p>There’s several of these and they all have handy <code>tab_*()</code> analogs. So, on the off chance I’ve forgotten the horrible lessons drummed into me from first year stats, let’s have a look at what I can expect from 100K normally distributed observations…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab_mean_sd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sds =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-Inf sd, -3 sd)   [-3 sd, -2 sd)   [-2 sd, -1 sd)    [-1 sd, 0 sd) 
             134             2161            13666            33934 
    [0 sd, 1 sd)     [1 sd, 2 sd)     [2 sd, 3 sd)   [3 sd, Inf sd] 
           34292            13487             2196              130 </code></pre>
</div>
</div>
<p>Suffice it to say, if you’ve ever been forced to memorise the “X% of data falls within Y standard deviations of the mean” dogma that surrounds the tyranny of the normal,<sup>8</sup> these numbers will be painfully unsurprising.</p>
<p>More generally though, it can be super helpful when doing exploratory data analysis to rely on these <code>tab_*()</code> functions. For example, the basic <code>chop()</code> function has a <code>tab()</code> analog, and if I return to my annoying <code>sigh</code> vector, I can use <code>tab()</code> to quickly check if there was actually a good reason for me to treat 50% as a “special” value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab</span>(sigh, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 0.5)    {0.5} (0.5, 1] 
       2        3        2 </code></pre>
</div>
</div>
<p>Yeah, there really was.</p>
<p>But wait! There’s more!<sup>9</sup> The santoku package also comes with some handy labeller functions that make it easy to construct sensible labels for your categories. For instance, <code>lbl_glue()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tab</span>(sigh, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lbl_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from {l} to {r}"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  from 0 to 0.5 from 0.5 to 0.5   from 0.5 to 1 
              2               3               2 </code></pre>
</div>
</div>
<p>Ooh pretty.</p>
<p><br></p>
<div class="column-body-outset">
<p><img src="https://blog.djnavarro.net/posts/2023-05-22_santoku/henry-be-WrR5lhKBmHc-unsplash.jpg" class="img-fluid" alt="Photo of a cake with a slice taken out"></p>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Aaaanyway, I promised myself I wasn’t going to go overboard in this post. I was going to throw it together quickly and then shove it out even if it wasn’t perfect. Life is like that. Really the take home message in all this is that santoku is a really nice, specialised package. You don’t need it until you need it, but when you do… you know.</p>
<p>I’ll leave you to explore the whole thing should you feel the need. The point here is really that the santoku package really does capture all the little bits and pieces that you might need when addressing the “discretising a continuous variable” problem. In any specific data pipeline you probably wouldn’t expect to call it more than once or twice in the final version, but it’s extremely helpful in getting you to that final version, and you might find you end up using it a lot when the same damn problems show up over and over.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The package takes its name from the <a href="https://en.wikipedia.org/wiki/Santoku">santoku bōchō</a>, a Japanese kitchen knife. The name, I’m told, translates to “three virtues”, indicating that the knife is used for cutting, slicing, and chopping.↩︎</p></li>
<li id="fn2"><p>Indeed there is a whole mini-literature about if and when it is safe to discretise a continuous variable in the context of statistical inference. I’m not going to talk about it in this post, but suffice it to say that if you’re a psychologist thinking of forwarding me “that paper” by Kris Preacher and others, trust me I’m fully aware of it. Kris and I go way back.↩︎</p></li>
<li id="fn3"><p>I have a mild personal preference for the <code>chop()</code> default, because I tend to think that break points specify lower bounds rather than upper bounds, but that’s probably a me thing.↩︎</p></li>
<li id="fn4"><p>The <code>cut()</code> default is to always use half-closed intervals, which makes sense as a mathematical operation, but it’s irritating from a practical data analysis perspective because we almost never want to exclude one extremum of the data solely because the technical definition of an empirical quantile leads to the exclusion of one end point.↩︎</p></li>
<li id="fn5"><p>Okay I should probably use past tense here: I don’t have this problem so much these days, being unemployed and all.↩︎</p></li>
<li id="fn6"><p>Statistics has had formal tools for dealing with this for a long time. I imagine it existed earlier, but for me at least the oldest tool I’ve used comes from Ferguson 1973 paper introducing the Dirichlet process. If your observations are sampled from a DP with an absolutely continuous base distribution, the posterior will be a DP whose base distribution is mixture of the continuous base distribution and the discrete base distribution. Life has continuous and discrete parts, so of course we see this in our data.↩︎</p></li>
<li id="fn7"><p>That’s a technical term.↩︎</p></li>
<li id="fn8"><p>I’m so annoyed that there isn’t an obvious wikipedia page I can link to here. The central limit theorem is lovely, honest. I fucking love it. But, alas, not all measurable things in this world are <a href="https://en.wikipedia.org/wiki/U-statistic">U-statistics</a>, and sometimes you can’t fucking rely on the CLT as a justification for your laziness. Extreme value distributions and other more fucked-up things have an obnoxious tendency to appear in the wild and you bloody well have to deal with it.↩︎</p></li>
<li id="fn9"><p>Okay, I’m sort of assuming that you know the old trope of late night hour-long paid advertisement tv shows that would inevitably end with the announcer saying “but wait there’s more” and throwing in a set of steak knives for free, which I totally want when I’m buying a vacuum cleaner. It occurs to me that my children have literally never seen one of these obnoxious things, and would have no idea what I’m alluding to in this, a post about chopping things with santoku.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Santoku},
  date = {2023-05-22},
  url = {https://blog.djnavarro.net/posts/2023-05-22_santoku},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Santoku.”</span> May 22, 2023. <a href="https://blog.djnavarro.net/posts/2023-05-22_santoku">https://blog.djnavarro.net/posts/2023-05-22_santoku</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2023-05-22_santoku/index.html</guid>
  <pubDate>Sun, 21 May 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-05-22_santoku/logo2.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Pharmacokinetic ODE models in Stan</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>For someone who has spent most of her professional life as a Bayesian statistician, it’s strange to admit that I’m only moderately experienced with <a href="https://mc-stan.org/">Stan</a>. My early work in Bayesian modelling involved some Laplace approximations to Bayes factors, MCMC samplers for posterior sampling, and in a few cases I would even resort to using BIC. I hand-coded everything myself, which was super helpful for understanding the mechanics underpinning the statistical inference, but terribly inefficient. When I did start using a domain-specific language for my probabilistic inference I mostly used <a href="https://mcmc-jags.sourceforge.io/">JAGS</a>.<sup>1</sup></p>
<p>Eventually I started hearing the whispers…</p>
<p>“Have you heard the good news about <a href="https://arxiv.org/pdf/1111.4246.pdf">Hamiltonian Monte Carlo</a>?” the Stan believers would ask me.</p>
<p>With some regret I would have to reply that I was saddled with numerous <a href="https://mc-stan.org/docs/2_32/stan-users-guide/latent-discrete.html">latent discrete parameters</a> for theoretical reasons,<sup>2</sup> and because the Stan stans are in fact lovely humans they would all express their sympathies, offer their thoughts and prayers, and think to themselves “there but for the grace of God go I”.</p>
<p>Long story short, it’s taken me a long time to be in a position to make the most of Stan. I’ve used it and enjoyed it but not really had the opportunity to dive in properly. In recent weeks, however, I’ve been talking with some lovely folks who work in pharmacometrics, and they have problems that are very well suited to this kind of modelling. Excellent… a pretext!</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_06_1533.jpg" class="img-fluid figure-img" alt="swirling blue grainy patterns in semi-circular shapes on the bottom half, with a more bursty look in the top-left"></p>
<figcaption class="figure-caption margin-caption">The generative art in this post is tenuously tied to the topic. The pieces are generated from a dynamical system, and the models implement dynamical systems too.</figcaption>
</figure>
</div>
<p><br></p>
<section id="setting-up" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="setting-up">Setting up</h2>
<p>The first thing I have to do is go through the installation process. Yes, I have used Stan before, but that was a few laptops ago and things have changed a little since then. One happy little development from my perspective is that R users now have multiple options for interacting with Stan. The last time I used Stan the accepted method was to use the RStan package,<sup>3</sup> and… there’s absolutely nothing wrong with RStan. It’s a great package. Really. It’s just… there’s a lot going on there, you know? Lots of bells and whistles. It’s powerful. It makes my head hurt.</p>
<p>Also, I can’t get the bloody thing to install on my Ubuntu box. I have no idea why.</p>
<p>Fortunately, nowadays there is also <a href="https://mc-stan.org/cmdstanr/">CmdStanR</a>, a lightweight interface to Stan. It suits my style of thinking nicely because it provides <a href="https://r6.r-lib.org/">R6</a> classes with methods that interact more or less directly with Stan. It does mean that you have to work harder to finesse the outputs, but I honestly don’t mind doing that kind of thing. As is usually the case with the Stan folks, the documentation is really nice so I won’t bother talking about the installation process. Suffice to say I’ve got the package working, so now I’ll load it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cmdstanr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This is cmdstanr version 0.5.3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>- CmdStan path: /home/danielle/.cmdstan/cmdstan-2.32.1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>- CmdStan version: 2.32.1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.</code></pre>
</div>
</div>
<p>The only finicky thing to talk about here lies in the fact that I’m doing all this in the context of a quarto blog post, and specifically a post that is using the knitr engine to execute the code chunks. By default, if knitr encounters a code chunk tagged as the <code>stan</code> language it will look for the RStan package to do the work.<sup>4</sup> That’s not going to work for me since I don’t actually have RStan installed on my machine. Thankfully the cmdstanr package makes this easy for me to fix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register_knitr_engine</span>()</span></code></pre></div>
</div>
<p>Now that this is done, quarto/knitr will use cmdstanr to handle all the stan code included in this post.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_06_1510.jpg" class="img-fluid figure-img" alt="swirling white grainy patterns in a three-quarter circular arc, against a pink background"></p>
<figcaption class="figure-caption margin-caption">I’m amazed at how luminescent the white appears in this piece.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="the-context-pharmacokinetic-modelling" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-context-pharmacokinetic-modelling">The context: pharmacokinetic modelling</h2>
<p>Next, I need a toy problem to work with. In my <a href="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/">last post</a> I’d started teaching myself some pharmacokinetic modelling – statistical analysis of drug concentrations over time – and I’ll continue that line of thinking here. In that post I wrote about <strong>noncompartmental analysis</strong> (NCA), a method for analysing pharmacokinetic data without making strong assumptions about the dynamics underpinning the biological processes of drug absorption and elimination, or the statistical properties of the measurement. NCA has its uses, but often it helps to have a model with a little structure to it.</p>
<p>In <strong>compartmental modelling</strong>, the analyst adopts a simplified model of (the relevant aspects of) the body as comprised of a number of distinct “compartments” that the drug can flow between. A two-compartment model might suppose that in addition to a “central” compartment that comprises systemic circulation, there is also a “peripheral” compartment where drug concentrations accrue in other bodily tissues. The model would thus include some assumptions about the dynamics that describe how the drug is absorbed (from whatever delivery mechanism is used) into (probably) the central compartment, and how it is eliminated from (probably) the central compartment. It would also need dynamics to describe how the drug moves from the central to peripheral compartment, and vice versa. These assumptions form the structural component of the compartmental model.</p>
<p>In addition to all this, a compartmental model needs to make statistical assumptions. The structure of the model describes how drug concentrations change over time, but in addition to that we might need a model that describes measurement error, variation among individuals, and covariates that affect the processes.</p>
<p>In other words, it’s really cool.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_07_1612.jpg" class="img-fluid figure-img" alt="swirling grainy textures in a roughly hexagonal shape, rendered in pink, purple and white, against a  purple background, with noisy speckling escaping the hexagonal region on the left hand side."></p>
<figcaption class="figure-caption margin-caption">This totally works as a special effect in some epic fantasy graphic novel or something.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="a-very-simple-one-compartment-model" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-very-simple-one-compartment-model">A very simple one-compartment model</h2>
<p>Okay let’s start super simple. We’ll have a one-compartment model, and we’ll assume bolus intravenous administration.<sup>5</sup> That’s convenient because we don’t have to have a model for the absorption process: at time zero the entire dose goes straight into systemic circulation. Assuming we know both the dose <img src="https://latex.codecogs.com/png.latex?D"> in milligrams and the volume of distribution<sup>6</sup> <img src="https://latex.codecogs.com/png.latex?V_d">, then the drug concentration in the first (and only) compartment <img src="https://latex.codecogs.com/png.latex?C(t)"> at time <img src="https://latex.codecogs.com/png.latex?t=0"> is given by <img src="https://latex.codecogs.com/png.latex?C(0)%20=%20D/V_d">. That’s the only thing we need to consider on the absorption (or “influx”) side.</p>
<p>On the elimination (or “efflux”) side, there are a number of possible dynamical models we could consider. One of the simplest models assumes that the body is able to “clear” a fixed volume of blood of the drug per unit time. If this clearance rate is constant, some constant proportion <img src="https://latex.codecogs.com/png.latex?k"> of the current drug concentration will be eliminated during each such time interval. Expressed as a differential equation this gives us:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BdC(t)%7D%7Bdt%7D%20=%20-%20k%5C%20C(t)%0A"> Unlike many differential equations, this one is easy to solve<sup>7</sup> and yields an exponential concentration-time curve:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC(t)%20=%20C(0)%20%5C%20e%5E%7B-kt%7D%0A"></p>
<p>That completes the structural side to our model. Now the statistical side. Again, we’ll keep it simple: I’m going to assume independent and identically normally distributed errors, no matter how unlikely that is in real life. Reflecting the fact that from a statistics point of view we’re now talking about a discrete set of time points and discrete set of measured drug concentrations, I’ll refer to the <img src="https://latex.codecogs.com/png.latex?n"> time points as <img src="https://latex.codecogs.com/png.latex?t_1,%20t_2,%20%5Cldots,%20t_n"> and the corresponding observed concentrations as <img src="https://latex.codecogs.com/png.latex?c_1,%20c_2,%20%5Cldots,%20c_n">. In this notation our statistical model is expressed:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_i%20=%20c_0%20%5C%20e%5E%7B-kt_i%7D%20+%20%5Cepsilon_i%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cepsilon_i%20%5Csim%20%5Cmbox%7BNormal%7D(0,%20%5Csigma)%0A"></p>
<p>Our model therefore has two unknowns, the scale parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and the elimination rate parameter <img src="https://latex.codecogs.com/png.latex?k">. Since we are being Bayesians for the purposes of this post I’ll place some priors over these parameters. However, since we are also being <em>lazy</em> Bayesians for the purposes of this post I’m not even going to pretend I’ve thought much about these priors. I’ve made them up because my actual goal here is to familiarise myself with the mechanics of pharmacokinetic modelling in Stan. The real world practicalities – critically important though they are – can wait!</p>
<p>Anyway, here’s the priors I used:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Csigma%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BHalf-Normal%7D_+(0,%201)%20%5C%5C%0Ak%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BHalf-Normal%7D_+(0,%205)%0A%5Cend%7Barray%7D%0A"></p>
<p>Again, I cannot stress this enough: I literally did not think <em>at all</em> about these choices. Never ever adopt such an appalling practice in real life, boys and girls and enby kids!</p>
<p>It’s almost time to move onto the implementation but first… I kind of lied. There’s a third unknown. The initial concentration <img src="https://latex.codecogs.com/png.latex?c_0"> is technically an unknown as well. True, we usually know the dosage to a high degree of precision (if I administer 50μg of a drug, there’s not much error there…), but the volume of the volume of systemic distribution is likely an estimate based on the assumption that <a href="https://en.wikipedia.org/wiki/Blood_volume">blood volume</a> is about 7-8% of body mass. I might guess that this value is about 5.5l but it might be a little more or a little less than that. Allowing the model to have a prior over the true value of <img src="https://latex.codecogs.com/png.latex?v_d"> makes some intuitive sense and also has the nice consequence of allowing the model to infer the value of <img src="https://latex.codecogs.com/png.latex?c_0"> from the data. In practice we’re not likely to be far wrong in guessing this quantity, so I’ve used the following prior:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Av_d%20%5Csim%20%5Cmbox%7BNormal%7D(5.5,%201)%0A"></p>
<p>where 5.5l is my prior estimate.</p>
<section id="implementation-in-stan" class="level3">
<h3 class="anchored" data-anchor-id="implementation-in-stan">Implementation in Stan</h3>
<p>Moving along, let’s have a look at how this model would be implemented in Stan. The code for the model is shown below, and – in case you’re not familiar with Stan code – I’ll quickly outline the structure. Stan is a declarative language, not an imperative one: you specify the model, it takes care of the inference. Your code is an abstract description of the model, not a sequence of instructions. In my code below, you can see it’s organised into three blocks:</p>
<ul>
<li>The <strong>data</strong> block defines quantities that the user needs to supply. Some of those correspond to empirical data like concentrations, others are design variables for the study like measurement times.</li>
<li>The <strong>parameters</strong> block defines quantities over which inference must be performed. In this case that’s <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</li>
<li>The <strong>model</strong> block specifies the model itself, which in this case includes both the structural and statistical components to our model, and does not distinguish between “likelihood” and “prior”. From the Stan point of view Bayesian inference it’s not really about “priors and likelihood” it’s more of a Doctor Who style “modelly-wobbelly joint probability distribution” kind of thing.</li>
</ul>
<p>Anyway here it is:</p>
<div class="cell" data-output.var="bolus">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bolus</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb8-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_obs;</span>
<span id="cb8-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; dose;</span>
<span id="cb8-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; vol_d;</span>
<span id="cb8-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_obs] t_obs;</span>
<span id="cb8-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_obs] c_obs;</span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb8-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; sigma;</span>
<span id="cb8-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; k;</span>
<span id="cb8-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">upper</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>&gt; vol_d_true;</span>
<span id="cb8-13">}</span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb8-16">  k ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ];</span>
<span id="cb8-17">  sigma ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ];</span>
<span id="cb8-18">  vol_d_true ~ normal(vol_d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb8-19">  c_obs ~ normal(dose / vol_d_true * exp(-k * t_obs), sigma);</span>
<span id="cb8-20">}</span></code></pre></div>
</div>
</div>
<p>Some additional things to note:</p>
<ul>
<li>Stan is strongly typed with (for example) <code>int</code> and <code>real</code> scalar types, and <code>vector</code> types containing multiple reals.</li>
<li>Variable declarations allow you to specify lower and upper allowable values for variables. It is always good to include those if you know them.</li>
<li>There’s some fanciness going on under the hood in how Stan “thinks about” probability distributions in terms of log-probability functions, but I’m glossing over that because Now Is Not The Time.</li>
<li>I’ve set my lower bounds on the parameters to “something very close to zero” rather than actually zero because (a) those values are wildly implausible anyway, but (b) if the sampler tries to get too close to zero the log probability goes batshit and numerical chaos ensues.</li>
</ul>
<p>Perhaps more important from the perspective of this post, here’s the important bit of quarto syntax I used when defining the code chunk above. When I defined the code chunk I specified the <code>output.var</code> option by including the following line in the yaml header to the chunk:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| output.var: "bolus"</span></span></code></pre></div>
<p>By specifying <code>output.var: "bolus"</code> I’ve ensured that when the quarto document is rendered there is a model object called <code>bolus</code> available in the R session. It’s essentially equivalent to having the code above saved to a file called <code>bolus.stan</code> and then calling the cmdstanr function <code>cmdstan_model()</code> to compile it to C++ with the assistance of Stan:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">bolus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bolus.stan"</span>)</span></code></pre></div>
<p>For future Stan models I’ll just print the name of the output variable at the top of the code chunk so that you can tell which R variable corresponds to which Stan model.</p>
<p>In any case let’s take a look at our <code>bolus</code> object. Printing the object yields sensible, if not exciting, output: it shows you the source code for the underlying model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">bolus</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>data {
  int&lt;lower=1&gt; n_obs;
  real&lt;lower=0&gt; dose;
  real&lt;lower=0&gt; vol_d;
  vector[n_obs] t_obs;
  vector&lt;lower=0&gt;[n_obs] c_obs;
}

parameters {
  real&lt;lower=0.01&gt; sigma;
  real&lt;lower=0.01&gt; k;
  real&lt;lower=1, upper=12&gt; vol_d_true;
}

model {
  k ~ normal(0, 5) T[0.01, ];
  sigma ~ normal(0, 1) T[0.01, ];
  vol_d_true ~ normal(vol_d, 1);
  c_obs ~ normal(dose / vol_d_true * exp(-k * t_obs), sigma);
}</code></pre>
</div>
</div>
<p>Perhaps more helpfully for our purposes, it’s useful to know that this is an object of class <a href="https://mc-stan.org/cmdstanr/reference/CmdStanModel.html"><code>CmdStanModel</code></a>, and if you take a look at the documentation on the linked page, you’ll find a description of the methods available for such objects. There are quite a few possibilities, but a few of particular interest from a statistical perspective are:<sup>8</sup></p>
<ul>
<li><a href="https://mc-stan.org/cmdstanr/reference/model-method-sample.html"><code>$sample()</code></a> calls the posterior sampling method implemented by Stan on the model</li>
<li><a href="https://mc-stan.org/cmdstanr/reference/model-method-variational.html"><code>$variational()</code></a> calls the variational Bayes algorithms implemented by Stan on the model</li>
<li><a href="https://mc-stan.org/cmdstanr/reference/model-method-optimize.html"><code>$optimize()</code></a> estimates the posterior mode</li>
</ul>
<p>For the purposes of this post I’ll use the <code>$sample()</code> method, and in order to call it on my <code>bolus</code> object I’ll need to specify some data to pass from R to the compiled Stan model. These are passed as a list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">bolus_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dose =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol_d =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>,</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_obs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>),</span>
<span id="cb13-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb13-7">)</span></code></pre></div>
</div>
<p>To quickly visualise these “observed data”, I’ll organise the relevant variables into a data frame and draw a pretty little scatterplot with ggplot2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb14-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_obs,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conc =</span> bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs</span>
<span id="cb14-5">)</span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, conc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-bolus-data-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Delightful, truly. So neat. So clean. So obviously, obviously fictitious.</p>
<p>As a Bayesian<sup>9</sup> that has observed the data, what I want to compute is the joint posterior distribution over my parameters <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">. Or, since this has been an unrealistic expectation ever since the death of the <a href="https://en.wikipedia.org/wiki/Conjugate_prior">cult of conjugacy</a>,<sup>10</sup> what I’ll settle for are samples from that joint posterior that I can use to numerically estimate whatever it is that I’m interested in. To do this for our <code>bolus</code> model with the help of cmdstanr, we call <code>bolus$sample()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">bolus_fitted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bolus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb15-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bolus_data, </span>
<span id="cb15-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">451</span>, </span>
<span id="cb15-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb15-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb15-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 sequential chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.0 seconds.
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 finished in 0.0 seconds.
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 0.0 seconds.
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 0.0 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.0 seconds.
Total execution time: 0.6 seconds.</code></pre>
</div>
</div>
<p>This is an object of class <a href="https://mc-stan.org/cmdstanr/reference/CmdStanMCMC.html">CmdStanMCMC</a> and again you can look at the linked page to see what methods are defined for it. I’ll keep things simple for now and call the <a href="https://mc-stan.org/cmdstanr/reference/fit-method-summary.html"><code>$summary()</code></a> method, which returns a tibble containing summary statistics associated with the MCMC chains:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">bolus_fitted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 10
  variable    mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail
  &lt;chr&gt;      &lt;num&gt;  &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;    &lt;num&gt;    &lt;num&gt;
1 lp__       3.25   3.61  1.49  1.30  0.346  4.94  1.00    1244.    1507.
2 sigma      0.556  0.499 0.240 0.185 0.289  1.02  1.00    1453.    1870.
3 k          2.09   2.04  0.371 0.277 1.60   2.71  1.00    1709.    1712.
4 vol_d_true 5.04   5.01  0.414 0.369 4.42   5.76  1.00    1795.    1994.</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>Evidently the estimated posterior mean for the elimination rate <img src="https://latex.codecogs.com/png.latex?k"> is 2.09, with a 90% <a href="https://en.wikipedia.org/wiki/Credible_interval">credible interval</a><sup>11</sup> <sup>12</sup> of [1.6, 2.71]. Similarly, the standard deviation of the measurement error <img src="https://latex.codecogs.com/png.latex?%5Csigma"> is estimated to have mean 0.56 and 90% interval [0.29, 1.02].</p>
<p>If we wanted to we could take this a little further by pulling out the posterior samples themselves using the <a href="https://mc-stan.org/cmdstanr/reference/fit-method-draws.html"><code>$draws()</code></a> method. Internally this method relies on the <a href="https://mc-stan.org/posterior/">posterior</a> package, and supports any of the output formats allowed by that package. In this case I’ll have it return a tibble because I like tibbles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">bolus_samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bolus_fitted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draws_df"</span>)</span>
<span id="cb19-2">bolus_samples</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A draws_df: 1000 iterations, 4 chains, and 4 variables
    lp__ sigma   k vol_d_true
1  1.893  0.74 2.8        4.3
2  2.083  0.81 2.7        4.5
3  2.517  0.67 2.7        4.5
4  2.543  0.69 2.7        4.4
5  3.122  0.62 2.5        4.5
6  2.434  0.52 2.8        4.6
7  0.073  1.27 2.8        4.5
8  1.257  0.36 1.6        5.8
9  1.392  0.35 1.7        5.8
10 3.846  0.37 1.8        5.4
# ... with 3990 more draws
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}</code></pre>
</div>
</div>
<p>You could then go on to do whatever you like with these samples but I have other fish to fry so I’m going to move on.</p>
</section>
<section id="generated-quantities" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="generated-quantities">Generated quantities</h3>
<p>The model I built in the previous section is perfectly fine, as far as it goes, but it’s missing something that matters a lot to me. There’s nothing in the code that allows me to use the inferred model parameters to make predictions about the shape of the concentration-time curve across the full range of times. To do that I’ll introduce a “generated quantities” block to my code, as shown below:</p>
<div class="cell" data-output.var="bolus2">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bolus2</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb21-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_obs;</span>
<span id="cb21-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_fit;</span>
<span id="cb21-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; dose;</span>
<span id="cb21-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; vol_d;</span>
<span id="cb21-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_obs] t_obs;</span>
<span id="cb21-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_obs] c_obs;</span>
<span id="cb21-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_fit] t_fit;</span>
<span id="cb21-9">}</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb21-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; sigma;</span>
<span id="cb21-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; k;</span>
<span id="cb21-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">upper</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>&gt; vol_d_true;</span>
<span id="cb21-15">}</span>
<span id="cb21-16"></span>
<span id="cb21-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb21-18">  k ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ]; </span>
<span id="cb21-19">  sigma ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ];</span>
<span id="cb21-20">  vol_d_true ~ normal(vol_d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb21-21">  c_obs ~ normal(dose / vol_d_true * exp(-k * t_obs), sigma);</span>
<span id="cb21-22">}</span>
<span id="cb21-23"></span>
<span id="cb21-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb21-25">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_fit] c_fit = dose / vol_d_true * exp(-k * t_fit);</span>
<span id="cb21-26">}</span></code></pre></div>
</div>
</div>
<p>When I do this, the data that I pass to this version of the model needs to be modified too. It needs to specify the times for which we want to generate fitted curves:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">t_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb22-2">bolus2_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_obs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb22-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_fit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(t_fit),</span>
<span id="cb22-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dose =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb22-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol_d =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>,</span>
<span id="cb22-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>),</span>
<span id="cb22-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>),</span>
<span id="cb22-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_fit =</span> t_fit</span>
<span id="cb22-10">)</span></code></pre></div>
</div>
<p>Now that we have an augmented model and augmented data set, we can re-run our sampling procedure using the new code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">bolus2_fitted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bolus2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb23-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bolus2_data, </span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, </span>
<span id="cb23-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb23-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb23-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 sequential chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.0 seconds.
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 finished in 0.0 seconds.
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 0.0 seconds.
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 0.0 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.0 seconds.
Total execution time: 0.4 seconds.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: 3 of 4000 (0.0%) transitions ended with a divergence.
See https://mc-stan.org/misc/warnings for details.</code></pre>
</div>
</div>
<p>The <code>bolus2_fitted</code> object contains both the parameter values sampled during the MCMC routine, and the generated quantities that emerged in the process. If I wanted to I could use those generated quantities as is. However, because there’s some value in separating the “posterior prediction” process from the “posterior sampling” process, it’s generally considered best practice to create a new set of generated quantities sampled using the posterior parameter distribution. We can do that by calling the <code>$generate_quantities()</code> method of our fitted model object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">bolus2_generated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bolus2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_quantities</span>(</span>
<span id="cb26-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fitted_params =</span> bolus2_fitted,</span>
<span id="cb26-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bolus2_data,</span>
<span id="cb26-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span></span>
<span id="cb26-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running standalone generated quantities after 4 MCMC chains, 1 chain at a time ...

Chain 1 finished in 0.0 seconds.
Chain 2 finished in 0.0 seconds.
Chain 3 finished in 0.0 seconds.
Chain 4 finished in 0.0 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.0 seconds.
Total execution time: 0.5 seconds.</code></pre>
</div>
</div>
<p>This is a <a href="https://mc-stan.org/cmdstanr/reference/CmdStanGQ.html">CmdStanGQ</a> object, and again it has <code>$draws()</code> and <code>$summary()</code> methods. For our purposes the <code>$summary()</code> method will suffice as it returns a tibble containing the thing I want to plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">bolus2_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bolus2_generated<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>()</span>
<span id="cb28-2">bolus2_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 61 × 7
   variable   mean median    sd   mad    q5   q95
   &lt;chr&gt;     &lt;num&gt;  &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
 1 c_fit[1]   9.97   9.99 0.804 0.684  8.64 11.3 
 2 c_fit[2]   8.98   9.01 0.648 0.560  7.88  9.97
 3 c_fit[3]   8.09   8.13 0.551 0.473  7.14  8.89
 4 c_fit[4]   7.29   7.34 0.500 0.404  6.46  7.99
 5 c_fit[5]   6.57   6.62 0.480 0.363  5.79  7.22
 6 c_fit[6]   5.93   5.98 0.478 0.345  5.14  6.55
 7 c_fit[7]   5.35   5.40 0.482 0.351  4.56  5.98
 8 c_fit[8]   4.83   4.88 0.488 0.361  4.01  5.48
 9 c_fit[9]   4.36   4.41 0.493 0.370  3.52  5.02
10 c_fit[10]  3.94   3.98 0.494 0.378  3.10  4.61
# ℹ 51 more rows</code></pre>
</div>
</div>
<p>The <code>variable</code> column here is only mildly helpful, so I’ll add a column specifying the actual times associated with each row in this tibble:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">bolus2_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bolus2_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_fit</span>
<span id="cb30-2">bolus2_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 61 × 8
   variable   mean median    sd   mad    q5   q95  time
   &lt;chr&gt;     &lt;num&gt;  &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
 1 c_fit[1]   9.97   9.99 0.804 0.684  8.64 11.3   0   
 2 c_fit[2]   8.98   9.01 0.648 0.560  7.88  9.97  0.05
 3 c_fit[3]   8.09   8.13 0.551 0.473  7.14  8.89  0.1 
 4 c_fit[4]   7.29   7.34 0.500 0.404  6.46  7.99  0.15
 5 c_fit[5]   6.57   6.62 0.480 0.363  5.79  7.22  0.2 
 6 c_fit[6]   5.93   5.98 0.478 0.345  5.14  6.55  0.25
 7 c_fit[7]   5.35   5.40 0.482 0.351  4.56  5.98  0.3 
 8 c_fit[8]   4.83   4.88 0.488 0.361  4.01  5.48  0.35
 9 c_fit[9]   4.36   4.41 0.493 0.370  3.52  5.02  0.4 
10 c_fit[10]  3.94   3.98 0.494 0.378  3.10  4.61  0.45
# ℹ 51 more rows</code></pre>
</div>
</div>
<p>Having done so I can now draw the plot I really want:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> bolus2_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_obs, </span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> bolus2_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs</span>
<span id="cb32-4">)</span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(bolus2_summary) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> q5, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> q95), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, mean)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(t_obs, c_obs), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-bolus2-pk-posterior-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The solid line gives our best point estimate of the true concentration-time curve, and the shaded region shows a 90% credible interval that expresses our uncertainty about what part of the space the true curve might actually occupy.<sup>13</sup></p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_07_1657.jpg" class="img-fluid figure-img" alt="swirling purple and brown texturing within a hexagonal pattern agains tan background, with bursts of noise sharply escaping on the left side"></p>
<figcaption class="figure-caption margin-caption">I think this is my very favourite piece from this system. The texturing worked out so well.</figcaption>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="when-biology-isnt-analytically-tractable" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="when-biology-isnt-analytically-tractable">When biology isn’t analytically tractable</h2>
<p>Earlier when I justified the use of an exponential concentration-time function <img src="https://latex.codecogs.com/png.latex?C(t)">, I did so by assuming that the body is able to “clear” a constant volume of blood per unit time. That assumption works reasonably well in some situations. If we suppose that the kidneys<sup>14</sup> work a bit like a filter, you can imagine that the body is filtering the blood at a fixed rate, which produces the exponential curve I used earlier. But the real world is a little more complicated than that sometimes.</p>
<p>Suppose, instead, that the elimination process involves an <a href="https://en.wikipedia.org/wiki/Enzyme_catalysis">enzyme-catalysed</a> reaction. That is, the body eliminates the drug (the substrate) by binding it to enzyme, and from this transition state it is catalysed to something else (the product). The dynamics of such a process are a little different: the enzyme concentration is often very low relative to the substrate concentration and the reaction rate saturates: once you’ve hit that point adding more of the drug into the blood won’t speed up the elimination rate because there’s no free enzyme to catalyse its conversion. Put slightly differently, if elimination involves a saturable process it won’t necessarily have a constant clearance rate, and you won’t see an exponential concentration-time function.</p>
<p>Well, that’s awkward.</p>
<section id="michaelis-menten-kinetics" class="level3">
<h3 class="anchored" data-anchor-id="michaelis-menten-kinetics">Michaelis-Menten kinetics</h3>
<p>The paper I’ve relied on for an introduction to compartmental models in pharmacometrics is Holz and Fahr (2001) and they use <a href="https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics">Michaelis-Menten kinetics</a> as an example of a saturable elimination process. Michaelis-Menten kinetics is characterised by the following differential equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BdC(t)%7D%7Bdt%7D%20=%20-%20%5Cfrac%7Bv_%7Bm%7D%7D%7Bk_m%20+%20C(t)%7D%20C(t)%0A"></p>
<p>In this expression, <img src="https://latex.codecogs.com/png.latex?v_%7Bm%7D"> is a constant that denoting the maximum velocity of elimination: due to the limitations imposed by the enzyme concentration, the drug concentration cannot decrease faster than this rate. The term <img src="https://latex.codecogs.com/png.latex?k_m"> is the <strong>Michaelis constant</strong>: when the drug concentration <img src="https://latex.codecogs.com/png.latex?C(t)"> equals <img src="https://latex.codecogs.com/png.latex?k_m">, the elimination rate <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdC(t)%7D%7Bdt%7D"> is exactly half its maximum rate, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bv_m%7D%7B2%7D">. Both of these properties are easy enough to demonstrate if you’re willing to spend a few minutes playing around with the equation above, but it’s not very interesting, so we’ll move on. A more useful approach is to think about how we should expect Michaelis-Menten kinetics to behave at high and low drug concentrations:</p>
<ul>
<li><p>If the drug concentration <img src="https://latex.codecogs.com/png.latex?C(t)"> is very large, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdC(t)%7D%7Bdt%7D"> will be roughly constant and very close to the satuation rate <img src="https://latex.codecogs.com/png.latex?v_m">. In other words: At high concentrations, the concentration decreases <strong>linearly</strong> over time.</p></li>
<li><p>If the drug concentration <img src="https://latex.codecogs.com/png.latex?C(t)"> is very small, then <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bv_m%7D%7Bk_m%20+%20C(t)%7D"> will be roughly constant, and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdC(t)%7D%7Bdt%7D"> will be roughly proportional to the concentration <img src="https://latex.codecogs.com/png.latex?C(t)">. In other words: At low concentrations the concentration decreases <strong>exponentially</strong> over time.</p></li>
</ul>
<p>Now that we have a sensible intuition, we should try to draw the actual curves. One teeny-tiny problem… this differential equation doesn’t really have an analytic solution.<sup>15</sup> We’re going to have to do this numerically.</p>
</section>
<section id="what-does-it-look-like" class="level3">
<h3 class="anchored" data-anchor-id="what-does-it-look-like">What does it look like?</h3>
<p>In a moment I’m going to implement Michaelis-Menten kinetics using Stan, so as to eventually give me the ability to do Bayesian statistics in a pharmacokinetic model that involves this kind of dynamics. However, I’m a big fan of doing things in small steps. For example, if I weren’t planning to build all this into a probabilistic model, I wouldn’t really need to use Stan at all. R has many different <a href="https://cran.r-project.org/web/views/DifferentialEquations.html">tools for solving differential equations numerically</a>, and I could just use one of those.</p>
<p>For instance, if I chose to use the <a href="http://desolve.r-forge.r-project.org/">deSolve package</a>, I’d begin by defining an R function <code>mmk()</code> that returns the value of the derivative at a given point in time and given specified parameters, pass it to the <code>ode()</code> solver supplied by deSolve, and then draw myself a pretty little picture using ggplot2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(deSolve)</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># differential equation for MM kinetics: it returns a list because</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># that's what ode() expects to receive when it calls this function</span></span>
<span id="cb33-6">mmk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(t, y, parms) {</span>
<span id="cb33-7">  dydt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> parms[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vm"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (parms[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"km"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y) </span>
<span id="cb33-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dydt))</span>
<span id="cb33-9">}</span>
<span id="cb33-10"></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters</span></span>
<span id="cb33-12">dose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (in milligrams)</span></span>
<span id="cb33-13">circulation_vol <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (in litres)</span></span>
<span id="cb33-14">max_elimination <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> </span>
<span id="cb33-15">halving_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb33-16">times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (in hours)</span></span>
<span id="cb33-17"></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the desolve package</span></span>
<span id="cb33-19">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ode</span>(</span>
<span id="cb33-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conc"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> dose<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>circulation_vol),</span>
<span id="cb33-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> times,</span>
<span id="cb33-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">func =</span> mmk,</span>
<span id="cb33-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parms =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb33-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vm"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> max_elimination, </span>
<span id="cb33-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"km"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> halving_point</span>
<span id="cb33-26">  )</span>
<span id="cb33-27">)</span>
<span id="cb33-28"></span>
<span id="cb33-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert matrix to tibble and plot</span></span>
<span id="cb33-30">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(out)</span>
<span id="cb33-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(out, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, conc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/ode-with-desolve-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Consistent with the intuitions we developed earlier you can see that on the left hand side this curve looks pretty linear, but on the right hand side it looks pretty much like an exponential decay.</p>
</section>
<section id="the-exact-same-thing-but-in-stan-this-time" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-exact-same-thing-but-in-stan-this-time">The exact same thing, but in Stan this time</h3>
<p>Having solved the relevant differential equation in R, it’s helpful – if slightly strange – to imagine solving the exact same problem using Stan. Although Stan is primarily a language for probabilistic inference, it does provide a toolkit for <a href="https://mc-stan.org/docs/stan-users-guide/ode-solver.html">solving differential equations</a>. In normal usage we’d use the Stan ODE solver in the context of a larger statistical model, but – in order to wrap my head around how it works – I found it helpful to try invoking the solver for a dynamical system without incorporating it into any statistical model.</p>
<p>So let’s do that for Michaelis-Menten kinetics. If we squint and ignore the details, the basic idea is the same in Stan as it was in the earlier example in R:</p>
<ul>
<li><p>Write a user-defined function called <code>mmk()</code> that takes arguments for the time, current state of the system (in our case concentration), and any other parameters (the maximum elimination rate and the Michaelis constant), and returns the derivatives.</p></li>
<li><p>Call the ODE solver function, in this case <code>ode_rk45()</code>, passing it the user-defined function and other required quantities. This being Stan, we’ll need to ensure those quantities are defined in the data block.</p></li>
</ul>
<p>The actual code is shown below. The function is defined within the functions code block (shocking, right?), input data defined within the data block, and the variable we’re trying to compute (<code>conc</code>) is defined as a generated quantity:</p>
<div class="cell" data-output.var="mmk">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mmk</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">functions</span> {</span>
<span id="cb34-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> mmk(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time,</span>
<span id="cb34-3">             <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> state,</span>
<span id="cb34-4">             <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> vm,</span>
<span id="cb34-5">             <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> km) {</span>
<span id="cb34-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] derivative;</span>
<span id="cb34-7">    derivative[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = - state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] * vm / (km + state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]);</span>
<span id="cb34-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> derivative;</span>
<span id="cb34-9">  }</span>
<span id="cb34-10">}</span>
<span id="cb34-11"></span>
<span id="cb34-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb34-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nt;</span>
<span id="cb34-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] c0;</span>
<span id="cb34-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t0;</span>
<span id="cb34-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ts;</span>
<span id="cb34-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> vm;</span>
<span id="cb34-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> km;</span>
<span id="cb34-19">}</span>
<span id="cb34-20"></span>
<span id="cb34-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb34-22">}</span>
<span id="cb34-23"></span>
<span id="cb34-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb34-25">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] conc = ode_rk45(mmk, c0, t0, ts, vm, km);</span>
<span id="cb34-26">}</span></code></pre></div>
</div>
</div>
<p>It may seem strange that the <code>mmk()</code> function defines the <code>state</code> variable to be a vector of length 1. At first pass it might seem a lot simpler to specify a scalar real: if we did that, then we wouldn’t have the weirdness of defining <code>conc</code> as a one-dimensional length <code>nt</code> array, in which each cell is a vector of length 1, each of which contains a single real number. The layers of nesting seem unnecessary.</p>
<p>However, they are entirely necessary.</p>
<p>To see this, it’s important to recognise that <code>mmk()</code> isn’t an <em>arbitrary</em> user defined function, it is the <a href="https://mc-stan.org/docs/functions-reference/functions-ode-solver.html#ode-system-function">ODE system function</a> and is designed to be passed to one of the solvers, in this case <code>ode_rk45()</code>. In this particular case our state is one-dimensional: we have a one-compartment model, and the only variable that defines the state is the drug concentration in that compartment. But dynamical systems can be – and usually are – multivariate: in a two-compartment model the state would probably be defined in terms of two drug concentrations, one for each compartment. In that case we would <em>require</em> a vector.</p>
<p>To accommodate this cleanly, the design choice made in Stan is that the second argument to the system function must be a vector, even if the state happens to be one-dimensional. More generally, the point I’m making here is that to call the ODE solvers you need to ensure that your system function has the appropriate signature.</p>
<p>In any case, let’s take our code for a spin. First we’ll create some data that we can pass to Stan:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb35-2">mmk_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb35-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c0 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.8</span>, </span>
<span id="cb35-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb35-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ts =</span> times, </span>
<span id="cb35-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vm =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb35-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">km =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb35-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(times)</span>
<span id="cb35-9">)</span></code></pre></div>
</div>
<p>Next, we “sample” from the “model”. This step is, admittedly, super weird. We don’t actually have a model, and there are no parameters to sample and there are no probabilistic aspects to the system at all. This is going to be the world’s shortest MCMC run. The Stan model above is available in R via the <code>mmk</code> object, so I’ll call its <code>$sample()</code> method, specifying <code>fixed_param = TRUE</code> so that Stan doesn’t try to resample parameters that don’t exist. I’m only going to run one “chain” for a single iteration, because I only need to solve the system once:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">mmk_fitted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb36-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mmk_data,</span>
<span id="cb36-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed_param =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb36-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb36-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter_sampling =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 1 chain...

Chain 1 Iteration: 1 / 1 [100%]  (Sampling) 
Chain 1 finished in 0.0 seconds.</code></pre>
</div>
</div>
<p>Because Stan has dutifully generated the generated quantities, I now have the values for the solved concentrations. I’ll extract those by calling the <code>$draws()</code> method, do a tiny bit of cleanup to wrangle the data into a nice format…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">mmk_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_fitted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draws_df"</span>)</span>
<span id="cb38-2">mmk_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb38-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conc"</span>), </span>
<span id="cb38-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, </span>
<span id="cb38-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conc"</span></span>
<span id="cb38-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> mmk_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ts)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Dropping 'draws_df' class as required metadata was removed.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">mmk_draws</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 160 × 6
   .chain .iteration .draw variable    conc  time
    &lt;int&gt;      &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;
 1      1          1     1 conc[1,1]   21.5  0.05
 2      1          1     1 conc[2,1]   21.1  0.1 
 3      1          1     1 conc[3,1]   20.8  0.15
 4      1          1     1 conc[4,1]   20.5  0.2 
 5      1          1     1 conc[5,1]   20.1  0.25
 6      1          1     1 conc[6,1]   19.8  0.3 
 7      1          1     1 conc[7,1]   19.5  0.35
 8      1          1     1 conc[8,1]   19.1  0.4 
 9      1          1     1 conc[9,1]   18.8  0.45
10      1          1     1 conc[10,1]  18.5  0.5 
# ℹ 150 more rows</code></pre>
</div>
</div>
<p>…and draw a pretty picture:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mmk_draws, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, conc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-mmk-pk-curve-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Yup, same as before.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_01_1026.jpg" class="img-fluid figure-img" alt="soft purple noise patterns in the bottom left of the image, against a green background, with hints of a square shape in purple in the middle of the image"></p>
<figcaption class="figure-caption margin-caption">Honestly, I just included this one because it’s weird and I’m a sucker for this palette.</figcaption>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="one-compartment-bolus-model-with-mmk-elimination" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="one-compartment-bolus-model-with-mmk-elimination">One compartment bolus model with MMK elimination</h2>
<p>Some preliminaries. For the purposes of building priors it’s useful to think about what kinds of properties you can have sensible intuitions about. It’s a little tricky to set a joint prior over the maximum elimination rate <img src="https://latex.codecogs.com/png.latex?v_m"> and the Michaelis constant <img src="https://latex.codecogs.com/png.latex?k_m"> without using some outside knowledge. If the data don’t span a range that lets you unambiguously discover “a linear bit” and “an exponential bit” it’s very easy to trade off one parameter against the other. Increasing <img src="https://latex.codecogs.com/png.latex?v_m"> and <img src="https://latex.codecogs.com/png.latex?k_m"> at the same time will slightly change the “bendiness” of the curve, but that’s easily absorbed into the error terms. In other words, if you don’t have sensible constraints you’re going to end up with a serious identifiability problem. With that in mind, the two thoughts I had are:</p>
<p>I can see why it would be important to understand <img src="https://latex.codecogs.com/png.latex?v_m"> and <img src="https://latex.codecogs.com/png.latex?k_m"> theoretically but from a data analysis perspective, I found it a little easier to set priors by thinking about the elimination rate <img src="https://latex.codecogs.com/png.latex?v_0"> at time <img src="https://latex.codecogs.com/png.latex?t%20=%200">. After a little high school algebra we obtain the following expressions to transform from <img src="https://latex.codecogs.com/png.latex?v_0"> to <img src="https://latex.codecogs.com/png.latex?v_m"> and vice versa:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Av_0%20&amp;=&amp;%20v_m%20%5C%20%5Cdisplaystyle%20%5Cfrac%7Bc_0%7D%7Bc_0%20+%20k_m%7D%20%5C%5C%20%5C%5C%0Av_m%20&amp;=&amp;%20v_0%20%5C%20%5Cdisplaystyle%20%5Cfrac%7Bc_0%20+%20k_m%7D%7Bc_0%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Extending this logic, instead of parameterising the prior in terms of the Michaelis constant <img src="https://latex.codecogs.com/png.latex?k_m"> (the concentration at which the reaction rate falls to half its maximum value), we can use a design-specific analog, <img src="https://latex.codecogs.com/png.latex?k_0">, denoting the concentration at which the reaction rate falls to half of <img src="https://latex.codecogs.com/png.latex?v_0">. Again, some algebraic shenanigans gives us the transformations:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ak_0%20&amp;=&amp;%20%5Cdisplaystyle%20%5Cfrac%7Bc_0%20%5C%20k_m%7D%7Bc_0%20+%202%20k_m%7D%20%5C%5C%20%5C%5C%0Ak_m%20&amp;=&amp;%20%5Cdisplaystyle%20%5Cfrac%7Bc_0%20%5C%20k_0%7D%7Bc_0%20-%202%20k_0%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>In a sign that I still haven’t really nailed this, the way I’m going to set my priors for the model is kind of unprincipled. I’ll set independent priors over the initial rate <img src="https://latex.codecogs.com/png.latex?v_0">, and the Michaelis constant <img src="https://latex.codecogs.com/png.latex?k_m">. I suppose I could make a pretense of a justification for this, by saying that the prior over <img src="https://latex.codecogs.com/png.latex?v_0"> is used to capture my intutions about the experimental design and the prior over <img src="https://latex.codecogs.com/png.latex?k_m"> is used to capture my intuitions about the fundamental biological processes as they exist outside the experiment but… yeah, that’s 100% a post hoc rationalisation. The actual reason I’m doing this is that I tried several different ways of setting a prior, and this version seemed to be the least vulnerable to numerical problems. Other versions tended to move into regions of the space where the ODE solver becomes very unhappy, or regions where the target probability density is not well-behaved. Practicality rules my world.</p>
<p>The specific prior:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Av_0%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BHalf-Normal%7D_+(0,%2010)%20%5C%5C%0Ak_m%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BHalf-Normal%7D_+(0,%2010)%0A%5Cend%7Barray%7D%0A"></p>
<p>Later, when I plot model posteriors, I’ll be a little more sensible though and use the two interpretable versions: I’ll plot <img src="https://latex.codecogs.com/png.latex?v_m"> against <img src="https://latex.codecogs.com/png.latex?k_m">, and <img src="https://latex.codecogs.com/png.latex?v_0"> against <img src="https://latex.codecogs.com/png.latex?k_0">.</p>
<section id="the-model" class="level3">
<h3 class="anchored" data-anchor-id="the-model">The model</h3>
<p>Here’s the Stan code for the model I settled on:<sup>16</sup></p>
<div class="cell" data-output.var="mmk_bolus">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mmk_bolus</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">functions</span> {</span>
<span id="cb43-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> mmk(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time,</span>
<span id="cb43-3">             <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> state,</span>
<span id="cb43-4">             <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> vm,</span>
<span id="cb43-5">             <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> km) {</span>
<span id="cb43-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] derivative;</span>
<span id="cb43-7">    derivative[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = - state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] * vm / (km + state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]);</span>
<span id="cb43-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> derivative;</span>
<span id="cb43-9">  }</span>
<span id="cb43-10">}</span>
<span id="cb43-11"></span>
<span id="cb43-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb43-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_obs;</span>
<span id="cb43-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_fit;</span>
<span id="cb43-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_obs] c_obs;</span>
<span id="cb43-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_obs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_obs;</span>
<span id="cb43-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_fit;</span>
<span id="cb43-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; vol_d;</span>
<span id="cb43-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; dose;</span>
<span id="cb43-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t0;</span>
<span id="cb43-21">}</span>
<span id="cb43-22"></span>
<span id="cb43-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb43-24">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; sigma;</span>
<span id="cb43-25">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">upper</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>&gt; v0;</span>
<span id="cb43-26">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">upper</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>&gt; km;</span>
<span id="cb43-27">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">upper</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>&gt; vol_d_true;</span>
<span id="cb43-28">}</span>
<span id="cb43-29"></span>
<span id="cb43-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span> {</span>
<span id="cb43-31">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] c0;</span>
<span id="cb43-32">  c0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = dose / vol_d_true;</span>
<span id="cb43-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; vm = v0 * (km + c0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) / c0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb43-34">}</span>
<span id="cb43-35"></span>
<span id="cb43-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb43-37">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_obs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] mu_arr;</span>
<span id="cb43-38">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_obs] mu_vec;</span>
<span id="cb43-39"></span>
<span id="cb43-40">  v0 ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ];</span>
<span id="cb43-41">  km ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ];</span>
<span id="cb43-42">  sigma ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">T</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, ];</span>
<span id="cb43-43">  vol_d_true ~ normal(vol_d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb43-44">  </span>
<span id="cb43-45">  mu_arr = ode_rk45(mmk, c0, t0, t_obs, vm, km);</span>
<span id="cb43-46">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_obs) {</span>
<span id="cb43-47">    mu_vec[i] = mu_arr[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb43-48">  }</span>
<span id="cb43-49">  c_obs ~ normal(mu_vec, sigma);</span>
<span id="cb43-50">}</span>
<span id="cb43-51"></span>
<span id="cb43-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb43-53">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] c_fit = ode_rk45(mmk, c0, t0, t_fit, vm, km);</span>
<span id="cb43-54">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>&gt; k0 = (c0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] * km) / (c0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] + <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>*km);</span>
<span id="cb43-55">}</span></code></pre></div>
</div>
</div>
<p>It’s truly thrilling, is it not? You’ll notice that I’ve introduced a “transformed parameters” block in which I’ve define the <code>c0</code> and <code>vm</code> variables. These are included as transformed parameters because they are quantities that follow deterministically from the “stochastic” parameters (<code>v0</code>, <code>km</code>, etc) and the data, but – unlike the “generated quantities” – they actually do form part of the model because they are used later. The ODE solver needs access to both <code>c0</code> and <code>vm</code> in order to calculate the model-predicted concentrations at each time point, so they aren’t purely auxiliary. In contrast, the <code>c_fit</code> and <code>k0</code> variables that I’ve included in the “generated quantities” block aren’t used for anything: the human user (me) wants to know what these values are, but the model doesn’t strictly need them.</p>
<p>Anyway, let’s define some data that we can model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">t_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb44-2">c_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb44-3">t_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb44-4">mmk_bolus_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb44-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dose =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>,</span>
<span id="cb44-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol_d =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>,</span>
<span id="cb44-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb44-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> c_obs,</span>
<span id="cb44-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> t_obs,</span>
<span id="cb44-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_fit =</span> t_fit,</span>
<span id="cb44-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(t_obs),</span>
<span id="cb44-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_fit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(t_fit)</span>
<span id="cb44-13">)</span></code></pre></div>
</div>
<p>And, because human beings typically prefer pretty pictures to tiresome lists of numbers, here’s a plot that shows you what the to-be-modelled data look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb45-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> mmk_bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_obs,</span>
<span id="cb45-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conc =</span> mmk_bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs</span>
<span id="cb45-4">)</span>
<span id="cb45-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, conc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-mmk-bolus-data-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I kind of like this as a toy data set because it’s (a) very clean, in the sense that it doesn’t feel noisy at all and we expect that the measurement error <img src="https://latex.codecogs.com/png.latex?%5Csigma"> should be pretty small, and (b) there’s just a tiny bit of ambiguity about where precisely the MMK dynamics kick in… looking carefully at these points there’s this feeling that they aren’t really an exponential curve or a linear function, but something in between. So we should be able to model them using a MMK system, but it’s not quite clear where the linear part ends and where the exponential part begins. So it should be instructive…</p>
<p>Okay, so now let’s run the sampler:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">mmk_bolus_fitted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_bolus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb46-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mmk_bolus_data, </span>
<span id="cb46-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb46-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb46-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parallel_chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  </span>
<span id="cb46-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb46-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 chains, at most 2 in parallel...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 1.1 seconds.
Chain 2 finished in 1.0 seconds.
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 1.0 seconds.
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 1.1 seconds.

All 4 chains finished successfully.
Mean chain execution time: 1.1 seconds.
Total execution time: 2.3 seconds.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: 2 of 4000 (0.0%) transitions ended with a divergence.
See https://mc-stan.org/misc/warnings for details.</code></pre>
</div>
</div>
<p>That looks nice. A couple of minor complaints from Stan about divergences, but nothing too serious.<sup>17</sup> And take a summary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">mmk_bolus_fitted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 10
   variable     mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail
   &lt;chr&gt;       &lt;num&gt;  &lt;num&gt; &lt;num&gt; &lt;num&gt;  &lt;num&gt; &lt;num&gt; &lt;num&gt;    &lt;num&gt;    &lt;num&gt;
 1 lp__        3.82   4.20  1.73  1.49   0.506  5.86  1.00    1091.    1561.
 2 sigma       0.717  0.673 0.247 0.216  0.416  1.18  1.00    1109.    1491.
 3 v0          6.10   5.89  1.03  0.864  4.80   8.06  1.00     814.    1252.
 4 km          3.80   2.79  3.34  2.19   0.586 10.6   1.00     906.    1442.
 5 vol_d_true  5.67   5.69  0.350 0.329  5.08   6.22  1.00     924.    1398.
 6 c0[1]      21.2   21.1   1.34  1.21  19.3   23.6   1.00     924.    1398.
 7 vm          7.27   6.69  2.16  1.47   5.00  11.5   1.00     817.    1207.
 8 c_fit[1,1] 20.9   20.8   1.30  1.17  19.0   23.2   1.00     934.    1413.
 9 c_fit[2,1] 20.6   20.5   1.25  1.13  18.8   22.8   1.00     946.    1418.
10 c_fit[3,1] 20.3   20.2   1.21  1.10  18.5   22.5   1.00     958.    1423.
# ℹ 158 more rows</code></pre>
</div>
</div>
<p>Neato.</p>
</section>
<section id="posterior-densities" class="level3">
<h3 class="anchored" data-anchor-id="posterior-densities">Posterior densities</h3>
<p>Okay, let’s take a look at the posterior distributions. As I hinted earlier on – and indeed has been pointed out previously in the literature on Michaelis-Menten kinetics – there is a serious identifiability issue when parameters are expressed in the <img src="https://latex.codecogs.com/png.latex?(k_m,%20v_m)"> space:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">mmk_bolus_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_bolus_fitted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draws_df"</span>)</span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mmk_bolus_draws, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(km, vm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb51-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michaelis constant, km"</span>, </span>
<span id="cb51-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum elimination rate, vm"</span></span>
<span id="cb51-7">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/mmk-bolus-posterior-density-vm-km-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The very high posterior correlation (the value is 0.96) between <img src="https://latex.codecogs.com/png.latex?k_m"> and <img src="https://latex.codecogs.com/png.latex?v_m"> makes it nigh-impossible to uniquely identify either one, and I am pretty sure this is also the reason why this particular model is very temperamental. Sure, it looks pretty well behaved in the output above (there are no warning messages and only two divergences reported), but that’s what it looks like <em>after</em> I reparameterised the model into a format that sorta kinda works. The version I implemented originally made Stan cry. A <em>lot</em>.</p>
<p>In case you’re interested, here’s what the joint posterior looks like in the <img src="https://latex.codecogs.com/png.latex?(k_0,%20v_0)"> space. There’s still some correlation there (the value is 0.85), but it has attenuated quite a bit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mmk_bolus_draws, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(k0, v0)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb52-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb52-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rate-halving concentration, k0"</span>, </span>
<span id="cb52-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial elimination rate, v0"</span></span>
<span id="cb52-6">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/mmk-bolus-posterior-density-v0-k0-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is the real reason I introduced these transformations! Finally, let’s look at the posterior in the <img src="https://latex.codecogs.com/png.latex?(k_m,%20v_0)"> space in which I actually specified my priors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mmk_bolus_draws, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(km, v0)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb53-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michaelis constant, km"</span>, </span>
<span id="cb53-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial elimination rate, v0"</span></span>
<span id="cb53-6">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/mmk-bolus-posterior-density-v0-km-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The correlation here is 0.82, pretty similar to the previous one.<sup>18</sup></p>
</section>
<section id="credible-intervals-for-the-pharamacokinetic-function" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="credible-intervals-for-the-pharamacokinetic-function">Credible intervals for the pharamacokinetic function</h3>
<p>Okay, let’s turn to the curve itself. While there are some difficulties associated with recovering parameters of the Michaelis-Menten process, the concentration-time curves themselves are pretty recoverable. First, we use our posterior parameters to generate posterior predicted values for the concentration over time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">mmk_bolus_generated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_bolus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_quantities</span>(</span>
<span id="cb54-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fitted_params =</span> mmk_bolus_fitted,</span>
<span id="cb54-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mmk_bolus_data,</span>
<span id="cb54-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span></span>
<span id="cb54-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running standalone generated quantities after 4 MCMC chains, 1 chain at a time ...

Chain 1 finished in 0.0 seconds.
Chain 2 finished in 0.0 seconds.
Chain 3 finished in 0.0 seconds.
Chain 4 finished in 0.0 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.0 seconds.
Total execution time: 1.1 seconds.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">mmk_bolus_generated_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_bolus_generated<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^c_fit"</span>))</span>
<span id="cb56-3">mmk_bolus_generated_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mmk_bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_fit</span>
<span id="cb56-4"></span>
<span id="cb56-5">mmk_bolus_generated_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 160 × 8
   variable     mean median    sd   mad    q5   q95  time
   &lt;chr&gt;       &lt;num&gt;  &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
 1 c_fit[1,1]   20.9   20.8 1.30  1.17   19.0  23.2  0.05
 2 c_fit[2,1]   20.6   20.5 1.25  1.13   18.8  22.8  0.1 
 3 c_fit[3,1]   20.3   20.2 1.21  1.10   18.5  22.5  0.15
 4 c_fit[4,1]   20.0   19.9 1.17  1.07   18.3  22.1  0.2 
 5 c_fit[5,1]   19.7   19.6 1.13  1.04   18.0  21.7  0.25
 6 c_fit[6,1]   19.4   19.3 1.08  0.997  17.8  21.3  0.3 
 7 c_fit[7,1]   19.1   19.0 1.04  0.961  17.5  20.9  0.35
 8 c_fit[8,1]   18.8   18.7 1.01  0.928  17.3  20.6  0.4 
 9 c_fit[9,1]   18.5   18.5 0.968 0.898  17.1  20.2  0.45
10 c_fit[10,1]  18.2   18.2 0.932 0.869  16.8  19.8  0.5 
# ℹ 150 more rows</code></pre>
</div>
</div>
<p>Then we plot the data. The plot below shows the posterior mean estimate of the curve, with the shaded region corresponding to the 90% equal-tail credible intervals for the concentration at each time point. For comparison purposes the observed data are overplotted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb58-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> mmk_bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_obs, </span>
<span id="cb58-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> mmk_bolus_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs</span>
<span id="cb58-4">)</span>
<span id="cb58-5"></span>
<span id="cb58-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mmk_bolus_generated_summary) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb58-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> q5, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> q95), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, mean)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb58-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(t_obs, c_obs), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb58-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-mmk-pk-posterior-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Good enough! Naturally, there’s more I could do with this model, but that’s enough for this post so I’ll move on to something new.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_06_1509.jpg" class="img-fluid figure-img" alt="concentric circular noise patterns shonw in orange and brown against a pale tan background, with busts of noise in the lower-left corner"></p>
<figcaption class="figure-caption margin-caption">Another favourite of mine. I love the illusion of lighting that you get from the bright bits.</figcaption>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="multi-compartment-models" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="multi-compartment-models">Multi compartment models</h2>
<p>Imagine a more complex situation where a drug is administered orally: we now have an influx process where the drug is absorbed from the gut into systemic circulation (the central compartment), from which it is later eliminated. However, if the drug is able to pass between the central compartment and other bodily tissues (the peripheral compartment), we’ll need to model the drug flow between them, since only the drug concentration present in the central compartment is available for potential elimination at any point in time. For the sake of my sanity I’ll assume that it’s just as easy for the drug to pass from central to peripheral as vice versa, so there’s only a single “intercompartmental clearance” parameter associated with this flow. I’m also going to assume that all three processes (absorption, elimination, intercompartmental transfer) involve first order dynamics only.</p>
<p>In this scenario the state at time <img src="https://latex.codecogs.com/png.latex?t"> is defined by three concentrations:<sup>19</sup></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?c_%7Bgt%7D%20=%20C_g(t)"> is the drug concentration still remaining in the gut</li>
<li><img src="https://latex.codecogs.com/png.latex?c_%7Bct%7D%20=%20C_c(t)"> is the drug concentration currently in the central compartment</li>
<li><img src="https://latex.codecogs.com/png.latex?c_%7Bpt%7D%20=%20C_p(t)"> is the drug concentration currently in the peripheral compartment</li>
</ul>
<p>In practice, it can be more convenient to express this in terms of the absolute amount of drug in each compartment (including the gut) at each time point:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?a_%7Bgt%7D"> is the drug amount still remaining in the gut</li>
<li><img src="https://latex.codecogs.com/png.latex?a_%7Bct%7D"> is the drug amount currently in the central compartment</li>
<li><img src="https://latex.codecogs.com/png.latex?a_%7Bpt%7D"> is the drug amount currently in the peripheral compartment</li>
</ul>
<p>where, for each compartment, the concentration is simply the amount divided by the relevant volume, <img src="https://latex.codecogs.com/png.latex?c%20=%20a%20/v">. With this in mind we’ll define the state vector at time <img src="https://latex.codecogs.com/png.latex?t"> as the three drug amounts, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D_t%20=%20(a_%7Bgt%7D,%20a_%7Bct%7D,%20a_%7Bpt%7D)">.</p>
<p>Strictly speaking, we have four rate parameters in our model:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?k_a"> is the absorption rate (from gut to central compartment)</li>
<li><img src="https://latex.codecogs.com/png.latex?k_e"> is the elimination rate from the central compartment (also called the clearance rate)</li>
<li><img src="https://latex.codecogs.com/png.latex?k_%7Bcp%7D"> is the transfer rate from the central to peripheral compartment</li>
<li><img src="https://latex.codecogs.com/png.latex?k_%7Bpc%7D"> is the transfer rate from the peripheral to central compartment</li>
</ul>
<p>The biological assumptions of the model are as follows: the gut can only gain drug amount from the external dose which it loses drug to the central compartment, while the peripheral compartment can only exchange drug with the central compartment, and the central compartment has influx from gut, efflux to urine (or whatever), and interchange with the periphery. To help capture this, we’ll define two volumetric parameters:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?v_c"> is the volume of the central compartment</li>
<li><img src="https://latex.codecogs.com/png.latex?v_p"> is the volume of the peripheral compartment</li>
</ul>
<p>Second, we can define two clearance parameters:<sup>20</sup></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?q_e"> is the clearance rate for elimination (traditionally denoted CL)</li>
<li><img src="https://latex.codecogs.com/png.latex?q_i"> is the intercompartmental clearance (traditionally denoted Q)</li>
</ul>
<p>Using this notation we can write the system of differential equations as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdisplaystyle%20%5Cfrac%7Bda_%7Bgt%7D%7D%7Bdt%7D%20&amp;=&amp;%20-k_a%20%5C%20a_%7Bgt%7D+%20d_t%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%20%5Cfrac%7Bda_%7Bct%7D%7D%7Bdt%7D%20&amp;=&amp;%20%5Cdisplaystyle%20k_a%20%5C%20a_%7Bgt%7D%20+%20%5Cfrac%7Bq_i%7D%7Bv_p%7D%20%5C%20a_%7Bpt%7D%20-%20%5Cfrac%7Bq_i%7D%7Bv_c%7D%20%5C%20a_%7Bct%7D%20-%20%5Cfrac%7Bq_e%7D%7Bv_c%7D%20%5C%20a_%7Bct%7D%20%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%20%5Cfrac%7Bda_%7Bpt%7D%7D%7Bdt%7D%20&amp;=&amp;%20%5Cdisplaystyle%20-%20%5Cfrac%7Bq_i%7D%7Bv_p%7D%20%5C%20a_%7Bpt%7D%20+%20%5Cfrac%7Bq_i%7D%7Bv_c%7D%20%5C%20a_%7Bct%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Righty-ho. Now that we’re clear on what our unknowns are, let’s make some fictitious data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb59-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb59-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb59-4">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.48</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.66</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.17</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.34</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.56</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.25</span>, </span>
<span id="cb59-5">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.52</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.21</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.54</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.62</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.71</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.21</span>, </span>
<span id="cb59-6">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.21</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.82</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.43</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.79</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.03</span></span>
<span id="cb59-7">  )</span>
<span id="cb59-8">)</span>
<span id="cb59-9">obs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 2
   t_obs c_obs
   &lt;int&gt; &lt;dbl&gt;
 1     1 13.5 
 2     2 23.7 
 3     3 28.2 
 4     4 29.3 
 5     5 28.0 
 6     6 25.6 
 7     7 23.2 
 8     8 21.5 
 9     9 21.2 
10    10 19.3 
11    11 14.5 
12    12 14.6 
13    13 11.7 
14    14 12.2 
15    15 10.2 
16    16 10.8 
17    17  8.43
18    18  8.79
19    19  7.6 
20    20  6.03</code></pre>
</div>
</div>
<p>Here’s a picture of said data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(obs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(t_obs, c_obs)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb61-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb61-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-two-cpt-data-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay fine yes that looks like data. It’s quite fictitious of course, but whatever. This is a learning exercise for me, not a serious attempt at modelling. Let’s move on, shall we?</p>
<section id="two-compartment-model" class="level3">
<h3 class="anchored" data-anchor-id="two-compartment-model">Two compartment model</h3>
<p>At this point I want to be completely honest. When I started writing this post I really didn’t think I’d reach the point of writing a multi-compartment model. Nevertheless, here we are. On the one hand, I’m pretty pleased with my progress: I set myself a goal and I went well beyond my goal in this post. On the other hand, I am well aware that when I write, I have an audience. So it’s important to recognise that this part of the post is really pushing the boundaries of my current knowledge. Nevertheless, it sorta kinda works. So let’s go with it yeah? This post is long, and we need to finish it somehow. So. Here’s the code:</p>
<div class="cell" data-output.var="two_cpt">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>two_cpt</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb62-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">functions</span> {</span>
<span id="cb62-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> two_cpt(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time,</span>
<span id="cb62-3">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> state,</span>
<span id="cb62-4">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> qe,</span>
<span id="cb62-5">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> qi,</span>
<span id="cb62-6">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> vc,</span>
<span id="cb62-7">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> vp,</span>
<span id="cb62-8">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ka) {</span>
<span id="cb62-9"></span>
<span id="cb62-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// convenience...</span></span>
<span id="cb62-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ag = state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// gut amount</span></span>
<span id="cb62-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ac = state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// central amount</span></span>
<span id="cb62-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ap = state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// peripheral amount</span></span>
<span id="cb62-14"></span>
<span id="cb62-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// derivative of state vector with respect to time</span></span>
<span id="cb62-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] dadt;</span>
<span id="cb62-17"></span>
<span id="cb62-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute derivatives</span></span>
<span id="cb62-19">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = - (ka * ag);</span>
<span id="cb62-20">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = (ka * ag) + (qi / vp) * ap - (qi / vc) * ac - (qe / vc) * ac;</span>
<span id="cb62-21">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] = - (qi / vp) * ap + (qi / vc) * ac;</span>
<span id="cb62-22"></span>
<span id="cb62-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dadt;</span>
<span id="cb62-24">  }</span>
<span id="cb62-25">}</span>
<span id="cb62-26"></span>
<span id="cb62-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb62-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_obs;</span>
<span id="cb62-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_fit;</span>
<span id="cb62-30">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_obs] c_obs;</span>
<span id="cb62-31">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_obs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_obs;</span>
<span id="cb62-32">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_fit;</span>
<span id="cb62-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] a0;</span>
<span id="cb62-34">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t0;</span>
<span id="cb62-35">}</span>
<span id="cb62-36"></span>
<span id="cb62-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb62-38">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; qe;</span>
<span id="cb62-39">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; qi;</span>
<span id="cb62-40">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; vc;</span>
<span id="cb62-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; vp;</span>
<span id="cb62-42">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; ka;</span>
<span id="cb62-43">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; sigma;</span>
<span id="cb62-44">}</span>
<span id="cb62-45"></span>
<span id="cb62-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span> {</span>
<span id="cb62-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// use ode solver to find all amounts at all event times</span></span>
<span id="cb62-48">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_obs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] amount = ode_rk45(two_cpt,</span>
<span id="cb62-49">                                           a0,</span>
<span id="cb62-50">                                           t0,</span>
<span id="cb62-51">                                           t_obs,</span>
<span id="cb62-52">                                           qe,</span>
<span id="cb62-53">                                           qi,</span>
<span id="cb62-54">                                           vc,</span>
<span id="cb62-55">                                           vp,</span>
<span id="cb62-56">                                           ka);</span>
<span id="cb62-57"></span>
<span id="cb62-58">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// vector of central concentrations</span></span>
<span id="cb62-59">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_obs] mu;</span>
<span id="cb62-60">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_obs) {</span>
<span id="cb62-61">    mu[j] = amount[j, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] / vc;</span>
<span id="cb62-62">  }</span>
<span id="cb62-63">}</span>
<span id="cb62-64"></span>
<span id="cb62-65"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb62-66">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// priors (adapted from Margossian et al 2022)</span></span>
<span id="cb62-67">  qe ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>); <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// elimination clearance, CL</span></span>
<span id="cb62-68">  qi ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance, Q</span></span>
<span id="cb62-69">  vc ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>); <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// central compartment volume</span></span>
<span id="cb62-70">  vp ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>); <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// peripheral compartment volume</span></span>
<span id="cb62-71">  ka ~ lognormal(log(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate</span></span>
<span id="cb62-72">  sigma ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// measurement error</span></span>
<span id="cb62-73"></span>
<span id="cb62-74">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// likelihood of observed central concentrations</span></span>
<span id="cb62-75">  c_obs ~ normal(mu, sigma);</span>
<span id="cb62-76">}</span>
<span id="cb62-77"></span>
<span id="cb62-78"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb62-79">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] amt_fit = ode_rk45(two_cpt,</span>
<span id="cb62-80">                                            a0,</span>
<span id="cb62-81">                                            t0,</span>
<span id="cb62-82">                                            t_fit,</span>
<span id="cb62-83">                                            qe,</span>
<span id="cb62-84">                                            qi,</span>
<span id="cb62-85">                                            vc,</span>
<span id="cb62-86">                                            vp,</span>
<span id="cb62-87">                                            ka);</span>
<span id="cb62-88">  </span>
<span id="cb62-89">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_fit] c_fit;</span>
<span id="cb62-90">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_fit) {</span>
<span id="cb62-91">    c_fit[j] = amt_fit[j, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] / vc;</span>
<span id="cb62-92">  }</span>
<span id="cb62-93">}</span></code></pre></div>
</div>
</div>
<p>Next, we put together a Stan-friendly version of the data, which includes the initial amount of drug <code>a0</code> in each compartment (gut, central, peripheral):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">t_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb63-2">two_cpt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb63-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_obs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(obs),</span>
<span id="cb63-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs,</span>
<span id="cb63-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_obs,</span>
<span id="cb63-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb63-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t0 =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb63-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_fit =</span> t_fit,</span>
<span id="cb63-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_fit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(t_fit)</span>
<span id="cb63-10">)</span>
<span id="cb63-11"></span>
<span id="cb63-12">two_cpt_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$n_obs
[1] 20

$c_obs
 [1] 13.48 23.66 28.17 29.34 28.02 25.56 23.25 21.52 21.21 19.30 14.54 14.62
[13] 11.71 12.21 10.21 10.82  8.43  8.79  7.60  6.03

$t_obs
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

$a0
[1] 1000    0    0

$t0
[1] -0.01

$t_fit
  [1]  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4  2.6
 [15]  2.8  3.0  3.2  3.4  3.6  3.8  4.0  4.2  4.4  4.6  4.8  5.0  5.2  5.4
 [29]  5.6  5.8  6.0  6.2  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8  8.0  8.2
 [43]  8.4  8.6  8.8  9.0  9.2  9.4  9.6  9.8 10.0 10.2 10.4 10.6 10.8 11.0
 [57] 11.2 11.4 11.6 11.8 12.0 12.2 12.4 12.6 12.8 13.0 13.2 13.4 13.6 13.8
 [71] 14.0 14.2 14.4 14.6 14.8 15.0 15.2 15.4 15.6 15.8 16.0 16.2 16.4 16.6
 [85] 16.8 17.0 17.2 17.4 17.6 17.8 18.0 18.2 18.4 18.6 18.8 19.0 19.2 19.4
 [99] 19.6 19.8 20.0

$n_fit
[1] 101</code></pre>
</div>
</div>
<p>Thrilling, I know!</p>
</section>
<section id="fitting-the-model" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="fitting-the-model">Fitting the model</h3>
<p>Let’s see if this works when we run it, shall we? Step one, sample from the model…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">two_cpt_fitted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> two_cpt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb65-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> two_cpt_data, </span>
<span id="cb65-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb65-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb65-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parallel_chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  </span>
<span id="cb65-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb65-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_messages =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb65-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 chains, at most 2 in parallel...

Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 finished in 12.9 seconds.
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 12.7 seconds.
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 9.2 seconds.
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 11.2 seconds.

All 4 chains finished successfully.
Mean chain execution time: 11.5 seconds.
Total execution time: 39.8 seconds.</code></pre>
</div>
</div>
<p>That’s a little time consuming and makes me suspect that I’ve implemented this poorly.<sup>21</sup> Oh well. Perhaps I’ll revisit later. The important thing is that it sorta works. So let’s move on and take a summary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">two_cpt_fitted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 491 × 10
   variable      mean  median      sd     mad      q5     q95  rhat ess_bulk
   &lt;chr&gt;        &lt;num&gt;   &lt;num&gt;   &lt;num&gt;   &lt;num&gt;   &lt;num&gt;   &lt;num&gt; &lt;num&gt;    &lt;num&gt;
 1 lp__       -59.1   -59.1    2.43    2.55   -63.2   -55.5    1.34     9.69
 2 qe           2.19    2.31   0.385   0.468    1.61    2.64   1.73     6.13
 3 qi          15.2     3.58  16.9     4.54     0.775  46.1    1.74     6.16
 4 vc          17.7    17.4    2.88    3.39    13.3    22.3    1.42     8.27
 5 vp          32.7    11.7   40.3     9.91     5.46  108.     1.73     6.17
 6 ka           0.431   0.436  0.0616  0.0594   0.324   0.529  1.25    12.1 
 7 sigma        1.20    1.17   0.238   0.225    0.878   1.64   1.10    25.6 
 8 amount[1,… 648.    644.    40.4    38.4    586.    721.     1.25    12.1 
 9 amount[2,… 423.    417.    52.8    49.1    346.    522.     1.25    12.1 
10 amount[3,… 278.    269.    52.2    47.7    204.    377.     1.25    12.1 
# ℹ 481 more rows
# ℹ 1 more variable: ess_tail &lt;num&gt;</code></pre>
</div>
</div>
<p>As usual, it’s useful to take a look at some results visually. To that end we’ll again generate posterior predicted time-concentration curves:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">two_cpt_generated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> two_cpt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_quantities</span>(</span>
<span id="cb69-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fitted_params =</span> two_cpt_fitted,</span>
<span id="cb69-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> two_cpt_data,</span>
<span id="cb69-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span></span>
<span id="cb69-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running standalone generated quantities after 4 MCMC chains, 1 chain at a time ...

Chain 1 finished in 0.0 seconds.
Chain 2 finished in 0.0 seconds.
Chain 3 finished in 0.0 seconds.
Chain 4 finished in 0.0 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.0 seconds.
Total execution time: 1.7 seconds.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">two_cpt_generated_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> two_cpt_generated<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb71-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^c_fit"</span>))</span>
<span id="cb71-3"></span>
<span id="cb71-4">two_cpt_generated_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> two_cpt_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_fit</span>
<span id="cb71-5">two_cpt_generated_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 101 × 8
   variable    mean median     sd    mad     q5    q95  time
   &lt;chr&gt;      &lt;num&gt;  &lt;num&gt;  &lt;num&gt;  &lt;num&gt;  &lt;num&gt;  &lt;num&gt; &lt;num&gt;
 1 c_fit[1]   0.249  0.229 0.0549 0.0563  0.188  0.342   0  
 2 c_fit[2]   4.54   4.35  0.657  0.721   3.74   5.66    0.2
 3 c_fit[3]   8.01   7.81  0.835  0.905   6.94   9.48    0.4
 4 c_fit[4]  11.0   10.8   0.873  0.918   9.81  12.6     0.6
 5 c_fit[5]  13.6   13.5   0.859  0.873  12.4   15.1     0.8
 6 c_fit[6]  15.9   15.8   0.827  0.817  14.7   17.3     1  
 7 c_fit[7]  17.8   17.8   0.790  0.769  16.7   19.2     1.2
 8 c_fit[8]  19.6   19.5   0.754  0.721  18.4   20.9     1.4
 9 c_fit[9]  21.1   21.1   0.721  0.681  20.0   22.3     1.6
10 c_fit[10] 22.4   22.4   0.692  0.657  21.3   23.6     1.8
# ℹ 91 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb73-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> two_cpt_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_obs, </span>
<span id="cb73-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> two_cpt_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs</span>
<span id="cb73-4">)</span>
<span id="cb73-5"></span>
<span id="cb73-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(two_cpt_generated_summary) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb73-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> q5, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> q95), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb73-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, mean)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb73-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(t_obs, c_obs), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb73-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index_files/figure-html/plot-two-cpt-pk-posterior-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>That’s good enough for today.</p>
<p>It’s probably obvious from the context that this is a work in progress. I haven’t really thought this stuff through yet, and I’m willing to put a lot of money on the proposition this code could be improved considerably. However, that’s quite beside the point for this post. Right now, my goal was to get something to work, and this kinda works. Yay! I am happy.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/dreamlike_07_1600.jpg" class="img-fluid figure-img" alt="swirling brown monochrome image dominated by textured grainy hexagon that appears to be dissolving into pure noise on the left hand side"></p>
<figcaption class="figure-caption margin-caption">The original system these were based on was called “dreamlike”: the feeling of dissolution in this piece is very characteristic of that ancestor system.</figcaption>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="things-i-have-not-discussed" class="level2">
<h2 class="anchored" data-anchor-id="things-i-have-not-discussed">Things I have not discussed</h2>
<p>There are many topics that are adjacent to and highly relevant to this post that I have not discussed. The real reason for this is simply that I have limits, and this is just a blog post. But for the sake of listing some of them, here are a few issues around statistical inference that I omitted:</p>
<ul>
<li><p><strong>MCMC diagnostics</strong>: At various points in the process of writing this post Stan was kind enough to yell <em>very</em> loudly at me about the possibility that things might be going wrong with the MCMC sampler. Having “earned my bones” by writing some truly terrible MCMC samplers of my own, I really appreciate the “fail loudly” aesthetic that Stan has going on. Indeed, the only reason that the models I’ve used here have ended up being… look, let’s call them “okay”, shall we?… is that every time something went awry Stan screamed at me.</p></li>
<li><p><strong>Different kinds of ODE solvers</strong>: Throughout the post I’ve used <code>ode_rk45()</code> as my ODE solver in Stan, as if that were the only possible choice. It isn’t the only choice, and indeed it’s not even the only solver I used in the process of writing the bloody thing. There were periods in the post development where I couldn’t get the models to behave, and as a consequence of that the sampler kept proposing parameters that pushed the differential equations into a part of the space where they… aren’t pleasant. When that happened the system became “stiff”<sup>22</sup> and I had to switch to using <code>ode_bdf()</code>. There is probably a whole blog post to be written about stiffness but… yeah nah. Suffice it to say this is one of those things where the mapmaker feels an urge to scribble “here be dragons” and move along.</p></li>
<li><p><strong>Model checking, and Bayesian workflow more generally</strong>: Stating the obvious really, but at no point have I really dived into model checking, model testing, etc. There’s a huge amount that could be said on that. Not gonna say any of it here.</p></li>
</ul>
<p>There are other things missing too. On the pharmacometric side, I have not discussed:</p>
<ul>
<li>The logic for choosing one <strong>model structure</strong> over another. When do you need multiple compartments? When do you need to assume saturating elimination processes? Etc. There’s a very good reason I haven’t spoken about those things: I am not even slightly qualified to do so. That’s something that requires substantive domain knowledge and I’m not there yet.</li>
<li>Individual differences (i.e., <strong>population pharmacokinetics</strong>). In real life you really need to consider variability across people. That’s something we can address with hierarchical models, by assuming the population defines distributions over parameters. I omitted that for simplicity: I’ll get to that later.</li>
<li><strong>Covariates</strong>. Another super important thing in real life is modelling systematic variation across individuals as well as random variation. Predicting the way in which parameters of the process vary across people as a function of other measured characteristics (age, sex, etc) matters hugely. Again, that’s a future topic.</li>
<li>Modelling the effect of the drug (<strong>pharmacodynamics</strong>): there’s more to these models than simply tracking the drug concentration. Often you need to consider downstream effects… what does the drug <em>do</em> physiologically, or psychologically, and how do those effects persist over time. Future topic babes.</li>
</ul>
<p>Finally, there are things I’ve missed on the software side. I’ve not talked about <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten</a> and <a href="https://www.certara.com/software/phoenix-winnonlin/">WinNonlin</a>, and at some point I probably should. But… not today. This post is long enough already. I think we can all agree on that!</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>In my post-academic era I’ve gotten a little lax in my citation habits, but I still care about acknowledging my sources. In addition to the various Wikipedia pages and Stan documentation pages I’ve linked to throughout, this blog post draws heavily on ideas presented in these three papers:</p>
<ul>
<li>Holz &amp; Fahr (2001). Compartment modelling. <em>Advanced Drug Delivery Reviews</em>. <a href="https://doi.org/10.1016/S0169-409X(01)00118-1">doi.org/10.1016/S0169-409X(01)00118-1</a></li>
<li>Choi, Rempala &amp; King (2017). Beyond the Michaelis-Menten equation: Accurate and efficient estimation of enzyme kinetic parameters. <em>Scientific Reports</em>. <a href="https://doi.org/10.1038/s41598-017-17072-z">doi.org/10.1038/s41598-017-17072-z</a></li>
<li>Margossian, Zhang &amp; Gillespie (2022). Flexible and efficient Bayesian pharmacometrics modeling using Stan and Torsten, Part I. <em>CPT: Pharmacometrics &amp; Systems Pharmacology</em>. <a href="https://doi.org/10.1002/psp4.12812">doi.org/10.1002/psp4.12812</a></li>
</ul>
<p>Naturally, all the stuff ups and errors are mine and mine alone.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I did try <a href="https://en.wikipedia.org/wiki/WinBUGS">WinBUGS</a> briefly but it was a bit awkward since I wasn’t a Windows user even then.↩︎</p></li>
<li id="fn2"><p>Yes, I know that sometimes there are tricks to work around them. It was more effort than it was worth.↩︎</p></li>
<li id="fn3"><p>There’s also many packages for specific modelling frameworks like brms and rstanarm but for the purposes of this post I’m only interested in packages that supply a general-purpose interface to Stan from R.↩︎</p></li>
<li id="fn4"><p>I mean, technically the real work of compiling the Stan code into an executable and then running the sampler is all being done by Stan itself and has sweet fuck all to do with any R package, but knitr has no way of talking to Stan, so it has to rely on an R package to do that… and by default it asks RStan.↩︎</p></li>
<li id="fn5"><p>Or, to those of us who don’t speak the language, the drug is injected into the bloodstream in a single dose.↩︎</p></li>
<li id="fn6"><p>Not quite the same as the total amount of blood plasma, as I understand it, but approximately the same idea.↩︎</p></li>
<li id="fn7"><p>So easy even I could do it.↩︎</p></li>
<li id="fn8"><p>I’m adopting the <code>$method()</code> convention here sometimes used when discussing R6 classes to be clear that we’re talking about encapsulated OOP in which methods belong to objects (as is typical in many programming languages) rather than functional OOP in which methods belong to generic functions (as appears in the S3 and S4 systems in R, for instance).↩︎</p></li>
<li id="fn9"><p>Note for young people: This was the pre-2023 equivalent of saying “As an AI language model…”↩︎</p></li>
<li id="fn10"><p>I can still remember quite viscerally the moment that conjugacy died for me as a potentially useful statistical guideline: it was the day I learned that a Dirichlet Process prior is conjugate to i.i.d. sampling from an arbitrary(ish) unknown distribution. DP priors are… well, I don’t want to say “worthless” because I try to see the good in things, but having worked with them a lot over the years I am yet to discover a situation where the thing I actually want is a Dirichlet Process. It’s one of those interesting inductive cases about the projectibility of different properties. What “should” have happened is that the DP-conjugacy property made me more willing to use the DP. Instead, what “actually” happened is that learning about DP-conjugacy made me less willing to trust conjugacy. I <em>knew</em> in my bones that the DP was useless, so I revised my belief about conjugacy. Someone really should come up with a formal language to describe this kind of belief revision… I imagine it would be quite handy.↩︎</p></li>
<li id="fn11"><p>This is “of course” (see next footnote) an equal-tailed interval rather than a highest density interval.↩︎</p></li>
<li id="fn12"><p>In technical writing, the term “of course” is an expression that used to denote “something that the author is painfully aware of and some subset of the readership is equally exhausted with, and none of those people really want to talk or hear about for the rest of their living days, but is entirely unknown and a source of total confusion to another subset of the readership who have no idea why this should be obvious because in truth it absolutely is not obvious”. As such it should, of course, be used with caution and with a healthy dose of self-deprecation and rolling-of-the-eyes. It is in this latter spirit that my use of the term is intended: I simply do not wish to devote any more of my life to thinking about the different kinds of credible intervals.↩︎</p></li>
<li id="fn13"><p>We could supplement it further and maybe add dotted lines even further out that show 90% credible regions for future <em>data</em> (i.e., acknowledging the role of measurement error in the future) but today I don’t feel like doing that!↩︎</p></li>
<li id="fn14"><p>And other organs, I guess. I’ve heard rumours the human body contains other organs that actually do things…↩︎</p></li>
<li id="fn15"><p>Apparently this is only half true. A deep dive on the relevant <a href="https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics#Closed_form_equation">wikipedia page</a> suggests that it is possible to solve it analytically, but insofar as the solution involves the <a href="https://en.wikipedia.org/wiki/Lambert_W_function">Lambert W function</a> I personally would prefer to take a numerical approach.↩︎</p></li>
<li id="fn16"><p>Folks familiar with Stan will probably notice that my code style could be improved a little. It’s probably not ideal that I’m enforcing the truncation range on some of my variables twice, once at variable declaration using the <code>&lt;lower, upper&gt;</code> syntax, and then sometimes later on by truncating a distribution using the <code>T[L, U]</code> syntax. At the moment I find this redundancy helpful to me because it stops me from getting confused (e.g., it means I never look at my own code and wonder why my half-normal is declared to have a <code>normal()</code> distribution), but in the long run I think it’s a bad idea for code maintenance. From that point of view I think it makes sense to have a consistent code style that declares variable bounds once and only once, in a place where future maintainers would expect to find it. That would make it a lot easier to edit later. But that’s the kind of detail I’m not going to worry about right this second.↩︎</p></li>
<li id="fn17"><p>Okay look, if this were linear regression I’d be very worried at seeing <em>any</em> divergences. But for this model? Babe, this is really fucking good. It took a lot of effort to find a parameterisation of the MMK elimination model that doesn’t end in nuclear fire, metaphorically speaking. One or two divergences in the MCMC chains, yeah, I can live with that.↩︎</p></li>
<li id="fn18"><p>Looking at that plot I had wondered if the correlation was being boosted by a few outliers, but that doesn’t seem to be the case: the rank-order correlation for the third plot is 0.82, which compares to 0.83 for the previous plot, and 0.93 for the first one.↩︎</p></li>
<li id="fn19"><p>It should be noted that my notation is slightly nonstandard. My understanding is that the convention in the literature is to use notation consistent with the <a href="https://www.certara.com/software/phoenix-winnonlin/">WinNonlin</a> software package, as that is generally considered the industry standard and often used for benchmarking purposes. I haven’t done this for a very boring reason: I’ve not yet had a chance to play around with WinNonlin.↩︎</p></li>
<li id="fn20"><p>Again, I know my notation is nonstandard. But I’m still wrapping my head around all this and, for the time being at least, I <em>like</em> having notation that makes clear that <img src="https://latex.codecogs.com/png.latex?q_e"> and <img src="https://latex.codecogs.com/png.latex?q_%7Bcp%7D"> are both parameters of the same structural kind. I don’t find CL and Q anywhere near as easy to understand.↩︎</p></li>
<li id="fn21"><p>Okay, I should be honest. The real reason I suspect there’s room for improvement here is that I’ve had use <code>show_messages = FALSE</code> to suppress some warnings messages in order to keep the output visually tidy. It’s not terrible: Stan throws some warnings from the ODE solver, especially during the very early stages of warmup, in which it quite rightly screams about being fed insane parameters. It’s not ideal, but it’s not terrible either. I hid the messages to avoid ugly output, not for more nefarious reasons. I mean, don’t get me wrong, this model needs a lot more love than I have given it up to this point. But the hidden warning messages are somewhat boring in this instance.↩︎</p></li>
<li id="fn22"><p>Too easy.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacokinetic {ODE} Models in {Stan}},
  date = {2023-05-16},
  url = {https://blog.djnavarro.net/posts/2023-05-16_stan-ode},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacokinetic ODE Models in
Stan.”</span> May 16, 2023. <a href="https://blog.djnavarro.net/posts/2023-05-16_stan-ode">https://blog.djnavarro.net/posts/2023-05-16_stan-ode</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Pharmacokinetics</category>
  <category>Stan</category>
  <category>Bayes</category>
  <category>MCMC</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-05-16_stan-ode/index.html</guid>
  <pubDate>Mon, 15 May 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-05-16_stan-ode/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Non-compartmental analysis</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index.html</link>
  <description><![CDATA[ 




<!--
CC0 cover:
https://unsplash.com/photos/iPl3q-gEGzY
-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Back in my academic days, one thing that always made me sad about being “technically” a psychologist rather than a statistician or computer scientist is that it was always incumbent on my to use my technical skills in areas that would be of interest to behavioural scientists. As John Tukey once remarked, <a href="https://www.azquotes.com/quote/603405">“The best thing about being a statistician is that you get to play in everyone’s backyard”</a>. Fortunately for me, my academic backyard was quite large. On the applied side I had the opportunity to work in cognitive science, social psychology, forensic psychology, linguistics, and more, while still finding opportunities to write the occasional paper on machine learning or information theory. I even managed to find a way to play with quantum walks at one point.</p>
<p>Nevertheless, my envy persisted. There are so many other interesting things out there, and I never tire of learning new things. As such, I require very little pretext to start reading papers on… um… [checks notes]… statistical techniques in <a href="https://en.wikipedia.org/wiki/Pharmacokinetics">pharmacokinetics</a>. Pharmacokinetics (PK) is a subfield of pharamacology that studies the concentrations of drugs and other substances over time when they are administered. Pharmacokinetic models are typically contrasted with (and sometimes paired with) <a href="https://en.wikipedia.org/wiki/Pharmacodynamics">pharmacodynamic</a> (PD) models used to study the effect that drugs (and other substances) have on the organism. When these two things are paired – as you would often need to do if, say, you’d like to understand the behaviour of a new drug – it’s referred to as <a href="https://en.wikipedia.org/wiki/PK/PD_models">PK/PD</a> modelling.<sup>1</sup></p>
<p><br></p>
<section id="a-little-background" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-little-background">A little background</h2>
<p>To the surprise of exactly no-one who has experience with applied statistics, it turns out that there is quite a bit of nuance to pharmacometric analyses, and I’m only just starting to wrap my head around it all.<sup>2</sup> To help make sense of it, let’s imagine a simple data set that looks like this when plotted:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>It’s a very simple data set because we’re only looking at data from a single dose of some drug administered only to a single organism, and we’re measuring the concentration<sup>3</sup> of that drug at several time points. This is quite sensibly referred to as a concentration-time curve.</p>
<p>Given data that take the form of one or more concentration-time curves, what kind of modelling strategy should you pursue? <sup>4</sup> <sup>5</sup> As usual there are many choices an analyst needs to make, but one key distinction is between <a href="https://en.wikipedia.org/wiki/Pharmacokinetics#Noncompartmental_analysis">noncompartmental</a> and <a href="https://en.wikipedia.org/wiki/Pharmacokinetics#Compartmental_analysis">compartmental</a> analyses.</p>
<p>In a <strong>compartmental analysis</strong>, the statistician makes some (generally simplified) assumptions about the biological processes<sup>6</sup> at play when a drug is administered, and estimates parameters using this model. For example, you might use a two-compartment model with a central compartment that corresponds to the circulatory system through which the drug is distributed, and a peripheral compartment corresponding to the body tissues to which the drug is delivered. The good thing about compartmental models is that they can provide a somewhat realistic description of what happens when a drug is administered. The bad thing is that it can be difficult to work out how to formulate the model correctly, with all the attendant worries about model misspecification. I’m not going to talk about these models in this post.</p>
<p>An alternative strategy – one that has complementary strengths and weaknesses to compartmental models – is to try to estimate quantities of interest (more or less) directly from the concentration-time curve. This approach is referred to as <strong>non-compartmental analysis</strong> (NCA), and it has the advantage of being simpler to implement, and as such inherits much of the robustness that comes from model simplicity.<sup>7</sup></p>
<p>With that in mind it is useful to list some of the <a href="https://en.wikipedia.org/wiki/Pharmacokinetics#Metrics">quantities of interest</a> that are typically used in pharmacokinetic modelling. They vary a bit. Some of them are defined in a way that relates straightforwardly to the data. They’re things that you can directly measure, or they’re part of the study design, etc:</p>
<p><br></p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 19%">
<col style="width: 20%">
<col style="width: 14%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 13%">
</colgroup>
<thead>
<tr class="header">
<th>Quantity</th>
<th>Notes</th>
<th>Symbol</th>
<th>Unit</th>
<th>Formula</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Dose</td>
<td>Amount of drug administered</td>
<td><img src="https://latex.codecogs.com/png.latex?D"></td>
<td>mmol</td>
<td>(Design)</td>
<td>500 mmol</td>
</tr>
<tr class="even">
<td>C<sub>max</sub></td>
<td>Peak plasma concentration of drug after administration</td>
<td><img src="https://latex.codecogs.com/png.latex?C_%7Bmax%7D"></td>
<td>mmol/L</td>
<td>(Measured)</td>
<td>60.9 mmol/L</td>
</tr>
<tr class="odd">
<td>t<sub>max</sub></td>
<td>Time taken to reach C<sub>max</sub></td>
<td><img src="https://latex.codecogs.com/png.latex?t_%7Bmax%7D"></td>
<td>h</td>
<td>(Measured)</td>
<td>3.9h</td>
</tr>
<tr class="even">
<td>Volume of distribution</td>
<td>Volume over which the drug is distributed</td>
<td><img src="https://latex.codecogs.com/png.latex?V_d"></td>
<td>L</td>
<td><img src="https://latex.codecogs.com/png.latex?D/C_0"></td>
<td>6.0 L</td>
</tr>
</tbody>
</table>
</div>
<p><br></p>
<p>Not everything is that simple however. For example, the half-life parameters for absorption and elimination are not directly observable, and estimates of those quantities must be computed from other quantities:</p>
<p><br></p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 19%">
<col style="width: 23%">
<col style="width: 14%">
<col style="width: 10%">
<col style="width: 16%">
<col style="width: 10%">
</colgroup>
<thead>
<tr class="header">
<th>Quantity</th>
<th>Notes</th>
<th>Symbol</th>
<th>Unit</th>
<th>Formula</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Absorption half-life</td>
<td>The time taken for 50% of the dose to be absorbed into circulation</td>
<td><img src="https://latex.codecogs.com/png.latex?t_%7B%20%5Cfrac%7B1%7D%7B2%7D%20a%7D"></td>
<td>h</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cln(2)%20/%20k_a"></td>
<td>1.0 h</td>
</tr>
<tr class="even">
<td>Elimination half-life</td>
<td>The time taken for the drug concentration to fall to 50% of its initial value</td>
<td><img src="https://latex.codecogs.com/png.latex?t_%7B%20%5Cfrac%7B1%7D%7B2%7D%20e%7D"></td>
<td>h</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cln(2)%20/%20k_e"></td>
<td>12 h</td>
</tr>
</tbody>
</table>
</div>
<p><br></p>
<p>Of course, when an uninitiated reader looks at these formulas, the first question they’d ask is “what the heck do the <img src="https://latex.codecogs.com/png.latex?k_a"> and <img src="https://latex.codecogs.com/png.latex?k_e"> quantities refer to? In a slightly circular fashion, we can extend the table somewhat and refer to these as the corresponding rate parameters for absorption and elimination:</p>
<p><br></p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 17%">
<col style="width: 15%">
<col style="width: 11%">
<col style="width: 22%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th>Quantity</th>
<th>Notes</th>
<th>Symbol</th>
<th>Unit</th>
<th>Formula</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Absorption rate</td>
<td>The rate at which the drug enters into circulation</td>
<td><img src="https://latex.codecogs.com/png.latex?k_a"></td>
<td><img src="https://latex.codecogs.com/png.latex?h%5E%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cln%202%7D%20%7Bt_%7B%5Cfrac%7B1%7D%7B2%7Da%7D%7D"></td>
<td>0.693 h<sup>-1</sup></td>
</tr>
<tr class="even">
<td>Elimination rate</td>
<td>The rate at which the drug is eliminated from the body</td>
<td><img src="https://latex.codecogs.com/png.latex?k_e"></td>
<td><img src="https://latex.codecogs.com/png.latex?h%5E%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cln%202%7D%20%7Bt_%7B%5Cfrac%7B1%7D%7B2%7De%7D%7D%20=%20%5Cfrac%7BCL%7D%7BV_d%7D"></td>
<td>0.0578 h<sup>-1</sup></td>
</tr>
</tbody>
</table>
</div>
<p><br></p>
<p>For the most part, these extra lines in our table don’t do much other than rephrase the last two… but there is something new here. One way of thinking about the underlying biology here is to suppose that the body has the capacity to “clean” or “clear” some volume of blood plasma per unit time. This is referred to as the <a href="https://en.wikipedia.org/wiki/Clearance_(pharmacology)"><strong>clearance rate</strong></a> (denoted <img src="https://latex.codecogs.com/png.latex?CL"> in the table).</p>
<p>Once we have the concept of a clearance rate <img src="https://latex.codecogs.com/png.latex?CL"> – and implicitly, a concept of how it relates to elimination rates <img src="https://latex.codecogs.com/png.latex?k_e"> and distribution volume <img src="https://latex.codecogs.com/png.latex?V_d"> – we can start linking it to observable (or at least, estimable) quantities…</p>
<p><br></p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 15%">
<col style="width: 16%">
<col style="width: 14%">
<col style="width: 10%">
<col style="width: 21%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th>Quantity</th>
<th>Notes</th>
<th>Symbol</th>
<th>Unit</th>
<th>Formula</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Area under the curve</td>
<td>Integral of the concentration- time curve</td>
<td><img src="https://latex.codecogs.com/png.latex?AUC"></td>
<td><img src="https://latex.codecogs.com/png.latex?M%20s"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cint_I%20C%20dt"></td>
<td>1,320 h mmol/L</td>
</tr>
<tr class="even">
<td>Clearance rate</td>
<td>Volume of plasma cleared per unit time</td>
<td><img src="https://latex.codecogs.com/png.latex?CL"></td>
<td><img src="https://latex.codecogs.com/png.latex?m%5E3/%20s"></td>
<td><img src="https://latex.codecogs.com/png.latex?V_d%20%5C%20k_e%20=%20%5Cfrac%7BD%7D%7BAUC%7D"></td>
<td>0.38 L/h</td>
</tr>
</tbody>
</table>
</div>
<p><br></p>
<p>…where I’m being slightly imprecise here in the formula for the area under the curve, because I haven’t specified the interval <img src="https://latex.codecogs.com/png.latex?I"> over which we should integrate. In the simplest case where as single dose is administered, the interval is generally taken to be <img src="https://latex.codecogs.com/png.latex?%5B0,%20%5Cinfty%5D">, and that is good enough for this post.<sup>8</sup></p>
<p>At long last, we get to the point… you can think of the AUC as a kind of “total drug exposure” measure, but it’s not immediately obvious whether that’s a biologically meaningful quantity. However, it is naturally related to the clearance rate… which <em>does</em> have an inherent meaning from a biological perspective. And from this observation we arrive at the logic behind noncompartmental analysis. Instead of constructing a model of the <em>process</em> by which the body eliminates a drug, we instead aim to estimate AUC (and other quantities) from the observed data.<sup>9</sup> <sup>10</sup></p>
<p>Yay! Now we understand a minimal amount of the basic science. We know <em>why</em> the lovely pharma folks might want an estimate of AUC, and we can see why a nonparametric<sup>11</sup> <sup>12</sup> estimate of the AUC might useful to have.</p>
</section>
<section id="a-simple-approach" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-approach">A simple approach</h2>
<p>How might we estimate this? The simplest approach would be to linearly interpolate between observations, and then compute the area under the resulting curve. Represented visually, area we would compute is the sum of the trapezoidal regions shown below:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>For a single trapezoid defined by time values <img src="https://latex.codecogs.com/png.latex?t_1"> and <img src="https://latex.codecogs.com/png.latex?t_2">, at which concentration levels <img src="https://latex.codecogs.com/png.latex?c_1"> and <img src="https://latex.codecogs.com/png.latex?c_2"> are observed, the corresponding area is <img src="https://latex.codecogs.com/png.latex?(t_2%20-%20t_1)%20(c_2%20+%20c_1)%20/%202">, so applying the <a href="https://en.wikipedia.org/wiki/Trapezoidal_rule">trapezoidal rule</a> to the finite set of observations provides an approximation to the integral we care about, yielding a simple estimator for the area under the curve:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AAUC%20=%20%5Csum_%7Bi=1%7D%5E%7Bn-1%7D%20(t_%7Bi+1%7D%20-%20t_i)%20%5Cfrac%7Bc_%7Bi+1%7D%20+%20c_i%7D%7B2%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?n"> denotes the total number of time points at which a measurement has been taken. To tidy the notation slightly I’ll let <img src="https://latex.codecogs.com/png.latex?%5CDelta%20t_i%20=%20t_%7Bi%20+%201%7D%20-%20t_i">, and thus</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AAUC%20=%20%5Csum_%7Bi=1%7D%5E%7Bn-1%7D%20%5CDelta%20t_i%20%5Cfrac%7Bc_%7Bi+1%7D%20+%20c_i%7D%7B2%7D%0A"></p>
<p>That’s easy enough to implement as an R function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">auc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(time, conc) {</span>
<span id="cb1-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(time)</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((time[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> time[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (conc[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conc[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-4">}</span></code></pre></div>
</div>
<p>This <code>auc()</code> function is incredibly limited, but it will suffice for now.<sup>13</sup> Let’s say we have a data frame <code>df</code> that contains the data I used to draw the figure above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
   time concentration
  &lt;dbl&gt;         &lt;dbl&gt;
1     0             0
2     1             8
3     2            12
4     4            14
5     8             9
6    16             4
7    32             2</code></pre>
</div>
</div>
<p>Then:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auc</span>(time, concentration))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 186</code></pre>
</div>
</div>
<p>Using such calculated values of AUC I could then go on to calculate values for <a href="https://en.wikipedia.org/wiki/Clearance_(pharmacology)">clearance</a>, <a href="https://en.wikipedia.org/wiki/Bioavailability">bioavailability</a>, and more. Yay!</p>
</section>
<section id="a-concern-about-tails" class="level2">
<h2 class="anchored" data-anchor-id="a-concern-about-tails">A concern about tails</h2>
<p>In practice, a pharmacometrician wouldn’t calculate AUC the way I’ve just done it, for all sorts of reasons. To see why, I’ll let <img src="https://latex.codecogs.com/png.latex?f(t)"> denote the true concentration-time curve, such that the observed concentration <img src="https://latex.codecogs.com/png.latex?c_i"> at time <img src="https://latex.codecogs.com/png.latex?t_i"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_i%20=%20f(t_i)%20+%20%5Cepsilon_i%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i"> denotes the measurement errors that – purely for simplicity – I’ll pretend are <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">i.i.d.</a> with mean zero.<sup>14</sup> By definition then, the true value of the AUC we seek to estimate is given</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cint_0%5E%5Cinfty%20f(t)%20%5C%20dt%0A"></p>
<p>which we can decompose into the sum of two definite integrals, one taken over the range of times for which we have data <img src="https://latex.codecogs.com/png.latex?%5Bt_1,%20t_n%5D"> where <img src="https://latex.codecogs.com/png.latex?t_1%20=%200">, and the other corresponding to the tail area <img src="https://latex.codecogs.com/png.latex?%5Bt_n,%20%5Cinfty%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cint_%7Bt_1%7D%5E%7Bt_n%7D%20f(t)%20%5C%20dt%20+%20%5Cint_%7Bt_n%7D%5E%7B%5Cinfty%7D%20f(t)%20%5C%20dt%0A"></p>
<p>It doesn’t take a lot of work to notice that the AUC that we calculate is a numerical approximation to the first term only.<sup>15</sup> <sup>16</sup> <sup>17</sup> Unless we have designed our study such that the concentration <img src="https://latex.codecogs.com/png.latex?c_n"> is effectively zero at the final time point <img src="https://latex.codecogs.com/png.latex?t_n">, we’re going to end up with an estimate of the AUC that systematically underestimates the true value. Given that AUC is used as a measure of “total drug exposure” and is rather important for estimating other important quantities, we’d prefer to avoid that, but in order to do so we might have to – gasp! – start using our knowledge of the domain to make some assumptions.</p>
</section>
<section id="making-sensible-assumptions" class="level2">
<h2 class="anchored" data-anchor-id="making-sensible-assumptions">Making sensible assumptions</h2>
<p>At this point it’s useful to consider the reasons why the curve I’ve used as my toy data set starts at zero, rises to a maximum concentration after a moderate amount of time, and then smoothly decreases afterwards. This pattern might be observed from a drug administered orally. At the time of administration the blood plasma concentration of the drug will be zero because it hasn’t yet been absorbed into systemic circulation – because bodies have that pesky gastrointestinal system that has to do its job before ingested substances pass into the bloodstream. In other words, at the beginning the absorption process is the main factor at play, and blood concentration rises. Later on, however, once the substance has been (mostly) absorbed the situation changes, and it’s the elimination process that dominates: drug concentration falls as the kidneys etc do their job and clear it from the system. For a drug administered intravenously, however, the situation is going to be a little different because we bypass the absorption process: the plasma concentration <em>starts</em> at its maximum value and falls steadily as the elimination process takes place.</p>
<p>Given all this let’s return to NCA estimate of AUC, and think about what happens in the tails. Assuming we have designed our study sensibly, the last time point <img src="https://latex.codecogs.com/png.latex?t_n"> will be chosen so that absorption (if relevant) is substantially complete, and the blood concentration is falling: when estimating the tail area, it’s not unreasonable to assume that elimination is the only process in play, and that the body is able to clear some fixed volume of blood (i.e., the clearance, CL) per unit time. Or, to put it another way, for the purposes of estimating the tail area, we’ll use a one-compartment bolus model that assumes drug concentrations over time follow an exponential decay:<sup>18</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac(t)%20=%20c_0%20%5C%20e%5E%7B-k_e%20t%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?c_0"> refers to the initial concentration and <img src="https://latex.codecogs.com/png.latex?k_e"> is the elimination rate constant discussed earlier in the post. To be slightly more precise, we take the final observed concentration <img src="https://latex.codecogs.com/png.latex?c_n"> to be our starting concentration, and then assume that the remaining time course of elimination produces an exponential decay, giving us this as our estimate of the tail area:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cint_%7Bt_n%7D%5E%7B%5Cinfty%7D%20c_n%20%5C%20e%5E%7B-k_e%20(t%20-%20t_n)%7D%20%5C%20dt%20%20=%20%5Cfrac%7Bc_n%7D%7Bk_e%7D%0A"></p>
<p>That’s nice and neat, except for one small problem: we don’t actually know the value of <img src="https://latex.codecogs.com/png.latex?k_e">. Fortunately, since we’re assuming that the concentration-time curve is exponential in the tail, we expect that a plot of log concentration against time will be linear for the later time points. Better yet, per the one-compartment bolus model, the slope of this plot will give us an estimate of <img src="https://latex.codecogs.com/png.latex?k_e">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%20c(t)%20=%20-k_e%20t%20+%20%5Cln%20c_0%0A"></p>
<p>In a truly shocking turn of events, when we plot the entirely made-up data I’ve used for this post on a logarithmic scale, we see precisely the expected pattern:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Expressed as R code, we can estimate the elimination rate by regressing log concentration against time for the final few data points (about 3 or 4 is considered okay) and using the slope<sup>19</sup> as our estimate:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(concentration) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> time, df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, ])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      time 
0.06791393 </code></pre>
</div>
</div>
<p>So we could refine our <code>auc()</code> function as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">auc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(time, conc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tail_n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb8-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(time)</span>
<span id="cb8-3">  tail_points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tail_n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n</span>
<span id="cb8-4">  auc_body <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((time[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> time[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (conc[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conc[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-5">  k_e <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(conc[tail_points]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> time[tail_points])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb8-6">  auc_tail <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(conc[n] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> k_e)</span>
<span id="cb8-7">  auc_body <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> auc_tail</span>
<span id="cb8-8">}</span></code></pre></div>
</div>
<p>Applying it to the toy data set, we can see that the estimated AUC has increased quite considerably:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auc</span>(time, concentration))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 215.449</code></pre>
</div>
</div>
<p>That’s not entirely surprising, given that I deliberately created a toy data set where the plasma concentration was still relatively high at the final time point.</p>
</section>
<section id="further-refinement" class="level2">
<h2 class="anchored" data-anchor-id="further-refinement">Further refinement</h2>
<p>My goal in this post was very modest: all I really wanted to do was wrap my head around some core concepts in pharmacokinetics and implement a simple analytic method. It’s worth noting, however, that in real life there are further refinements to NCA that are usually considered. For example, in order to construct an estimate of the tail area I relied on some sensible assumptions (exponential decay) about the shape of the underlying pharmacokinetic function. That’s very sensible, but there’s nothing stopping us making use of the same ideas to refine the estimate of the “AUC body” as well as the “AUC tail”. Using the trapezoid rule (linear interpolation) to construct our estimate makes sense if we have no idea whether the function is concave or convex at a particular point in the curve. But, as the plot below illustrates, this method systematically underestimates concave areas, and overestimates convex areas.</p>
<p>Suppose, for example, that instead of a one-compartment bolus model, the pharmacokinetics of our drug are better described by a <a href="https://en.wikipedia.org/wiki/Bateman_equation">Bateman curve</a> that arises if one assumes a constant rate of absorption and a constant rate of elimination:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac(t)%20=%20%5Cfrac%7BF%20%5Ctimes%20D%20%5Ctimes%20k_a%7D%7BV_D%20(k_a%20-%20k_e)%7D%20%5Cleft(%20e%5E%7B-k_e%20t%7D%20-%20e%5E%7B-k_a%20t%7D%20%5Cright)%0A"> In this expression <img src="https://latex.codecogs.com/png.latex?F"> denotes the bioavailability (fraction of the drug that gets absorbed, e.g., 0.8), <img src="https://latex.codecogs.com/png.latex?D"> is the dose (e.g., 200mmol), and <img src="https://latex.codecogs.com/png.latex?V_D"> is the volume over which the drug is distributed (e.g.&nbsp;6L). This kind of system gives us pharmacokinetic profiles that look like this:<sup>20</sup></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now suppose we measured this function at a few data points and used the trapezoid rule to estimate the integral:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that there are systematic (and non-trivial) overestimates on the right side of the curve where the concentrations are decaying exponentially but the estimator is interpolating linearly. The corresponding underestimates on the left hand side – where the curve is concave – are smaller because we’ve designed the study to measure more frequently early on (which is sensible). Because these overestimates tend to occur in the part of the curve where the elimination process dominates, there are variations of non-compartmental AUC calculations that use nonlinear interpolation for those parts of the concentration-time curve.<sup>21</sup> However, I’m not going to dive into that in this post, since I wanted to keep the discussion as simple as possible.</p>
<p>I am sure you are all deeply thrilled to hear that.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The specific discipline that refers to the formal modelling aspect to pharmacology is called <a href="https://en.wikipedia.org/wiki/Pharmacometrics">pharmacometrics</a>.↩︎</p></li>
<li id="fn2"><p>Whenever learning a new thing I try to force myself to be the precise opposite of <a href="https://xkcd.com/793/">this person</a>.↩︎</p></li>
<li id="fn3"><p>Typically the <a href="https://en.wikipedia.org/wiki/Blood_plasma">blood plasma</a> concentration, which might be something like <a href="https://en.wikipedia.org/wiki/Mass_concentration_(chemistry)">mass concentration</a> but of course doesn’t have to be. The plots I’m using in this post don’t bother to specify units because I’m not doing that deep a dive yet, but obviously that would… um… matter quite a lot in real life. One should not confuse mass concentration with molar concentration or volume concentration etc etc. So much undergraduate chemistry coming back to me as I write this… it’s kind of fun.↩︎</p></li>
<li id="fn4"><p>Realistically you’d expect to obtain more than one such curve in a real study, and as such you have all the usual issues around aggregating data from possibly-heterogeneous sources. This line of thought leads you naturally to considering <a href="https://www.fda.gov/regulatory-information/search-fda-guidance-documents/population-pharmacokinetics">population pharmacokinetics</a>, and there will be exactly zero statisticians surprised to learn that this leads you to thinking about mixed models (see, for example, this lovely <a href="https://www.youtube.com/watch?v=y1TPbJENacE">talk by Joseph Standing</a>. I’m not going to get to that in this post but I did start reading about some of the models used for this purpose and, not gonna lie, they look like fun.↩︎</p></li>
<li id="fn5"><p>I mean, this morning I discovered the <a href="https://insightrx.github.io/PKPDposterior/">PKPDposterior</a> R package that provides Stan wrappers for Bayesian PKPD models and am awfully excited to play with it at a later point.↩︎</p></li>
<li id="fn6"><p>I’m still learning my way around the territory here but even I can see that when constructing a specific model you’ll likely want to think about processes of absorption, distribution, metabolism, and elimination (<a href="https://en.wikipedia.org/wiki/ADME">ADME</a>).↩︎</p></li>
<li id="fn7"><p>This simplicity also makes it an attractive place for me to start learning about a new field. Learning a new discipline always requires learning the terminology and notation, understanding the assumptions and practices, and so on. I find it much easier to wrap my head around those things in the context of a comparatively-simple statistical technique rather than attempting to do the same thing in the context of a more complex one.↩︎</p></li>
<li id="fn8"><p>In more complex cases where a steady state is reached (e.g., when doses are administered at regular intervals, eventually the concentration-time curve becomes periodic and the system is in dynamic equilibrium), the interval is computed from some time <img src="https://latex.codecogs.com/png.latex?t"> after the steady state is reached, to some time <img src="https://latex.codecogs.com/png.latex?t+%5Ctau">.↩︎</p></li>
<li id="fn9"><p>Okay, fine, I confess I am oversimplifying here. Noncompartmental analysis is somewhat more general than this. For the purposes of this post I’m restricting myself to thinking about the area under the concentration-time curve, but as noted in review papers (e.g., <a href="https://dx.doi.org/10.1007/978-1-62703-050-2_16">Gabrielsson &amp; Weiner 2012</a>) there are other curves to which you can apply much the same logic. For example, if you plot the first moment (concentration x time) against time and compute the area under that curve (typically denoted AUMC), you can use this to estimate other quantities that pharmacometricians care about. That being said, I’m not going to go into that here.↩︎</p></li>
<li id="fn10"><p>Slightly confusingly, it appears to be a convention in the literature that, unless otherwise stated, “AUC” refers <em>specifically</em> to the area under the concentration-time curve. Per the previous footnote, the area under the first moment curve is referred to as the “AUMF”. I’d complain about this imprecision, but I too have worked as a research scientist. I am acutely aware that “AUC” also has an equally-confusing default meaning in psychology – in that context, “AUC” is almost always taken to refer to the area under the <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">receiver operating characteristic</a> curve, because <a href="https://en.wikipedia.org/wiki/Detection_theory">signal detection theory</a> often lies in the background as an unstated assumption. Sigh. Science is a cruel mistress.↩︎</p></li>
<li id="fn11"><p>I hate that word. Seriously. If you’re not a statistician, but happen to know a devout frequentist and a devout Bayesian, gather the two of them together and ask them what “nonparametric” means. Then, measure the size of the resulting mushroom cloud. It’s an empty term that doesn’t mean anything. But whatever. The reason I use it here has fuck all to do with Bayesian/frequentist squabbles, and everything to do with the fact that we are deliberately trying our best <em>not</em> to construct a model that makes strong theoretical assumptions. My statistical logic for thinking of this as “nonparametric” follows naturally from the scientific logic for calling it “noncompartmental”.↩︎</p></li>
<li id="fn12"><p>On top of that, there’s the fact that as soon as one moves past the simplest possible approach, we actually do start making some assumptions about the structure of the concentration-time curve, partially expressing it in terms of a low dimensional model, so there is a sense in which “nonparametric” is a bit misleading. Whatever. I’m not entirely convinced that terminology was ever very helpful.↩︎</p></li>
<li id="fn13"><p>I’ll talk about its limitations from a statistical perspective in a moment, but it’s worth noting that assumes the observations are ordered chronologically, and I’ve not bothered with input checking or anything that I’d want to do in real life to prevent accidental misuse. But that’s not the point of the post and I’m getting off track.↩︎</p></li>
<li id="fn14"><p>Or, more precisely, I’m simply going to ignore them for now. I promise I am not this sloppy when working professionally but honestly right now I’m focusing on learning the basics.↩︎</p></li>
<li id="fn15"><p>I did briefly consider writing something more detailed about this point but it’s sort of silly: the trapezoid rule for numeric integration is the average of the left and right <a href="https://en.wikipedia.org/wiki/Riemann_sum">Riemann sums</a>, so if we’re assuming that <img src="https://latex.codecogs.com/png.latex?f()"> is a Riemann-integrable function, it’s pretty clear that the thing we’re doing here is employing a well-established method for numerically approximating the area under the curve, but only measured up to the last observed time point.↩︎</p></li>
<li id="fn16"><p>We could go slightly further in this hypothetical analysis that I didn’t bother with and show that under a simple design where we sample the values of <img src="https://latex.codecogs.com/png.latex?t"> in such a way that as <img src="https://latex.codecogs.com/png.latex?n%20%5Crightarrow%20%5Cinfty"> the longest time interval also goes to infinity <img src="https://latex.codecogs.com/png.latex?t_n%20%5Crightarrow%20%5Cinfty">, this method will produce an <a href="https://en.wikipedia.org/wiki/Consistent_estimator">asymptotically consistent</a> estimator for the true AUC. But, honestly, who cares? Asymptotic consistency is the coldest of cold comforts, and guarantees very little in practice. There’s a good reason why pharmacometricians prefer methods that attempt to estimate the tail area in the pre-asymptotic (i.e., real world) scenario.↩︎</p></li>
<li id="fn17"><p>The reason, of course, being that they are not idiots and they care about making sensible inferences.↩︎</p></li>
<li id="fn18"><p>I suppose this is one of those models that is so widely used that it’s almost weird to cite, but for what it’s worth I’ve found <a href="https://doi.org/10.1016/S0169-409X(01)00118-1">Holz &amp; Fahr (2001)</a> to be a nice introduction to compartment modelling.↩︎</p></li>
<li id="fn19"><p>Well, -1 times the slope, but whatever.↩︎</p></li>
<li id="fn20"><p>Okay yes my toy data set does look rather like a Bateman curve. In truth I made up the values intuitively, but I’m amused to see that they closely adhere to a model that I hadn’t yet read about when I created the data.↩︎</p></li>
<li id="fn21"><p>One question that I haven’t yet found the answer for is the one that pops up when you look at the curve above: there’s a systematic underestimate that occurs when you don’t have many data points near the peak concentration. In that region the curve is concave. Intuitively it seemed to me that if you’re going to apply corrections in regions where you are pretty sure the curve is convex, it might be wise to do similarly in regions where you’re pretty sure it’s concave. I imagine there’s an answer to this in the literature somewhere.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Non-Compartmental Analysis},
  date = {2023-04-26},
  url = {https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Non-Compartmental Analysis.”</span>
April 26, 2023. <a href="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis">https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Pharmacokinetics</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-04-26_non-compartmental-analysis/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A personal essay on Bayes factors</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>You like my gin and tonic kisses ’cause you know they taste so sweet<br> And I know you got your missus, but there ain’t no one like me<br> &nbsp;&nbsp; –Elle King and Miranda Lambert</p>
</blockquote>
<p>So. As my loyal<sup>1</sup> readers may have worked out, I have decided that now is the time to resurrect blog posts from my dark past. Oh sure, I can walk in the bright and blessed world of data science and adorn myself in <a href="https://www.imdb.com/title/tt9079692/">all that hard glossy armour</a> that is the perquisite of trade, but I have a dark past. Once upon a time I <a href="https://www.quotes.net/mquote/56448">delved too deep</a> into the dark realms of statistics. I fought with dragons (frequentists), trolls (objective Bayesians), and balrogs (subjective Bayesians). Occasionally I emerged victorious, in the sense that I am not yet dead. In this respect I am proud of myself, but oh my… to survive this in perilous land, I too have had to scorch the earth and burn all the bridges. These are dangerous paths to tread, and there are few things a statistician loves more than a whimsical death.</p>
<p>Yeah, anyway. I have opinions about <a href="https://en.wikipedia.org/wiki/Bayes_factor">Bayes factors</a>, and since I am no longer required to give a fuck about academic norms, I shall raise them from the dead. Or, to use normal language, I’m gonna repost a rant I wrote a few years back because I bloody well can…</p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/katy.jpg" class="img-fluid" alt="Katy Perry in a wedding dress, looking apprehensive"></p>
</div>
<p><br></p>
<section id="the-post" class="level2">
<h2 class="anchored" data-anchor-id="the-post">The post…</h2>
<blockquote class="blockquote">
<p>’Cause you’re hot then you’re cold <br> You’re yes then you’re no <br> You’re in then you’re out <br> You’re up then you’re down <br> You’re wrong when it’s right <br> It’s black and it’s white<br> &nbsp;&nbsp; –<a href="https://youtu.be/kTHNpusq654">Katy Perry</a></p>
</blockquote>
<p>I have mixed feelings about Bayes factors. As Katy Perry once observed, it’s <em>extremely</em> <a href="https://www.youtube.com/watch?v=kTHNpusq654">hard to make valid inferences</a> when you aren’t even sure what the hell it is you’re trying to make inferences about. Oh sure, it’s easy enough to tell pretty stories about rational reasoning with respect to a prior, but if we’re going to have a serious statistical relationship you need to bring more than a <a href="https://en.wikipedia.org/wiki/Dutch_book">Dutch book argument</a> to the table.</p>
<p><br></p>
</section>
<section id="love-at-first-sight" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="love-at-first-sight">Love at first sight</h2>
<p>I first discovered Bayes factors in 1999, as a new Ph.D.&nbsp;student working on problems in similarity judgment and categorisation. I read <a href="https://www.tandfonline.com/doi/abs/10.1080/01621459.1995.10476572">Kass and Raftery (1995)</a> and was head over heels. As long as one accepts the principle of inverse probability, a Bayesian reasoner can evaluate a hypothesis <img src="https://latex.codecogs.com/png.latex?h"> in light of data <img src="https://latex.codecogs.com/png.latex?d"> in a simple fashion:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(h%7Cd)%20=%20%5Cfrac%7BP(d%7Ch)%20P(h)%7D%7BP(d)%7D%0A"></p>
<p>I suspect most people reading this post already knows what Bayes rule says, but not everyone who follows me cares that much so let’s break this down:<sup>2</sup></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P(h)"> is my <em>prior belief</em>: how plausible was <img src="https://latex.codecogs.com/png.latex?h"> before the data arrived?</li>
<li><img src="https://latex.codecogs.com/png.latex?P(h%7Cd)"> is my <em>posterior belief</em>: how plausible is <img src="https://latex.codecogs.com/png.latex?h"> now that I’ve seen the data?</li>
<li><img src="https://latex.codecogs.com/png.latex?P(d%7Ch)"> is the <em>likelihood</em>: the probability that we would have observed data <img src="https://latex.codecogs.com/png.latex?d"> if the hypothesis <img src="https://latex.codecogs.com/png.latex?h"> describes the true data generating mechanism <sup>3</sup> <sup>4</sup></li>
</ul>
<p>When comparing two competing hypotheses <img src="https://latex.codecogs.com/png.latex?h_0"> and <img src="https://latex.codecogs.com/png.latex?h_1">, I can compute the posterior odds favouring one over the other simply by dividing the two posterior probabilities,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BP(h_1%20%7C%20d)%7D%7BP(h_0%20%7C%20d)%7D%20=%20%5Cfrac%7BP(d%7Ch_1)%7D%7BP(d%7Ch_0)%7D%20%5Ctimes%20%5Cfrac%7BP(h_1)%7D%7BP(h_0)%7D%0A"></p>
<p>Or, in something closer to every day language:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bposterior%20odds%7D%20=%20%5Cmbox%7BBayes%20factor%7D%20%5Ctimes%20%5Cmbox%7Bprior%20odds%7D%0A"></p>
<p>Thus the Bayes factor (BF) is defined by the ratio of the two likelihoods, and it has a natural interpretation as a <em>weight of evidence</em>. It tells me how I need to adjust my beliefs in light of data. And it’s so simple…</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7BBF%7D%20=%20%5Cfrac%7BP(d%7Ch_1)%7D%7BP(d%7Ch_0)%7D%0A"></p>
<p>What’s not to love?</p>
<p>Better yet, it even extends naturally from simple hypotheses to full fledged models. Suppose I have a theoretically meaningful computational model <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D"> for some psychological phenomenon, with parameter(s) <img src="https://latex.codecogs.com/png.latex?%5Ctheta">. For any choice of parameter values <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> my model provides me with a likelihood function for the data <img src="https://latex.codecogs.com/png.latex?P(d%7C%5Ctheta)">, and my researcher knowledge of the world provides a prior <img src="https://latex.codecogs.com/png.latex?P(%5Ctheta%7C%5Cmathcal%7BM%7D)"> belief about the relative plausibility of different parameters. So the <em>a priori</em> prediction that my model makes about the probability of observing data <img src="https://latex.codecogs.com/png.latex?d"> in my experiment is calculated with the <em>marginal likelihood</em> <sup>5</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(d%20%7C%20%5Cmathcal%7BM%7D)%20=%20%5Csum_%5Ctheta%20P(d%20%7C%20%5Ctheta)%20P(%5Ctheta%20%7C%20%5Cmathcal%7BM%7D)%0A"></p>
<p>The intuition is dead simple (or so I thought at the time)…. if I don’t know which parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is the right one, I should hedge my bets by constructing an appropriate weighted average. Easy-peasy. This gives me a Bayes factor that I can use to compare two computational models like so:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7BBF%7D%20=%20%5Cfrac%7BP(d%7C%5Cmathcal%7BM%7D_1)%7D%7BP(d%7C%5Cmathcal%7BM%7D_0)%7D%0A"></p>
<p>Honestly, I don’t see why this “statistics business” is so hard, I thought. All you have to do to scale up from simple hypotheses to serious theory evaluation is turn an italicised <img src="https://latex.codecogs.com/png.latex?h"> into a squiggly <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D"> and you’re done! I read the Myung and Pitt (1997) paper on <a href="https://link.springer.com/article/10.3758/BF03210778">model selection with Bayes factors</a> and thought yep, this is it. Problem solved. Easy!</p>
<p>Oh, you sweet summer child.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/lana.jpg" class="img-fluid" alt="Photo of Lana Del Rey"></p>
</div>
</section>
<section id="seeds-of-doubt" class="level2">
<h2 class="anchored" data-anchor-id="seeds-of-doubt">Seeds of doubt</h2>
<blockquote class="blockquote">
<p>I’m feelin’ electric tonight <br> Cruisin’ down the coast, goin’ about 99<br> Got my bad baby by my heavenly side<br> I know if I go, I’ll die happy tonight<br> &nbsp;&nbsp; – <a href="https://youtu.be/TdrL3QxjyVw">Lana Del Rey</a></p>
</blockquote>
<p>During my PhD I used Bayes factors (or similar tools) a <em>lot</em>. One of my very first papers (<a href="https://papers.djnavarro.net/2003_hybridsimilarity.">this one</a> sought to combine multidimensional scaling methods with overlapping clustering methods in a way that would allow someone to estimate stimulus representations that have both continuous and discrete parts (e.g., our intuitions about number are partly continuous insofar as they pertain to magnitude, but also discrete when they pertain to other arithmetic properties), using Laplace approximations to the Bayes factor to automatically determine the appropriate number of clusters and dimensions. The technique had some problems. Collections of weighted binary features (as used in featural reprentations; <a href="https://doi.org/10.1037/0033-295X.84.4.327">Tversky 1977</a>, <a href="https://doi.org/10.1037/0033-295X.86.2.87">Shepard and Arabie 1979</a>) induce a <em>qualitatively different parameter space</em> than co-ordinates in a Minkowski space<sup>6</sup> (<a href="https://doi.org/10.1007/BF02291665">Shepard 1974</a>), and so when you try to mix them together into a hybrid similarity representation you get… weirdness.</p>
<p>Any time you compute the marginal likelihood <img src="https://latex.codecogs.com/png.latex?P(d%20%7C%20%5Cmathcal%7BM%7D)"> you are implicitly introducing a penalty for excess complexity, so the Bayes factor incorporates a form of automatic Ockham’s razor. But when I built the hybrid model I found that the (implied) penalty term for <em>“adding one more continuous dimension for an MDS solution”</em> doesn’t seem to be commensurate with the (implied) penalty term for <em>“adding one more discrete feature”</em> and while I could get some decent solutions in some cases (the numbers example worked pretty well…) I never did find a general version that would “just work”.</p>
<p>I put it down to the fact that the priors <img src="https://latex.codecogs.com/png.latex?P(%5Ctheta%7C%5Cmathcal%7BM%7D)"> were kind of ad hoc… after all, I didn’t know what would make sense as a plausible prior that would render continuous things and discrete things commensurate with one another in a way that made sense for the psychological problems I wanted to solve. I assumed the right answer would come to me one day.</p>
<p>It hasn’t yet, but I’m still hoping it will.</p>
<p><br></p>
</section>
<section id="seeing-other-statistics-at-least-thats-what-i-said-i-was-doing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="seeing-other-statistics-at-least-thats-what-i-said-i-was-doing">Seeing other statistics (at least that’s what I said I was doing)</h2>
<blockquote class="blockquote">
<p>We lay on the bed there <br> Kissing just for practice <br> Could we please be objective? <br> ’Cause the other boys are queuing up behind us <br> &nbsp;&nbsp; – <a href="https://youtu.be/Gzfsx3HkBTk">Belle &amp; Sebastian</a></p>
</blockquote>
<p>At about this point in time, I became fascinated with some of Jay Myung and Mark Pitt’s other papers on alternative ways to do model selection. For instance, in <a href="https://doi.org/10.1037/0033-295X.109.3.472">2003</a> they advocated the use of model selection by minimum description length (MDL). The MDL approach to statistical inference comes out of algorithmic information theory and can be viewed as a stripped down form of Kolmogorov complexity (KC). In KC we would say something like this…</p>
<blockquote class="blockquote">
<p>The Kolmogorov complexity of a string S with respect to programming language L is the length (in bits) of the shortest program P that prints S and then halts.</p>
</blockquote>
<p>… so the idea would be to think of a model <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D"> as a program and use it as a tool to compress the data <img src="https://latex.codecogs.com/png.latex?d">. Whichever model compresses the data the most is the winner. Strictly speaking, KC is useless in real life because it’s uncomputable<sup>7</sup> but there are many ways of taking the idea and transforming it to something that you can use. The best known (I think?) is <a href="https://doi.org/10.1109/18.481776">Jorma Rissanen’s</a> stochastic complexity approach (borrowing from work by Shtarkov) but I’ve always had a soft spot for <a href="https://academic.oup.com/comjnl/article-abstract/42/4/270/558949">Wallace and Dowe’s</a> explicitly Bayesian formulation of the problem.</p>
<p>As you can probably tell, during the early 2000s I read a lot of statistics papers that I didn’t understand all that well.</p>
<p>What I did notice though is that many of these techniques end up constructing some version of the marginal likelihood <img src="https://latex.codecogs.com/png.latex?P(d%7C%5Cmathcal%7BM%7D)">. They all have different motivations and not all of them allow a clear probabilistic interpretation (Rissanen doesn’t endorse a Bayesian interpretation of MDL, for instance), but they have more in common with one another than I’d originally thought. I even started reading some <a href="https://doi.org/10.1073/pnas.170283897">information geometry</a> and found roughly the same thing. A large number of these model selection criteria can be viewed as series expansions of <img src="https://latex.codecogs.com/png.latex?%5Cln%20P(d%7C%5Cmathcal%7BM%7D)">, with “small” terms omitted (usually <img src="https://latex.codecogs.com/png.latex?O(1)">). Yay, I thought! This is fantastic. Particulars notwithstanding, there is a strong theoretical justification for basing my inferences on the marginal likelihood.</p>
<p>It didn’t take long for my enthusiasm to fade again. The first time I tried to use this for model selection in the wild (selecting between different retention functions in recall memory tasks) I broke it <a href="https://www.mitpressjournals.org/doi/10.1162/0899766041336378">pretty badly</a>. It turns out that <img src="https://latex.codecogs.com/png.latex?O(1)"> terms can be <em>very fucking large</em> in practice, and you can get all sorts of absurd results (e.g., a nested model that is judged to be more complex than the full one) when you use these model selection criteria with “small” (say, a mere 1000 or so observations) samples.</p>
<p>I expanded my dating pool further. I had an on again off again thing with Bayesian nonparametrics (<a href="http://dx.doi.org/10.1016/j.jmp.2005.11.006">here</a>, <a href="http://dx.doi.org/10.1162/neco.2008.04-07-504">here</a>, <a href="https://doi.org/10.1037/rev0000077">here</a>), I dated <a href="http://dx.doi.org/10.1016/j.jmp.2005.06.008">normalised maximum likelihood</a>, and various other things besides. They all let me down somehow. It turns out that NML is mostly useless in real life, Bayesian nonparametric models don’t converge to anything sensible in some situations, and so on.</p>
<p>I never dated a p-value though. I do have standards.</p>
<p><br></p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/taylor.jpg" class="img-fluid" alt="Photo of Taylor Swift in a bathtub full of money and jewels."></p>
</div>
</section>
<section id="what-problems-do-we-study" class="level2">
<h2 class="anchored" data-anchor-id="what-problems-do-we-study">What problems do we study?</h2>
<blockquote class="blockquote">
<p>But I got smarter, I got harder in the nick of time <br> Honey, I rose up from the dead, I do it all the time <br> I’ve got a list of names and yours is in red, underlined <br> &nbsp;&nbsp; – <a href="https://youtu.be/3tmd-ClpJxA">Taylor Swift</a></p>
</blockquote>
<p>Just lately I’ve been wondering how many of the practical problems I’ve encountered stem from the fact that almost no statistical problems worth caring about are <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-closed (this time around it’s <a href="https://twitter.com/dan_p_simpson/status/991621450837741569">Dan Simpson’s fault</a> I’m thinking about this, but it’s been a recurring theme in my thoughts for a long time). At the moment I’m reading <a href="https://projecteuclid.org/download/pdfview_1/euclid.ba/1378729923">this paper</a> by Clarke, Clarke and Yu (2013), and I’ll steal their words. The first paragraph of the paper starts with this</p>
<blockquote class="blockquote">
<p>Prediction problems naturally fall into three classes, namely M-closed, M-complete, and M-open, based on the properties of the data generator (DG) (Bernardo and Smith 2000). Briefly, M-closed problems are those where it is reasonable to assume that the true model is one of the models under consideration, i.e., the true model is actually on the model list (at least in the sense that error due to model mis-specification is negligible compared to any other source of error). This class of problems is comparatively simple and well studied.</p>
</blockquote>
<p>Ouch. That’s about 99% of the statistical methodology that I was taught (and see in the psychological literature) and they’ve discarded it as too simplistic to be bothered talking about. It’d hurt less if they weren’t entirely correct. Almost all of what we talk about in psychology frames the problem of inference as one of “choosing the true model”, and it’s implicit that one of the models is presumed to be correct.</p>
<p>This is never accurate in real life. We often hand wave this way by quoting George Box’s famous aphorism <em>all models are wrong but some are useful</em>, yet we are rarely explicit in psychology in saying what we mean by “useful”. At one point I tried formulating what I thought I meant: for many cognitive science experiments that are designed to be “operationalised” versions of a more complex real world situation, I think it makes little sense to bother making predictions about low-level features of the data, and a model is most useful if when makes the <a href="http://dx.doi.org/10.1037/0033-295X.113.1.57">correct a priori predictions about theoretically-relevant ordinal patterns in the data</a>. But that’s not a very generalisable criterion, it doesn’t apply in situations where you actually do have to care about all the features in the data, and so on. I’ve never seen anyone come up with anything that I found compelling either.</p>
<p>That’s the thing about stepping outside of the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-closed world… nothing really works the way it’s supposed to. In the most difficult case you have <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-open problems:</p>
<blockquote class="blockquote">
<p>M-open problems are those in which the DG does not admit a true model. The DG is so complex (in some sense) that there is no true model that we can even imagine. For instance, one can regard the Collected Works of William Shakespeare as a sequence of letters. Unarguably this data set had a DG (William Shakespeare), but it makes no sense to model the mechanism by which the data was generated. One might try to use the first n letters to predict the n + 1 letter and do better than merely guessing, but one should not expect such a predictor, or any model associated with it, to generate more great literature. The same point applies to the nucleotide sequence in a chromosome, the purchases of a consumer over time, and many other settings. In these cases, we are only able to compare different predictors without reference to a true model.</p>
</blockquote>
<p>Oh yes. <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-open problems are <em>nasty</em>. You have to find some sensible way to discuss what it means to make good prediction that doesn’t rely on any notion of “true models”, because there is no sense in which the data generating mechanism can possibly be mapped to anything that you or I would <em>ever</em> call a “model”. I suspect that this is part of the reason why some of the MDL people (e.g.&nbsp;Jorma Rissanen) <em>don’t</em> want to formulate their model selection procedures with reference to any notion of a “true model”. The moment you allow yourself the “crutch” of assuming that a true model exists, you’re left unable to justify any claims in an <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-open world. Clarke et al comment on that actually…</p>
<blockquote class="blockquote">
<p>From a log-loss point of view, the Shtarkov solution (Shtarkov 1987) has also been extensively studied in the M-open case, see Cesa-Bianchi and Lugosi (2006), but has not caught on partially because the conditions for it to exist are so narrow</p>
</blockquote>
<p>… where (assuming it’s the paper I’m thinking of) Shtarkov’s work is linked to Rissanen’s approach to MDL that some folks in psychology (such as myself, once upon a time!) had argued for. But it’s like Clarke et al say, this approach is basically useless in real life because there are so few scenarios where you can <em>do</em> anything with it.</p>
<p>On the other hand, there’s a sense in which the <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-open scenario above is more pessimistic than it needs to be. Not every statistical problem is as hard as generating new Shakespeare novels….</p>
<blockquote class="blockquote">
<p>By contrast, M-complete problems are those where the DG has a true model that can be imagined but is not identifiable in any closed form. Inability to write a model explicitly may arise because the model is too complicated or because its constituent pieces are not known. The key point for an M-complete problem is that it is plausible to assume that a true model - also called a “belief model” - exists because this enables its use in reasoning even if a prior cannot be meaningfully assigned in the usual way. For instance, if a true model exists a bias-variance decomposition can be developed, at least in principle, even when the true model is not explicitly known.</p>
</blockquote>
<p>I think this is where most of our practical problems in science lie. If we knew enough about a phenomenon to put us in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-closed world we wouldn’t bother to study it, and if we knew so little that we couldn’t even imagine a true model (putting us in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-open land) it would be foolish to try. So in practice we live in the land of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D">-complete inference problems. There are interesting results in this situation. I haven’t read much about this in a long time, but my recollection from earlier reading was that in this situation a Bayes factor selection procedure will asymptotically converge to the model <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BM%7D"> that is closest to the true distribution in Kullback-Leibler divergence.</p>
<p>I used to find this reassuring. I’m less sure now.</p>
<p><br></p>
</section>
<section id="its-the-little-things" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="its-the-little-things">It’s the little things</h2>
<blockquote class="blockquote">
<p>Oh, life is bigger <br> It’s bigger <br> Than you and you are not me <br> The lengths that I will go to <br> The distance in your eyes <br> Oh no, I’ve said too much <br> I set it up &nbsp;&nbsp; – <a href="https://youtu.be/xwtdhWltSIg">R.E.M.</a></p>
</blockquote>
<p>The worry I have with leaning so heavily on “convergence in KL terms” comes from a few sources. For one thing I’m starting to go beyond the limits of my own skill. You actually have to have a very good grasp of the theory to know what the hell this actually means, and I’m not sure I do. I’m a little unsure about what <em>practical</em> conclusions I should draw about a model if all I can say is that it is closer to the truth in the sense of a very specific information distance measure defined over distributions.</p>
<p>The impression I have had when working with KL divergence is that it really does seem to depend on every property of the distributions, but as a researcher I often don’t care about every little thing in the data. Worse, to the extent that Bayes factors specifically depend on the <em>prior</em> to specify the marginal distribution in question, I have this intuition that even modest mistakes in you specify the prior (especially the tails) could do very strange things. Looking back over the various papers I’ve written about in this post, I feel like it’s been a recurring theme that the details really matter. Just in this little reminiscence…</p>
<ul>
<li>When thinking about similarity modelling, I found stimulus features and stimulus dimensions don’t seem to have commensurate complexity as judged by the most sensible Bayesian method I could think of</li>
<li>When doing very simple memory modelling, the best approximations I knew of (Fisher information approximation to MDL) gave absurd predictions because of the weird structure of the models</li>
<li>In categorisation, when using “infinite dimensional” nonparametric Bayesian models … oh, don’t even get me started.</li>
</ul>
<p>… and the thing is <em>these issues have caused my inferences to misbehave every single time I have tried to automate them</em>.</p>
<p>In real world data analysis, nothing works the way it’s supposed to and I have grown deeply skeptical that <em>any</em> rule governed approach to automating statistical inference makes much sense.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/florence.jpg" class="img-fluid" alt="Photo of a woman lying dramatically on a bed"></p>
</div>
</section>
<section id="what-to-do" class="level2">
<h2 class="anchored" data-anchor-id="what-to-do">What to do?</h2>
<blockquote class="blockquote">
<p>’Cause I’m gonna be free and I’m gonna be fine <br> (Holding on for your call) <br> ’Cause I’m gonna be free and I’m gonna be fine <br> (Maybe not tonight) <br> &nbsp;&nbsp; – [Florence and the Machine)(https://youtu.be/zZr5Tid3Qw4)</p>
</blockquote>
<p>Honestly, I don’t know. I like Bayesian inference a great deal, and I still find Bayes factors useful in those circumstances where I (1) trust the prior, (2) understand the models and (3) have faith in the (either numerical or analytic) approximations used to estimate it. I don’t have a better alternative, and I’m certainly not going to countenance a return to using p-values<sup>8</sup>. More than anything else, the one thing I don’t want to see happen is to have the current revival off Bayesian methods in psychology ossify into something like what happened with p-values.</p>
<p>What I think happened there is not necessarily that p-values are inherently useless and that’s why our statistics went bad. Rather, it’s that introductory methods classes taught students that there was A RIGHT WAY TO DO THINGS and those students became professors and taught other students and eventually we ended up with an absurd dogs breakfast of an inference system that (I suspect) even Fisher or Neyman would have found ridiculous. If I’ve learned nothing else from my research on <a href="http://dx.doi.org/10.1111/cogs.12667">cultural evolution and iterated learning</a> it’s that a collection of perfectly-rational learners can in fact ratchet themselves into believing foolish things, and that it’s the agents with most extreme biases that tend to dominate how the system evolves.</p>
<p>Whatever we do with Bayesian methods, whatever role Bayes factors play, whether we use default or informed priors, the one thing I feel strongly about is this… we should try to avoid anything that resembles a prescriptive approach to inference that instructs scientists THIS IS HOW WE DO IT and instills in them the same fear of the Bayesian gods that I was once taught to have for the frequentist deities.</p>
<p>It doesn’t help anyone, and it makes science worse.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>lol↩︎</p></li>
<li id="fn2"><p>Throughout this post I will follow my usual tendency to ignore things like the difference between densities and probabilities, and I will absolutely <em>not</em> waste everyone’s time by introducing <img src="https://latex.codecogs.com/png.latex?%5Csigma">-algebras, because this is a blog post not a bloody measure theory textbook. If such things unnerve you too greatly, I refer you whichever section of <a href="https://books.google.com.au/books?hl=en&amp;lr=&amp;id=s5LHBgAAQBAJ&amp;oi=fnd&amp;pg=PR7&amp;dq=schervish+theory+of+statistics&amp;ots=qZHiGJ_sA5&amp;sig=-KkG3LxmWEFikss6L9PP1wC159E#v=onepage&amp;q=schervish%20theory%20of%20statistics&amp;f=false">Mark Schervish’s very excellent textbook</a> will allow you to feel love again.↩︎</p></li>
<li id="fn3"><p>Again… if you feel inclined to instruct me on the difference between <img src="https://latex.codecogs.com/png.latex?P(x%7C%5Ctheta)"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D(%5Ctheta%7Cx)">… don’t. Go take it up with Fisher’s ashes. He’s the one who tried to misuse the ordinary natural language meaning of the word “likelihood” by inappropriately attaching probabilistic connotations to a score function that frequentists are explicitly forbidden to interpret as a probability↩︎</p></li>
<li id="fn4"><p>No seriously. Go visit his ashes. Fisher retired to St Mark’s college in Adelaide, and his ashes are kept in St Peter’s Cathedral in North Adelaide, a short walk from the University. The staff there are very friendly and will gladly show you to them.↩︎</p></li>
<li id="fn5"><p>IF YOU EMAIL ME TO TALK ABOUT UNCOUNTABLY INFINITE SETS OR TRY TO DISCUSS LEBESGUE MEASURABLE FUNCTIONS IN MY PRESENCE I WILL HUNT YOU DOWN, CUT YOU INTO INFINITESMALLY THIN HORIZONTAL SLICES AND FEED THE SLICES TO MY CHILDREN.↩︎</p></li>
<li id="fn6"><p>Something about metric MDS rather than nonmetric MDS… don’t @ me↩︎</p></li>
<li id="fn7"><p>FOR REASONS↩︎</p></li>
<li id="fn8"><p>That’s not to say I think there is no role for orthodox inference, nor that controlling error rates is a thing we should just not think about anymore. I just don’t think that this is a sensible idea to build an entire theory of inference around↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {A Personal Essay on {Bayes} Factors},
  date = {2023-04-12},
  url = {https://blog.djnavarro.net/posts/2023-04-12_bayes-factors},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“A Personal Essay on Bayes
Factors.”</span> April 12, 2023. <a href="https://blog.djnavarro.net/posts/2023-04-12_bayes-factors">https://blog.djnavarro.net/posts/2023-04-12_bayes-factors</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Bayes</category>
  <guid>https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/index.html</guid>
  <pubDate>Tue, 11 Apr 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-04-12_bayes-factors/katy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The Metropolis-Hastings algorithm</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>This morning I received an email from a stranger, writing to say thank you for a document I wrote almost 13 years ago. It’s a weird feeling every time I get one of those,<sup>1</sup> but a pleasant one. This time around, the document in question was a <a href="https://compcogsci-3016.djnavarro.net/technote_metropolishastings.pdf">note on the Metropolis-Hastings algorithm</a> that I threw together in a rush for a computer science class I taught back in 2010.<sup>2</sup> While drinking my second coffee of the morning and feeling the usual sense of dread I feel when I know that today I have to put some effort into looking for a job, yet again, I arrived at an excellent procrastination strategy…</p>
<p>Why don’t I start rescuing some of the content that I wrote all those years ago and currently have hidden away in pdf files in the dark corners of the internet, and put them up on my blog? Okay sure it won’t get me a job, but it feels less demeaning than yet again trying to get tech company recruiters to believe that yes actually the middle aged lady with a psychology PhD does in fact know how something about statistics and does know how to code.</p>
<p>Anyway. Without further self-pity, here’s a quick primer on the <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm">Metropolis-Hastings algorithm</a>. The target audience for this is someone who has a little bit of probability theory, can write code in R (or similar), but doesn’t have any background in Markov chain Monte Carlo methods. It doesn’t dive deep into the mathematics – i.e., you won’t find any discussions of <a href="https://en.wikipedia.org/wiki/Detailed_balance">detailed balance</a>, <a href="https://en.wikipedia.org/wiki/Ergodicity">ergodicity</a>, and other things a statistics class would cover – but it does try to go deep enough to give a beginner an understanding of what the algorithm is doing.</p>
<p><br></p>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>The Metropolis-Hastings algorithm is perhaps the most popular example of a <a href="https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo">Markov chain Monte Carlo</a> (MCMC) method in statistics. The basic problem that it solves is to provide a method for sampling from some arbitrary probability distribution, which I’ll denote <img src="https://latex.codecogs.com/png.latex?p(x)">.<sup>3</sup> The idea is that in many cases, you know how to write out the equation for the probability <img src="https://latex.codecogs.com/png.latex?p(x)">, but you don’t know how to generate a random number from this distribution, <img src="https://latex.codecogs.com/png.latex?x%20%5Csim%20p(x)">. This is the situation where MCMC is handy. For example, suppose I’ve become interested – for reasons known but to the gods – in the probability distribution shown below:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The probability density function<sup>4</sup> <img src="https://latex.codecogs.com/png.latex?p(x)"> for this distribution is given by the following equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(x)%20=%20%5Cfrac%7B%5Cexp(-x%5E2)%20%5Cleft(2%20+%20%5Csin(5x)%20+%20%5Csin(2x)%5Cright)%7D%7B%5Cint_%7B-%5Cinfty%7D%5E%5Cinfty%20%5Cexp(-u%5E2)%20%5Cleft(2%20+%20%5Csin(5u)%20+%20%5Csin(2u)%5Cright)%20%5C%20du%7D%0A"></p>
<p>My problem is that I either don’t know <em>how</em> to solve the integral in the denominator, or I’m simply too lazy to try.<sup>5</sup> So this means in truth, I only know the distribution “up to some unknown constant”. That is, all I really know how to calculate is the numerator. Given this, a more realistic way to express my knowledge about the target distribution is captured by this equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(x)%20%5Cpropto%20%5Cexp(-x%5E2)%20%5Cleft(2%20+%20%5Csin(5x)%20+%20%5Csin(2x)%5Cright)%0A"> How can I generate samples from this distribution?</p>
<p><br></p>
</section>
<section id="the-metropolis-hastings-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="the-metropolis-hastings-algorithm">The Metropolis-Hastings algorithm</h2>
<p>The basic idea behind MCMC is very simple. The idea is to define a <a href="https://en.wikipedia.org/wiki/Markov_chain">Markov chain</a><sup>6</sup> over possible <img src="https://latex.codecogs.com/png.latex?x"> values, in such a way that the stationary distribution of the Markov chain is in fact <img src="https://latex.codecogs.com/png.latex?p(x)">. That is, what we’re going to do is use a Markov chain to generate a sequence of <img src="https://latex.codecogs.com/png.latex?x"> values, denoted <img src="https://latex.codecogs.com/png.latex?(x_0,%20x_1,%20x_2,%20%5Cldots,%20x_n)">, in such a way that as <img src="https://latex.codecogs.com/png.latex?n%20%5Crightarrow%20%5Cinfty">, we can guarantee that <img src="https://latex.codecogs.com/png.latex?x_n%20%5Csim%20p(x)">. There are many different ways of setting up a Markov chain that has this property. The Metropolis-Hastings algorithm is one of these.</p>
<p><br></p>
<section id="the-proposal-step" class="level3">
<h3 class="anchored" data-anchor-id="the-proposal-step">The proposal step</h3>
<p>Here’s how it works. Suppose that the current state of the Markov chain is <img src="https://latex.codecogs.com/png.latex?x_n">, and we want to generate <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D">. In the Metropolis-Hastings algorithm, the generation of <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D"> is a two-stage process.</p>
<p>The first stage is to generate a <em>candidate</em>, which we’ll denote <img src="https://latex.codecogs.com/png.latex?x%5E%E2%88%97">. The value of <img src="https://latex.codecogs.com/png.latex?x%5E%E2%88%97"> is generated from the proposal distribution that we already know how to sample from. We denote this proposal distribution <img src="https://latex.codecogs.com/png.latex?q(x%5E%E2%88%97%20%7C%20x_n)">. Notice that the distribution we sample from depends on the current state of the Markov chain, <img src="https://latex.codecogs.com/png.latex?x_n">. There are some technical constraints on what you can use as a proposal distribution, but for the most part it can be anything you like.<sup>7</sup> A very typical way to do this is to use a normal distribution centered on the current state <img src="https://latex.codecogs.com/png.latex?x_n">. More formally, we write this as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax%5E*%20%7C%20x_n%20%5Csim%20%5Cmbox%7BNormal%7D(x_n,%20%5Csigma%5E2)%0A"> for some standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma"> that we select in advance (more on this later!)</p>
<p><br></p>
</section>
<section id="the-accept-reject-step" class="level3">
<h3 class="anchored" data-anchor-id="the-accept-reject-step">The accept-reject step</h3>
<p>The second stage is the accept-reject step. Firstly, what you need to do is calculate the <em>acceptance probability</em>, denoted <img src="https://latex.codecogs.com/png.latex?A(x_n%20%5Crightarrow%20x_%E2%88%97)">, which is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA(x_n%20%5Crightarrow%20x_%E2%88%97)%20=%20%5Cmin%20%5Cleft(1,%20%5Cfrac%7Bp(x%5E*)%7D%7Bp(x%5En)%7D%20%5Ctimes%20%5Cfrac%7Bq(x_n%20%7C%20x%5E*)%7D%7Bq(x%5E*%20%7C%20x_n)%7D%20%5Cright)%0A"> There are two things to pay attention to here. Firstly, notice that the ratio <img src="https://latex.codecogs.com/png.latex?p(x%5E*)%20/%20p(x%5En)"> doesn’t depend on the normalising constant for the distribution. Or, to put it in a more helpful way, that integral in the first equation is completely irrelevant and we can ignore it. As a consequence, for our toy problem we can write this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bp(x%5E*)%7D%7Bp(x%5En)%7D%20=%20%5Cfrac%7B%5Cexp(-%7Bx%5E*%7D%5E2)%20%5Cleft(2%20+%20%5Csin(5x%5E*)%20+%20%5Csin(2x%5E*)%5Cright)%7D%7B%5Cexp(-%7Bx_n%7D%5E2)%20%5Cleft(2%20+%20%5Csin(5x_n)%20+%20%5Csin(2x_n)%5Cright)%7D%0A"> That’s a nice simple thing to compute with no need for any numerical integration or, gods forbid, solving the integral analytically.</p>
<p>The second thing to pay attention to is the behaviour of the other term, <img src="https://latex.codecogs.com/png.latex?q(x_n%20%7C%20x%5E*)%20/%20q(x%5E*%20%7C%20x_n)">. What this term does is correct for any biases that the proposal distribution might induce. In this expression, the denominator <img src="https://latex.codecogs.com/png.latex?q(x%5E%E2%88%97%20%7C%20x_n)"> describes the probability with which you’d choose <img src="https://latex.codecogs.com/png.latex?x%5E*"> as the candidate if the current state of the Markov chain is <img src="https://latex.codecogs.com/png.latex?x_n">. The numerator, however, describes the probability of a transition that goes the other way: that is, if the current state had actually been <img src="https://latex.codecogs.com/png.latex?x%5E%E2%88%97">, what is the probability that you would have generated <img src="https://latex.codecogs.com/png.latex?x%5En"> as the candidate value? If the proposal distribution is symmetric, then these two probabilities will turn out to be equal. For example, if the proposal distribution is normal, then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Aq(x%5E*%20%7C%20x_n)%20&amp;%20=%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%7D%20%5Csigma%7D%20%5Cexp%20%5Cleft(%20-%5Cfrac%7B1%7D%7B2%20%5Csigma%5E2%7D%20%5Cleft(x_n%20-%20x%5E*%5Cright)%5E2%20%5Cright)%20%5C%5C%0Aq(x_n%20%7C%20x%5E*)%20&amp;%20=%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%7D%20%5Csigma%7D%20%5Cexp%20%5Cleft(%20-%5Cfrac%7B1%7D%7B2%20%5Csigma%5E2%7D%20%5Cleft(x%5E*%20-%20x_n%20%5Cright)%5E2%20%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<p>Clearly, <img src="https://latex.codecogs.com/png.latex?q(x%5E*%20%7C%20x_n)%20=%20q(x_n%20%7C%20x%5E*)"> for all choices of <img src="https://latex.codecogs.com/png.latex?x_n"> and <img src="https://latex.codecogs.com/png.latex?x%5E*">, and as a consequence the ratio <img src="https://latex.codecogs.com/png.latex?q(x_n%20%7C%20x%5E*)%20/%20q(x%5E*%20%7C%20x_n)"> is always 1 in this case.</p>
<p>This special case of the Metropolis-Hastings algorithm, in which the proposal distribution is symmetric, is referred to as the <em>Metropolis algorithm</em>.</p>
<p>Okay. Having proposed the candidate <img src="https://latex.codecogs.com/png.latex?x%5E%E2%88%97"> and calculated the acceptance probability, <img src="https://latex.codecogs.com/png.latex?A(x_n%20%5Crightarrow%20x%5E%E2%88%97)">, we now either decide to “accept” the candidate and set <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x%5E%E2%88%97"> or we “reject” the candidate and set <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n">. To make this decision, we generate a uniformly distributed random number between 0 and 1, denoted <img src="https://latex.codecogs.com/png.latex?u">. Then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax_%7Bn+1%7D%20=%20%5Cleft%5C%7B%0A%5Cbegin%7Barray%7D%7Brl%7D%0Ax%5E*%20&amp;%20%5Cmbox%7B%20if%20%7D%20u%20%5Cleq%20A(x_n%20%5Crightarrow%20x%5E%E2%88%97)%20%5C%5C%0Ax_n%20&amp;%20%5Cmbox%7B%20otherwise%7D%0A%5Cend%7Barray%7D%0A%5Cright.%0A"> In essence, this is the entirety of the Metropolis-Hastings algorithm! True, there are quite a few technical issues that attach to this, and if you’re interested in using the algorithm for practical purposes I strongly encourage you to do some further reading to make sure you understand the traps in detail, but for now I’ll just give you some examples of things that work and things that don’t, to give you a bit of a feel for how it works in practice.</p>
<p><br></p>
</section>
</section>
<section id="implementing-the-sampler" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-sampler">Implementing the sampler</h2>
<p>Okay. That’s enough mathematics. Let’s have a look at some R code implementing the Metropolis-Hastings algorithm for the toy problem: can we write an R function that draws samples from the weird looking probability distribution I plotted at the start of this post?</p>
<p>To do this, I’ll define the sampler in terms of three functions. First, we have a <code>target()</code> function that calculates the probability of a given sample <code>x</code>, or – more precisely – calculates the numerator term in the equation describing the probability density:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x))</span>
<span id="cb1-3">}</span></code></pre></div>
</div>
<p>Estoy emocionada. 😐</p>
<p>Next we define a <code>metropolis_step()</code> function that takes some value <code>x</code> corresponding to the current state of the Markov chain, and a parameter <code>sigma</code> that describes the standard deviation of the proposal distribution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">metropolis_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, sigma) {</span>
<span id="cb2-2">  proposed_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma)</span>
<span id="cb2-3">  accept_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span>(proposed_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span>(x))</span>
<span id="cb2-4">  u <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(u <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> accept_prob) {</span>
<span id="cb2-6">    value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> proposed_x</span>
<span id="cb2-7">    accepted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb2-9">    value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb2-10">    accepted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-11">  }</span>
<span id="cb2-12">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accepted =</span> accepted)</span>
<span id="cb2-13">  out</span>
<span id="cb2-14">}</span></code></pre></div>
</div>
<p>Finally we can write a <code>metropolis_sampler()</code> function that runs the Metropolis algorithm for some number of steps:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">metropolis_sampler <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(initial_value, </span>
<span id="cb3-2">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb3-3">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb3-4">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">burnin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb3-5">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb3-6">  </span>
<span id="cb3-7">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb3-8">  current_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> initial_value</span>
<span id="cb3-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>burnin) {</span>
<span id="cb3-10">    out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_step</span>(current_state, sigma)</span>
<span id="cb3-11">    current_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value</span>
<span id="cb3-12">  }</span>
<span id="cb3-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>lag) {</span>
<span id="cb3-15">      out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_step</span>(current_state, sigma)</span>
<span id="cb3-16">      current_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value</span>
<span id="cb3-17">    }</span>
<span id="cb3-18">    results[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out</span>
<span id="cb3-19">  }</span>
<span id="cb3-20">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, results)</span>
<span id="cb3-21">  results</span>
<span id="cb3-22">}</span></code></pre></div>
</div>
<p>We have several arguments here. Three of them follow intuitively from the mathematical description I gave in the last section:</p>
<ul>
<li><code>initial_value</code> is the start point for the Markov chain</li>
<li><code>n</code> is the number of samples we want to draw from the target distribution</li>
<li><code>sigma</code> is the standard deviation of the normal distribution we use to propose candidate values at each step</li>
</ul>
<p>The other two are:</p>
<ul>
<li><code>burnin</code> is the number of iterations we run the sampler for before recording results<sup>8</sup></li>
<li><code>lag</code> is the number of iterations we run the sampler for between successive samples</li>
</ul>
<p>I’ll talk more about these input arguments later, but for now let’s take a look at what happens when we call our <code>metropolis_sampler()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb4-2">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_sampler</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-3">out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        value accepted
1   0.3143686    FALSE
2   0.3500985     TRUE
3   0.3500985    FALSE
4   0.3500985    FALSE
5   0.3500985    FALSE
6  -0.1665712     TRUE
7  -0.9428251     TRUE
8   0.4271852     TRUE
9   0.3168997     TRUE
10  0.3352164     TRUE</code></pre>
</div>
</div>
<p>As you can see it returns a data frame with <code>n</code> rows and two columns. The first column records the numeric <code>value</code> that was sampled, and <code>accepted</code> is a logical variable indicating whether this value arose from accepting the proposal (rather than rejecting it).</p>
<p><br></p>
<section id="the-effect-of-proposal-width" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-proposal-width">The effect of proposal width</h3>
<p>In practice when you’re implementing a Metropolis algorithm, the choice of proposal distribution matters a lot. If it’s too narrow, your sampler will have an extremely high acceptance rate on average, but it will move around extremely slowly. To use the technical term, it has a very low <em>mixing</em> rate. This distorts your estimate of the target distribution. However, if it’s too wide, the acceptance rate becomes too low and the chain gets stuck on specific values for long periods of time. This also distorts your estimate of the target distribution. Yes, technically, if you run your accursed sampler long enough despite it’s poor choice of proposal distribution it will eventually produce the right answer… but wouldn’t you prefer a sampler that gives you the right answer quickly rather than slowly?</p>
<p>This idea is illustrated in the plots below, in which I’ve run a Metropolis sampler with <code>n = 10000</code> on our toy problem three times. On the left, I’ve made a good choice of proposal distribution, setting <code>sigma = 1</code>. In the middle, my proposal distribution is too narrow (I set <code>sigma = .025</code> and it doesn’t work). On the right, my proposal distribution is too wide: it turns out that <code>sigma = 50</code> isn’t a good idea for this problem either:</p>
<div class="cell">
<details>
<summary>Source code for plots</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layout</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb6-4">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb6-5">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb6-7">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_sampler</span>(</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_value =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb6-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, </span>
<span id="cb6-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma[i]</span>
<span id="cb6-11">  )</span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(</span>
<span id="cb6-13">    out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb6-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb6-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample values: sigma ="</span>, sigma[i]),</span>
<span id="cb6-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb6-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span></span>
<span id="cb6-18">  )</span>
<span id="cb6-19">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb6-20">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>))</span>
<span id="cb6-21">  expected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(p) </span>
<span id="cb6-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(</span>
<span id="cb6-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb6-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> expected, </span>
<span id="cb6-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb6-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb6-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-28">  )</span>
<span id="cb6-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb6-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb6-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, </span>
<span id="cb6-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb6-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb6-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb6-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span></span>
<span id="cb6-36">  )</span>
<span id="cb6-37">}</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The way to read these plots is as follows: for all three values of <code>sigma</code>, we have two plots. The top one shows a histogram of the samples values obtained using the Metropolis sampler (that’s the black bars). Superimposed on this is a red line showing the distribution of values you’d expect to obtain when sampling from the true distribution. The lower panel plots the Markov chain itself: the sequence of generated values.<sup>9</sup></p>
<p>In the leftmost plots, we see what happens when we choose a good proposal distribution: the chain shown in the lower panel moves rapidly across the whole distribution, without getting stuck in any one place. In the far right panel, we see what happens when the proposal distribution is too wide: the chain gets stuck in one spot for long periods of time. It does manage to make big jumps, covering the whole range, but because the acceptance rate is so low that the distribution of samples is highly irregular. Finally, in the middle panel, if we set the proposal distribution to be too narrow, the acceptance rate is very high so the chain doesn’t get stuck in any one spot, but it doesn’t cover a very wide range. This simple example should give you an intuition for why you need to “play around” with the choice of proposal distribution. A good proposal distribution can make a huge difference!<sup>10</sup></p>
<p><br></p>
</section>
<section id="the-role-of-the-burn-in-period" class="level3">
<h3 class="anchored" data-anchor-id="the-role-of-the-burn-in-period">The role of the burn-in period</h3>
<p>Up to this point I haven’t really explained what the <code>burnin</code> and <code>lag</code> parameters are there for. To be honest I don’t plan to go into details, but here’s the basic idea. First, let’s think about the burn-in issue. Suppose you started the sampler at a very bad location… say <code>initial_value = -3</code>, and – just so that we can exaggerate the problem – we’ll use a proposal distribution that is too narrow, say <code>sigma = .1</code>. The image below shows three runs of this sampler:</p>
<div class="cell">
<details>
<summary>Source code for plots</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layout</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb7-4">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb7-6">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_sampler</span>(</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_value =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, </span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-10">  )</span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(</span>
<span id="cb7-12">    out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb7-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb7-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb7-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb7-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span></span>
<span id="cb7-17">  )</span>
<span id="cb7-18">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb7-19">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>))</span>
<span id="cb7-20">  expected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(p) </span>
<span id="cb7-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(</span>
<span id="cb7-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb7-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> expected, </span>
<span id="cb7-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb7-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb7-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-27">  )</span>
<span id="cb7-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb7-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb7-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, </span>
<span id="cb7-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb7-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb7-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb7-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span></span>
<span id="cb7-35">  )</span>
<span id="cb7-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>)</span>
<span id="cb7-37">}</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>As you can see, the sampler spends the first 200 or so iterations slowly moving rightwards towards the main body of the distribution. Once it gets there, the samples start to look okay, but notice that the histograms are biased towards the left (i.e., towards the bad start location). A simple way to fix this problem is to let the algorithm run for a while before starting to collect actual samples. The length of time that you spend doing this is called the <em>burn in period</em>.</p>
<p>To illustrate how it helps, the figure below shows what would have happened if I’d used a burn in period of 200 iterations for the same sampler:</p>
<div class="cell">
<details>
<summary>Source code for plots</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layout</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb8-4">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb8-6">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_sampler</span>(</span>
<span id="cb8-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_value =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">burnin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,</span>
<span id="cb8-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, </span>
<span id="cb8-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-11">  )</span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(</span>
<span id="cb8-13">    out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb8-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb8-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb8-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb8-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span></span>
<span id="cb8-18">  )</span>
<span id="cb8-19">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb8-20">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>))</span>
<span id="cb8-21">  expected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(p) </span>
<span id="cb8-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(</span>
<span id="cb8-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb8-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> expected, </span>
<span id="cb8-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb8-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb8-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-28">  )</span>
<span id="cb8-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb8-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb8-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, </span>
<span id="cb8-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb8-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb8-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb8-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span></span>
<span id="cb8-36">  )</span>
<span id="cb8-37">}</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>It’s still not ideal – largely because we don’t have many samples, we haven’t set a <code>lag</code>, and the value of <code>sigma</code> isn’t very well chosen – but you can see that the bias caused by the poor choice of starting value has disappeared.</p>
<p><br></p>
</section>
<section id="the-role-of-the-lag-parameter" class="level3">
<h3 class="anchored" data-anchor-id="the-role-of-the-lag-parameter">The role of the lag parameter</h3>
<p>Finally, I’ll mention in passing the role played by the <code>lag</code> parameter.<sup>11</sup> In some situations you can be forced into using a proposal distribution that has a very low acceptance rate. When that happens, you’re left with an awkward Markov chain that gets stuck in one location for long periods of time. One thing that people often do in that situation is allow several iterations of the sampler to elapse in between successive samples. This is the <code>lag</code> between samples. The effect of this is illustrated in below, which shows the behaviour of a sampler with a very wide proposal distribution (<code>sigma = 50</code>) with <code>n = 1000</code> samples drawn, at <code>lag = 0</code> (left), <code>lag = 10</code> (middle) and <code>lag = 100</code> (right).</p>
<div class="cell">
<details>
<summary>Source code for plots</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layout</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb9-4">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb9-5">lag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb9-7">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metropolis_sampler</span>(</span>
<span id="cb9-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb9-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> lag[i],</span>
<span id="cb9-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, </span>
<span id="cb9-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb9-12">  )</span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(</span>
<span id="cb9-14">    out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb9-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag:"</span>, lag[i]),</span>
<span id="cb9-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb9-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span></span>
<span id="cb9-19">  )</span>
<span id="cb9-20">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb9-21">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>))</span>
<span id="cb9-22">  expected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(p) </span>
<span id="cb9-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(</span>
<span id="cb9-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb9-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> expected, </span>
<span id="cb9-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb9-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb9-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb9-29">  )</span>
<span id="cb9-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb9-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, </span>
<span id="cb9-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, </span>
<span id="cb9-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb9-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb9-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value, x"</span>,</span>
<span id="cb9-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span></span>
<span id="cb9-37">  )</span>
<span id="cb9-38">}</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Formally speaking, the thing we’re trying to do here by increasing <code>lag</code> is reduce the <a href="https://en.wikipedia.org/wiki/Autocorrelation">autocorrelation</a> between successive samples in our chain. In an ideal world we want our sampled values to be <em>independent</em> samples from the target distribution <img src="https://latex.codecogs.com/png.latex?p(x)">. The more our samples are correlated with each other, the more potential there is for the histogram of sampled values to depart systematically from the target distribution. Introducing a lag between successive samples is a simple way to achieve this.</p>
<p><br></p>
</section>
</section>
<section id="a-word-of-warning" class="level2">
<h2 class="anchored" data-anchor-id="a-word-of-warning">A word of warning</h2>
<p>The discussion in this post is <em>heavily</em> oversimplified. It doesn’t talk at all about the conditions required to make Metropolis sampling work, it doesn’t talk about diagnostics, and it certainly doesn’t talk about what happens when we move this into higher dimensional problems. I haven’t made any attempt to implement this efficiently, either: there’s little point in me doing that when there are already many very efficient tools already in existence. My goal when I wrote this was so that my class could have an example that was simple enough that they could implement it themselves and get a sense of what MCMC algorithms do. At one point I had this idea that I’d gradually expand on these materials so that students could work their way up from introductory materials like this to more realistic examples, but I never really found the time to do that. Maybe one day!</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Bizarrely, this actually happens to me a lot. It’s totally surreal.↩︎</p></li>
<li id="fn2"><p>Another surreal experience that I’ve had quite a bit lately is getting rejected from data science jobs because I don’t have a computer science degree and my qualifications are technically in psychology. Apparently I’m considered skilled enough to <em>teach</em> computational statistics to university computer science students, but still considered less skilled at those tools than the students that I taught? I mean, it’s either that or tech company recruiters don’t actually read the résumés that they get sent… but that couldn’t possibly be true, right? Efficient market hypothesis and all that…↩︎</p></li>
<li id="fn3"><p>Okay. So, I just know that a serious statistician will read this at some point, and – from bitter experience – I’ve learned that when a lady person writes about mathematics and is unclear on even the smallest thing her credibility is immediately subject to question. So, in an attempt to forestall any misapprehensions, I most certainly understand the difference between a density function and a distribution function, and equally I know that it is conventional to use lower case to refer to densities and upper case to refer to distributions and probability mass functions. However, I wrote this note for undergraduate computer science students, and accordingly I chose to keep my notation simple, even if it is a little imprecise.↩︎</p></li>
<li id="fn4"><p>Some asides: my experience teaching this class is that it’s quite common for people new to statistics to struggle with the concept of <a href="https://en.wikipedia.org/wiki/Probability_density_function">probability density</a>. It’s not super important for the purposes of this post, and to a first approximation it’s totally okay to think of <img src="https://latex.codecogs.com/png.latex?p(x)"> as “the probability of observing <img src="https://latex.codecogs.com/png.latex?x"> (sort of)”. It is of course the case that the difference between a pdf, a pmf, and a cdf matters when you start doing mathematical statistics, but I would never be so cruel as to inflict that stuff on my undergraduate computer science students! Not once did refer to sigma algebras in my undergrad teaching, honest. Though, looking back, I did once inflict Kolmogorov complexity on a class. It was… not a good decision.↩︎</p></li>
<li id="fn5"><p>It’s worth mentioning that, at this point in the class my students had all been shown several examples of the <a href="https://en.wikipedia.org/wiki/Curse_of_dimensionality">curse of dimensionality</a> problem. So even though yes, of course it’s easy to solve this problem in one-dimension, they were all acutely aware that using brute force numerical integration methods to compute the denominator isn’t going to work we started trying to do something more realistic than my toy example.↩︎</p></li>
<li id="fn6"><p>At this point in the class students had most certainly encountered Markov chains!↩︎</p></li>
<li id="fn7"><p>That said, it’s worth mentioning one important property of the proposal distribution: the sampler won’t work if there are some values of <img src="https://latex.codecogs.com/png.latex?x"> that never get proposed!↩︎</p></li>
<li id="fn8"><p>The “burn in” period also goes by the name “warm up” period.↩︎</p></li>
<li id="fn9"><p>This is usually referred to as a “trace plot”. Eyeballing the trace plot is a useful thing to do when examining the behaviour of your MCMC algorithm, but beware… it is a very crude method. The devil is very much in the details here.↩︎</p></li>
<li id="fn10"><p>At this point she asks herself… does she want to talk about methods for automatically choosing a good proposal? No.&nbsp;No she does not.↩︎</p></li>
<li id="fn11"><p>This is often referred to as the “thinning” rate. ↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {The {Metropolis-Hastings} Algorithm},
  date = {2023-04-12},
  url = {https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“The Metropolis-Hastings
Algorithm.”</span> April 12, 2023. <a href="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings">https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>MCMC</category>
  <guid>https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/index.html</guid>
  <pubDate>Tue, 11 Apr 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-04-12_metropolis-hastings/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to run R code in the browser with webR</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-04-09_webr/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A little over a month ago, the tidyverse blog announced that <a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/">the 0.1 version of webR had been released</a>, opening up the possibility of running R code client side within a browser. To quote from the announcement,</p>
<blockquote class="blockquote">
<p>By compiling R to WebAssembly a user can visit a website and run R code directly within the web browser, without R installed on their device or a supporting computational R server. All that is required is a normal web server, including the type of cloud hosting service provided by Github Pages or Netlify.</p>
</blockquote>
<p>This is, to put it mildly, extremely cool, and unsurprisingly there was quite a bit of enthusiasm for it on Mastodon.<sup>1</sup> And so, now that I find myself with an unfortunate amount of free time on my hands, I decided to play around with it – just for fun – to see if I could get a better sense of how it works.</p>
<p>I haven’t dived very deep into webR yet, but I managed to get far enough to build a simple cellular automaton simulation using webR, and host it with Netlify at <a href="https://webr-automata.djnavarro.net/">webr-automata.djnavarro.net</a>.<sup>2</sup> If you visit the site, you’ll first see some text asking you to wait for webR to load, and then a text-based grid with cells coloured in different shades of grey. Over time, the cells change colours and the boundaries between different colour blocks tend to become more coherent, as shown in the sequence of images (time runs from left to right) below:</p>
<div class="column-screen-inset">
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-04-09_webr/automaton1.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-04-09_webr/automaton2.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-04-09_webr/automaton3.png" class="img-fluid"></p>
</div>
</div>
</div>
</div>
<p>If you let the simulation run long enough, eventually one colour comes to dominate the entire grid.<sup>3</sup> It’s not the most exciting or artistic code I’ve ever written, but I have to confess I find it oddly soothing to watch.</p>
<section id="some-background" class="level2">
<h2 class="anchored" data-anchor-id="some-background">Some background</h2>
<p>Before diving into the code, it’s probably a good idea to say a little bit about how webR works. If you’re at all like Danielle-from-a-month-ago, you might be approaching this with a very simple mental model. Normally when we run R code, we’re using a copy of the R interpreter that has been installed on a local machine. The R code chunks on this quarto blog are all executed locally, for example: I have a copy of R installed on my laptop, the code is run using this copy of R, and the only things that get pushed up to my website are the HTML documents that quarto creates. None of the R code is executed within the browser. Even when we shift to something fancier like a <a href="https://shiny.rstudio.com/">Shiny app</a> or <a href="https://posit.cloud/">Posit Cloud</a>, the browser does not execute R code: somewhere there is a server that has R installed, and the computational work is done using that R installation, outside of the browser. The reason for this is awfully simple: browsers don’t ship with a copy of R, so they can’t execute R code! 😢</p>
<p>With that as your mental model, the concept behind webR – in which the browser really does execute R code – feels like dark magic. How can this be?</p>
<p>The answer to this question is, to reduce it to two words, <a href="https://webassembly.org/">web assembly</a>. I’d been vaguely aware of web assembly for a little while, but until webR came into being I hadn’t paid much attention to it. The underlying idea, as described on the website, is as follows:</p>
<blockquote class="blockquote">
<p>WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</p>
</blockquote>
<p>Sounds fancy, right? Again, if you’re like me, there’s a part of your brain that just shuts down when reading this description. Okay sure, I’ve written code in compiled languages like C, C++, and Rust, so I have a pretty decent sense of what “binary instruction format” refers to… I mean, if you’re compiling your source code to an executable binary file that contains the instructions that a computer will execute then – obviously – the machine needs to understand those binary instructions. Duh. But wtf is a “stack-based virtual machine” and what does it mean to have a “portable compilation target”, and why does that mean I can now write R code for the web?????</p>
<p>Hm.</p>
<p>Okay, I’ll be honest: I don’t really understand the low-level details. But also, I don’t care about them either. What I do care about are the following facts:</p>
<ul>
<li>Web assembly is a binary format you can compile source code <em>to</em>.</li>
<li>There are existing compilers like <a href="https://emscripten.org/">emscripten</a> that create web assembly binaries from C and C++</li>
<li>Modern browsers ship with web assembly in the same way they ship with javascript: the browser <em>can</em> execute a wasm binary</li>
<li>The R interpreter is written in C</li>
</ul>
<p>When you put these things together, you can see how webR might (and indeed does) work. It’s entirely possible to take the source code for the R interpreter and use emscripten to compile R itself to web assembly. If there were a wasm version of R, your web page could import it in much the same way that it imports a javascript script, and then that “wasm-R” binary could execute an R script.</p>
<p>What a fabulous idea. Someone should do that. Oh wait… George Stagg already did. That’s precisely what <a href="https://docs.r-wasm.org/webr/latest/">webR</a> does. 🤦‍♀️</p>
<p>Of course, if you spend a bit of time thinking about the practicalities of making this work, you start to realise there are some tricky things to manage. How exactly would wasm-R read an R script? How would it interact with the <a href="https://en.wikipedia.org/wiki/Document_Object_Model">DOM</a>?<sup>4</sup> When you’re writing code for the web using javascript, this isn’t an issue: you just write code like this…</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the_id_for_a_div"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_code_here"</span></span></code></pre></div>
<p>…or whatever. Javascript has a native way of interacting with HTML. Web assembly doesn’t have that, and so the web assembly version of R inherits this limitation. As a consequence, we have to use javascript as an intermediary. Therein lies a lot of the magic. If you dig into the documentation for webR, what you notice is that the bulk of it is devoted to describing APIs that let webR and javascript interact with each other. It has to be that way if we want a web assembly version of R to have the ability to modify the state of the web page!</p>
<p>Or, to put it another way, if you’re an R developer who wants to write webR code, you’re also going to have to write some javascript that controls the interactions between your (webR interpreted) R code and the HTML document. And, because code execution on the web has a variety of security risks that browsers try hard to mitigate, you might guess that you’re going to have a lot of finicky details to manage in order to get your code to run without the browser screaming at you.</p>
<p>So in practice, a lot of what you need to learn if you want to jump from “localR” to webR is going to relate to those issues. It makes sense when you look at it in these terms, and feels kind of obvious in hindsight, but it wasn’t until I started trying to write webR code that I realised that this is how it works.</p>
</section>
<section id="making-a-plan" class="level2">
<h2 class="anchored" data-anchor-id="making-a-plan">Making a plan</h2>
<p>Okay, that’s enough background. Let’s start building something that tries to make these ideas a bit more concrete. To do that we’ll need to write a simple R application of some kind. If you know anything about me at all, you’d guess (correctly) that the applications I like to make for fun tend to be artistic in nature. I can’t help it… I like creating pretty visuals with R. Unfortunately, this is one of the trickier things to do with webR in its current state of development. It is possible, of course: if you take a look at the <a href="https://webr.r-wasm.org/latest/">webR REPL</a> you’ll see that the webpage has an HTML canvas to which R graphics can be drawn. That’s super cool, but I’m certainly not going to <em>start</em> by trying to implement something like that myself. Instead, I’ll do something simpler: I’ll write an R function that takes text input and produces text output. Then, I’ll do something sneaky and display that text in a way that looks like a picture.</p>
<p>Basically, it’s ASCII art. I’m going to make ASCII art, but because its the 21st century I’ll do it with <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a> characters rather than literally using ASCII.</p>
</section>
<section id="the-r-code" class="level2">
<h2 class="anchored" data-anchor-id="the-r-code">The R code</h2>
<p>I’ll start by showing the R code. The site contains a script called <code>automaton.R</code> and it defines a function called <code>automaton()</code> that takes a single character string as input, and returns a modified string as output. The string is used as the data to define a two dimensional matrix, with one character per cell, and on each iteration of the simulation, one character is updated by copying the value of one of its neighbours in the grid. Here’s the code:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>automaton.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">automaton <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linebreak =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;br&gt;"</span>,</span>
<span id="cb2-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb2-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb2-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb2-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"░"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"▒"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"▓"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"█"</span>)) {</span>
<span id="cb2-7"></span>
<span id="cb2-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create random string if none is given</span></span>
<span id="cb2-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(str)) {</span>
<span id="cb2-10">    str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(symbols, n_rows <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_cols, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-11">    str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(str, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-12">  }</span>
<span id="cb2-13"></span>
<span id="cb2-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make matrix from (possibly break-delimited) string</span></span>
<span id="cb2-15">  str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(</span>
<span id="cb2-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> linebreak,</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> str,</span>
<span id="cb2-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-20">  )</span>
<span id="cb2-21">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb2-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(str, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]],</span>
<span id="cb2-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> n_rows,</span>
<span id="cb2-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> n_cols,</span>
<span id="cb2-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-26">  )</span>
<span id="cb2-27"></span>
<span id="cb2-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simple automaton</span></span>
<span id="cb2-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) {</span>
<span id="cb2-30">    </span>
<span id="cb2-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># choose an interior cell in the grid</span></span>
<span id="cb2-32">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_rows <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-33">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_cols <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-34">    </span>
<span id="cb2-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># choose one of its neighbours (sort of)</span></span>
<span id="cb2-36">    h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-37">    v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-38">    </span>
<span id="cb2-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy the original cell value to the neighbour cell</span></span>
<span id="cb2-40">    dat[r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> v, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> h] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat[r, c]</span>
<span id="cb2-41">  }</span>
<span id="cb2-42"></span>
<span id="cb2-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert matrix to string and return</span></span>
<span id="cb2-44">  str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-45">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_rows) {</span>
<span id="cb2-46">    row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(dat[i, ], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-47">    str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(str, row, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> linebreak)</span>
<span id="cb2-48">  }</span>
<span id="cb2-49">  str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(str, linebreak, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-50">  str</span>
<span id="cb2-51">}</span></code></pre></div>
</div>
</div>
<p>Now, for the purposes of this post I’m assuming you’re already pretty familiar with writing R code, and I’ve deliberately written this function in a way that doesn’t require a lot of explanation for an R user. It’s all written in base R, I’m not using any fancy packages, and I haven’t made any efforts to make it run quickly. I don’t want any complexity on the R side: all I want for this post is to have some R code that works.</p>
<p>Here’s what it does:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linebreak =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, </span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb3-6">)</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(str)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
█▒▒▒▒▒█▒░░░░░▓▓▓░░░░░░░░░░░░░░█░██████▒██████████████▓███▓▓▓
▒▒▒▒▒▒▒▒░▒▓░░▓▓░░░░░░░░░░░░░░░░█░░███▒███████████░░██████▓▓▓
█▒▒▒▒▒▒▒░░▓▓▓▓▓░░░░░░░░░░░░░░░░░░███▒████████████████▓▓▓▓▓▓▓
█▒▒▒█▒▒▒▒░▒▓▓▓▓░░░░░░░░░░░░░░░░░████▒▒████████████████▓▓▓█▓▓
██▒▒███▒▒▒▒▓▒▓░▒░░░░░░░░░░░░░░░░█████▒▒████████████░░█░▓▓▓██
▒██▒▒▒▒██▒▓▓▒▓▓▓▒▒░░░░░▒░░░░░█░░░███▒▒▒████████████░░░░▓▓███
▒▒▒▒▒▒▒▒▒▓▓▒▓▓▒▒▒▒▓░░░░░░░░░░█░█████▒▒▒████████████░░█░████░
▒▒▒▒▒▒▒▒▒▒▓▒▓▒▓▒▒▓▒░░░▒░░░░▒▒█░███████▒██████▒▒████░░██████░
▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒░▓▓░▒▒▒▒░██░████████████▒██▒███████░░░░█░█
▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒█▓▓█▒▒░▒▒▒██░░███████████▒▒▒█▒█▒█▒████░█░██
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▓████░██▒▒██░░░██▒███████████▒▒███████░██░
▒▒▒▒▒▒▒▓▒▓▓▒░▒▒▒▒▓░░░█░░█▓▓▓░██░░░▒▒▒█▒███▒█▓█████████░░█░█░
▒▒▒▒▒▒▒▒▓▒▒▒▒░░▒▓▒░░░░░░░▓▓▓████▓▓▒▒▒▒▒██▒▒▓▒▒▒▒████░░░░░███
▒▒▒▒▒▒▒▒▓▒▒░▒▒░░░▓░░░░░░▓▓░▓█████▓▓▓▒▒█▒█▒▓▒▒▒▒▒▒█████░░░░█░
▒▒▒▒▒▒▒▒▒░▒▓▒▒▒░░░▒░█░░░░░█░▓████▓▓▓▓▓█▒▒▓▓▒▓░░▒▒▒█▒███░░░░░
▒▒▒▒▒▒▒▒▒░░▒▒▒▒░▒░▒▒▒░░░░██░░░░░▓▓▓▓▓████▒▒▒▒▒░▒▒▒▒▒██░░░░░░
▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░█▒░░░░░░░░░░░░▓▓▓▓█▓█▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░
▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░█░░░░░░░░░░░░░▓▓▓▓▓▓▓▓██▒▒▒▒▒▒▒▒▒▒▒▒░░░░░█░
▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░█░░░░░░░░░░░░░▓▓▓▓▓▓██▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░█
▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░█░█▓▓▓▓▓▓▓██▒▒▒▒▒▒▒▒▒▓▒▒░░░████</code></pre>
</div>
</div>
<p>The output here doesn’t look as pretty as the pictures shown at the start of this post, but that’s mostly because the CSS styling for this blog creates white space between lines. On the <a href="https://webr-automata.djnavarro.net/">webr-automata.djnavarro.net</a> site there’s nothing like that so all that white space disappears and the output looks like a shaded grid.</p>
<p>Anyway, the key thing here is that on the website I have this code saved to an R script called <code>automaton.R</code>, and it is this script that webR will need to work with.</p>
</section>
<section id="the-html" class="level2">
<h2 class="anchored" data-anchor-id="the-html">The HTML</h2>
<p>The next step in the process is to create a webpage. Or, more precisely, to write an HTML document. I’m going to keep this part extremely simple. The site has an <code>index.html</code> file that only does two things: it creates an div called “grid” that we can modify using javascript, and imports a script called <code>webr-app.js</code> that takes care of any such modifications:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>index.html</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE </span>html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;html</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">lang</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;head&gt;</span></span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;meta</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">charset</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;title&gt;</span>Text Textures<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/title&gt;</span></span>
<span id="cb5-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/head&gt;</span></span>
<span id="cb5-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;body&gt;</span></span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;div</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grid"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>webR is starting, please wait...<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/div&gt;</span></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;script</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">src</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./webr-app.js"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;&lt;/script&gt;</span></span>
<span id="cb5-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/body&gt;</span></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/html&gt;</span></span></code></pre></div>
</div>
</div>
<p>This HTML document provides the skeleton for the webpage, and the <code>webr-app.js</code> script will act as the intermediary between my R code and the HTML document.</p>
</section>
<section id="the-javascript" class="level2">
<h2 class="anchored" data-anchor-id="the-javascript">The Javascript</h2>
<p>Now comes the fun part.<sup>5</sup> I need to write some javascript that:</p>
<ul>
<li>Imports webR itself so I can execute R code</li>
<li>Reads my R script from the <code>automaton.R</code> file</li>
<li>Uses webR to call the <code>automaton()</code> R function defined in the file</li>
<li>Updates the state of the HTML document using the output of <code>automaton()</code></li>
</ul>
<p>How do I do this? As much as I love a good murder mystery, I don’t think the mystery novel format is ideal when writing technical documents, so let’s start by revealing the ending. Here’s the complete source code for <code>webr-app.js</code>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>webr-app.js</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// import the webr module and then run the code</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://webr.r-wasm.org/latest/webr.mjs'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> ({WebR}) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-3"></span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the HTML element showing the grid</span></span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grid"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6"></span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wait for the webR session to start</span></span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> webr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebR</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// read the script as a string, and evaluate it in R</span></span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> automaton <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automaton.R'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalR</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14"></span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initialise the state of the grid</span></span>
<span id="cb6-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalR</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automaton()'</span>)</span>
<span id="cb6-17">    grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toJs</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18"></span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// function to update the state of the grid</span></span>
<span id="cb6-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid_update</span>() {</span>
<span id="cb6-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">objs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">globalEnv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'str'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span>)</span>
<span id="cb6-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalR</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automaton(str)'</span>)</span>
<span id="cb6-23">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toJs</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-24">    }</span>
<span id="cb6-25"></span>
<span id="cb6-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// repeatedly call the update function</span></span>
<span id="cb6-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb6-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid_update</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-29">    }</span>
<span id="cb6-30">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
</div>
<p>If you’re fluent in javascript you can probably look at this and immediately work out what it does, but not every R user has had the (mis)fortune to work extensively in javascript, so I’ll be kind and try to unpack it a bit! At a high level, this code has the following structure:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://webr.r-wasm.org/latest/webr.mjs'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> ({WebR}) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb7-2"></span>
<span id="cb7-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// use the WebR object to do a bunch of stuff</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>For an R user some of this is a little opaque if you don’t have the javascript concept of a <a href="https://masteringjs.io/tutorials/fundamentals/thenable">thenable</a>, but it’s not too hard to see the intent. The browser is first asked to download webR from the specified URL, and then once this operation has finished, it proceeds to execute the code that follows. More precisely, the <code>.then()</code> method is called once the promise returned by the previous method resolves, and it executes whatever function it is passed. In this case the code uses the <a href="https://www.w3schools.com/Js/js_arrow_function.asp"><code>=&gt;</code> notation</a> to define an anonymous function that takes the <code>WebR</code> object – the interface to webR – as an input argument. So now let’s take a look at what happens when this function is called.</p>
<p>The code starts simple. The first thing it does is define a javascript variable <code>grid</code> that refers to the HTML element that we want our R code to manipulate:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grid"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Next, we start the R session:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> webr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebR</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>The <code>const</code> and <code>new</code> keywords aren’t interesting: <code>new</code> just means we’re creating a new instance from WebR, and <code>const</code> means it’s a constant. We aren’t going to modify the <code>webr</code> object itself. What we <em>are</em> going to do, however, is use it to initialise a new R session. That’s what <code>webr.init()</code> does. The <code>await</code> keyword is used to tell javascript to wait for this code to finish executing before starting the next instruction. That’s important in javascript because – unlike R – a lot of javascript code runs <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous">asynchronously</a>. Javascript is perfectly happy to start a function running (returning a promise object) and moving onto the next line of code without waiting for that function to finish. When calling asynchronous functions, javascript doesn’t wait for the “promise” to resolve unless you explicitly tell it to using the <code>await</code> keyword. In this case, we definitely don’t want to try executing R code until we actually have an R session, so I’ve used <code>await</code> to tell javascript to wait until we have one.</p>
<p>The next step in the process is to have javascript read the source code from the <code>automaton.R</code> file as a string, and then pass that to webr to evaluate. The code below does this:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> automaton <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automaton.R'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalR</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Here, the javascript <code>fetch()</code> function takes care of the file read operation, and the <code>webr.evalR()</code> function passes the code to R for evaluation. Once this code finishes, the R session will have the <code>automaton()</code> function defined in the global workspace.</p>
<p>Now that the R session has access to the <code>automaton()</code> function, we can again use <code>webr.evalR()</code> to call this function. If you look back to the way I defined the <code>automaton()</code> function earlier in the post, you’ll notice that if we call it without passing it a string as input, it will create a random string to use as the starting point for the cellular automaton. So that’s what we do in the first line of this snippet:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalR</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automaton()'</span>)</span>
<span id="cb11-2">grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toJs</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>The second line in this javascript takes the string that the <code>automaton()</code> R function outputs, converts it to a javascript string (that’s what the <code>str.toJs()</code> bit does), and then modifies the HTML document (specifically the <code>grid</code> element defined in the first line of javascript) so that the text displayed on the page corresponds to the string that the R function produced.</p>
<p>The rest of the javascript code is essentially the same trick repeated over and over ad infinitum:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// function to update the state of the grid</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid_update</span>() {</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">objs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">globalEnv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'str'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span>)</span>
<span id="cb12-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalR</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automaton(str)'</span>)</span>
<span id="cb12-5">    grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toJs</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6">}</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// repeatedly call the update function</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid_update</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-11">}</span></code></pre></div>
<p>What I’ve done here is define a javascript function <code>grid_update()</code> that does three things:</p>
<ul>
<li>It reads the string currently displayed on the website (i.e.&nbsp;<code>grid.innerHTML</code>) and uses <code>webr.objs.globalEnv.bind()</code> to create a variable called <code>str</code> in the R workspace that contains the same text.</li>
<li>Next, it uses <code>webr.evalR()</code> to call the R function <code>automaton()</code>, passing the R string <code>str</code> as input, and storing the results as a variable (also called <code>str</code> because I am lazy) on the javascript side.</li>
<li>Finally, it converts the <code>str</code> object to a native javascript string and uses it to update the text displayed on the website (i.e., it modifies <code>grid.innerHTML</code>).</li>
</ul>
<p>Having defined this function, I now do something extraordinarily lazy: I create an infinite loop that calls <code>grid_update()</code> over and over forever, thereby creating the animation that you see on the website.</p>
<p>And with that we are done.</p>
<p>Well, sort of. There are going to be a few details to sort out when we go to deploy this to the web, but that’s the core of our very simple app.</p>
</section>
<section id="the-finicky-bits" class="level2">
<h2 class="anchored" data-anchor-id="the-finicky-bits">The finicky bits</h2>
<p>Now for the annoying fiddly bits. If you take a look at the actual source code on <a href="https://github.com/djnavarro/webr-automata">github.com/djnavarro/webr-automata</a> you’ll notice that there are a few other files I’ve included. Two of them are completely irrelevant: <code>README.md</code> isn’t part of the web application, and neither is <code>.gitignore</code>. The <code>serve.R</code> function isn’t really part of the app either, it’s just an R script I used to serve the site locally while I was writing the code.</p>
<p>The other three files – <code>netlify.toml</code>, <code>webr-serviceworker.js</code>, and <code>webr-worker.js</code> – are relevant. Let’s start by taking a look at the contents of the two javascript files:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>webr-worker.js</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">importScripts</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://webr.r-wasm.org/latest/webr-worker.js'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>webr-serviceworker.js</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">importScripts</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://webr.r-wasm.org/latest/webr-serviceworker.js'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</div>
</div>
<p>Okay, there’s actually not much there. That’s because I’ve copied this code directly from the webR documentation, and there’s no reason why you shouldn’t do likewise! You do need these files in order for the application to work, however, and while I don’t want to go into any detail about what’s going on under the hood here<sup>6</sup> it might be helpful to quickly read up on what <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">web workers</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">service workers</a> are used for. Basically you need these things to allow webR to do its thing in the background.</p>
<p>Next, let’s take a look at the <code>netlify.toml</code> file:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>netlify.toml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">headers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]]</span></span>
<span id="cb15-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/*"</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">headers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">.</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">values</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Cross-Origin-Opener-Policy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"same-origin"</span></span>
<span id="cb15-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Cross-Origin-Embedder-Policy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"require-corp"</span></span></code></pre></div>
</div>
</div>
<p>As before, I’m not planning to go into detail about what this is all about, but if you’re not familiar with cross-origin resource sharing (CORS) it’s probably helpful to take a read through the Mozilla <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">documentation on CORS</a>. The short version is that these headers are needed to prevent the browser from blocking webR in your application.</p>
</section>
<section id="the-wrap-up" class="level2">
<h2 class="anchored" data-anchor-id="the-wrap-up">The wrap up</h2>
<blockquote class="blockquote">
<p>Nail in my hand<br> From my creator<br> You gave me life<br> Now show me how to live<br> &nbsp;&nbsp; –Audioslave</p>
</blockquote>
<p>Despite being in the very early stages of development I kind of love webR already. One of my big frustrations as someone who writes a lot of R code for data analysis and generative art, and someone who writes a lot of HTML/CSS/javascript code for the web, is that it’s really hard to bring these two worlds together. Literate programming tools like R markdown, jupyter, and quarto are all useful to some extent, because they make it easier to write <em>about</em> R code on the web in a natural way<sup>7</sup>, but they don’t allow you to execute the R code in an interactive way. You can solve this problem by writing Shiny apps, but it’s also a limited solution, because a Shiny app won’t work without a server running a local copy of R, and someone has to pay to keep that server running. Speaking as an unemployed woman who just shut down her kubernetes apps because I’m sure as hell not going to pay for them out of my own pocket, this is not ideal. The thing I’ve always wanted is the ability to create websites that execute R code <em>client-side</em>, in exactly the same way that my sites can execute javascript code within the users browser.</p>
<p>It’s early days, of course, but webR offers the tantalising prospect of making this dream a reality. At long last my R code can live in the browser, and I can really show people what you can do with R.</p>
<p>I’m terribly excited.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I imagine it also generated excitement on Twitter, but quite frankly there is no chance of me returning to Twitter while it remains a privately held company whose owner uses the site to flirt with anti-trans conspiracy theories at the same time that governments around the world are openly passing draconian legislation targeting us. In all honesty, I’ve been a bit… um… disheartened… to learn that this isn’t a deal-breaker for very many people. But whatever. I suppose I can’t really know why other people make the choices they do.↩︎</p></li>
<li id="fn2"><p>The source code is available at <a href="https://github.com/djnavarro/webr-automata">github.com/djnavarro/webr-automata</a>.↩︎</p></li>
<li id="fn3"><p>Yes there are proofs that this occurs with probability 1 in the limit, but do you really need to see them? I mean, this is basically a simple random walk with absorbing states so of course it does. Sheesh.↩︎</p></li>
<li id="fn4"><p>This is a problem many subs have, to be honest.↩︎</p></li>
<li id="fn5"><p>This is “fun” in precisely the same way that it’s fun to spend time with an impact top. You’re going to love it, but tomorrow morning you’re going to have bruises.↩︎</p></li>
<li id="fn6"><p>Largely because I’m not exactly an expert on this bit myself.↩︎</p></li>
<li id="fn7"><p>If you doubt me on the utility of these things, let me mention that I wrote the entirety of <a href="https://learningstatisticswithr.com">Learning Statistics with R</a> in pure LaTeX… it was a fucking nightmare.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {How to Run {R} Code in the Browser with {webR}},
  date = {2023-04-09},
  url = {https://blog.djnavarro.net/posts/2023-04-09_webr},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“How to Run R Code in the Browser with
webR.”</span> April 9, 2023. <a href="https://blog.djnavarro.net/posts/2023-04-09_webr">https://blog.djnavarro.net/posts/2023-04-09_webr</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>WebR</category>
  <guid>https://blog.djnavarro.net/posts/2023-04-09_webr/index.html</guid>
  <pubDate>Sat, 08 Apr 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-04-09_webr/automaton1.png" medium="image" type="image/png" height="133" width="144"/>
</item>
<item>
  <title>Generative art with grid</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As I approach four months of unemployment I’m finding I need projects to work on purely for the sake of my mental health. One project that has helped a lot is working on the <a href="https://ggplot2-book.org">ggplot2 book</a> (which I coauthor with Hadley Wickham and Thomas Lin Pedersen). At the moment I’m working on the book chapters that discuss the ggplot2 extension system: it’s been quite a lot of fun. One really nice thing about working on those chapters is that I’ve ended up learning a lot about the <a href="https://www.stat.auckland.ac.nz/~paul/grid/grid.html">grid</a> graphics system upon which ggplot2 is built.<sup>1</sup></p>
<p>At this point we’re really not sure how much grid to incorporate into the book, but as a fun side-project I decided to adapt some of it and use it as the basis for a post on generative art.</p>
<section id="what-is-grid" class="level2">
<h2 class="anchored" data-anchor-id="what-is-grid">What is grid?</h2>
<p>The grid package provides the underlying graphics system upon which ggplot2 is built. It’s one of two quite different drawing systems that are included in base R: base graphics and grid. Base graphics has an imperative “pen-on-paper” model: every function immediately draws something on the graphics device. Much like ggplot2 itself, grid takes a more declarative approach where you build up a description of the graphic as an object, which is later rendered. This declarative approach allows us to create objects that exist independently of the graphic device and can be passed around, analysed, and modified. Importantly, parts of a graphical object can refer to other parts, which allows you to do things like define rectangle A to have width equal to the length of text string B, and so on.</p>
<p>This blog post – and the corresponding section in the book, should we decide to include it – isn’t intended to be a comprehensive introduction to grid. But it does cover many of the core concepts and introduces key terms like grobs, viewports, graphical parameters, and units. Hopefully it will make sense even if you’re completely new to grid.</p>
</section>
<section id="grobs" class="level2">
<h2 class="anchored" data-anchor-id="grobs">Grobs</h2>
<p>To understand how grid works, the first thing we need to talk about are grobs. Grobs (<strong>gr</strong>aphic <strong>ob</strong>jects) are the atomic representations of graphical elements in grid, and include types like points, lines, circles, rectangles, and text. The grid package provides functions like <code>pointsGrob()</code>, <code>linesGrob()</code>, <code>circleGrob()</code>, <code>rectGrob()</code>, and <code>textGrob()</code> that create graphical objects without drawing anything to the graphics device.<sup>2</sup> These functions are vectorised, allowing a single point grob to represent multiple points, for instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(grid)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-4">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb1-5">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x coordinate</span></span>
<span id="cb1-6">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y coordinate</span></span>
<span id="cb1-7">r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># radius</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circleGrob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> r)</span></code></pre></div>
</div>
<p>Notice that this does not create any output. Much like a ggplot2 plot object, this grob is a declarative description of a set of circles. To trigger a drawing operation we first call <code>grid.newpage()</code> to clear the current graphics device, and then <code>grid.draw()</code> to perform a draw operation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(circles)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>In addition to providing geometric primitives, grid also allows you to construct composite objects that combine multiple grobs using <code>grobTree()</code>. Here’s an illustration:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">squares <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectGrob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span>  r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb3-2">composite <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(squares, circles)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(composite)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>It is also possible to define your own grob classes. You can define a new primitive grob class using <code>grob()</code> or a new composite class using <code>gTree()</code>, and specify special behaviour for your new class. We’ll see an example of this in a moment.</p>
</section>
<section id="viewports" class="level2">
<h2 class="anchored" data-anchor-id="viewports">Viewports</h2>
<p>The second key concept in grid is the idea of a viewport. A viewport is a rectangular plotting region that supplies its own coordinate system for grobs that are drawn within it, and can also provide a tabular grid in which other viewports an be nested. An individual grob can have its own viewport or, if none is provided, it will inherit one. In the example below I’ll use <code>viewport()</code> to define three different viewports, one with default parameters, and two more that are rotated around the midpoint by 15 and 30 degrees respectively:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">vp_default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>()</span>
<span id="cb4-2">vp_rotate1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb4-3">vp_rotate2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
</div>
<p>This time around, when we create our composite grobs, we’ll explicitly assign them to specific viewports by setting the <code>vp</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">composite_default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(squares, circles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp_default)</span>
<span id="cb5-2">composite_rotate1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(squares, circles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp_rotate1)</span>
<span id="cb5-3">composite_rotate2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(squares, circles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp_rotate2)</span></code></pre></div>
</div>
<p>When we plot these two grobs, we can see the effect of the viewport: although <code>composite_default</code> and <code>composite_rotated</code> are comprised of the same two primitive grobs (i.e., <code>circles</code> and <code>squares</code>), they belong to different viewports so they look different when the plot is drawn:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(composite_default)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(composite_rotate1)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(composite_rotate2)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="768"></p>
</div>
</div>
</section>
<section id="graphical-parameters" class="level2">
<h2 class="anchored" data-anchor-id="graphical-parameters">Graphical parameters</h2>
<p>The next concept we need to understand is the idea of graphical parameters. When we defined the <code>circles</code> and <code>labels</code> grobs, we only specified some of its properties. For example, we said nothing about colour or transparency, and so these properties are all set to their default values. The <code>gpar()</code> function in grid allows you to specify graphical parameters as distinct objects:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">gpA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey30"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb7-2">gpB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey30"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</div>
<p>The <code>gpA</code> and <code>gpB</code> objects provide lists of graphical settings that can now be applied to any grob we like using the <code>gp</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-3">circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circleGrob</span>(</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb8-7">)</span>
<span id="cb8-8"></span>
<span id="cb8-9">grob1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(circles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp_default, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> gpA)</span>
<span id="cb8-10">grob2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(circles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp_rotate1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> gpB)</span>
<span id="cb8-11">grob3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(circles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp_rotate2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> gpA)</span></code></pre></div>
</div>
<p>When we plot these two grobs, they inherit the settings provided by the graphical parameters as well as the viewports to which they are assigned:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob1)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob2)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob3)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="768"></p>
</div>
</div>
</section>
<section id="units" class="level2">
<h2 class="anchored" data-anchor-id="units">Units</h2>
<p>The last core concept that we need to discuss is the grid unit system. The grid package allows you to specify the positions (e.g.&nbsp;<code>x</code> and <code>y</code>) and dimensions (e.g.&nbsp;<code>length</code> and <code>width)</code> of grobs and viewports using a flexible language. In the grid unit system there are three qualitatively different styles of unit:</p>
<ul>
<li>Absolute units (e.g.&nbsp;centimeters, inches, and points refer to physical sizes).</li>
<li>Relative units (e.g.&nbsp;npc which scales the viewport size between 0 and 1).</li>
<li>Units based on other grobs (e.g.&nbsp;grobwidth).</li>
</ul>
<p>The <code>unit()</code> function is the main function we use when specifying units: <code>unit(1, "cm")</code> refers to a length of 1 centimeter, whereas <code>unit(0.5, "npc")</code> refers to a length half the size of the relevant viewport. The unit system supports arithmetic operations that are only resolved at draw time, which makes it possible to combine different types of units: <code>unit(0.5, "npc") + unit(1, "cm")</code> defines a point one centimeter to the right of the center of the current viewport.</p>
</section>
<section id="building-grob-classes" class="level2">
<h2 class="anchored" data-anchor-id="building-grob-classes">Building grob classes</h2>
<p>Now that we have a basic understanding of grid, let’s attempt to create our own “transforming” grob class: objects that are circles if they are smaller than some threshold (1cm by default), but transform into squares whenever they are larger than the threshold.<sup>3</sup> This is not the most useful kind of graphical object, but it’s useful for illustrating the flexibility of the grid system. The first step is to write our own constructor function using <code>grob()</code> or <code>gTree()</code>, depending on whether we are creating a primitive or composite object. We begin by creating a “thin” constructor function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">transGrob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, </span>
<span id="cb10-2">                      y, </span>
<span id="cb10-3">                      size,</span>
<span id="cb10-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb10-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default.units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>, </span>
<span id="cb10-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, </span>
<span id="cb10-7">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(), </span>
<span id="cb10-8">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb10-9">  </span>
<span id="cb10-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure that input arguments are units</span></span>
<span id="cb10-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.unit</span>(x)) x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(x, default.units)</span>
<span id="cb10-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.unit</span>(y)) y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(y, default.units)</span>
<span id="cb10-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.unit</span>(size)) size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(size, default.units)</span>
<span id="cb10-14">  </span>
<span id="cb10-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the grob class as a gTree</span></span>
<span id="cb10-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gTree</span>(</span>
<span id="cb10-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb10-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb10-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, </span>
<span id="cb10-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> threshold,</span>
<span id="cb10-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> name, </span>
<span id="cb10-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> gp, </span>
<span id="cb10-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp, </span>
<span id="cb10-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cl =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trans"</span></span>
<span id="cb10-25">  )</span>
<span id="cb10-26">}</span></code></pre></div>
</div>
<p>The <code>transGrob()</code> function doesn’t do very much on its own. All it does is ensure that the <code>x</code>, <code>y</code>, and <code>size</code> arguments are grid units, and sets the class name to be “trans”. To define the behaviour of our grob, we need to specify methods for one or both of the generic functions <code>makeContext()</code> and <code>makeContent()</code>:</p>
<ul>
<li><p><code>makeContext()</code> is called when the parent grob is rendered and allows you to control the viewport of the grob. We won’t need to use that for our surprise grob.</p></li>
<li><p><code>makeContent()</code> is called every time the drawing region is resized and allows you to customise the look of the grob based on the size or other aspect.</p></li>
</ul>
<p>Because these generic functions use the S3 object oriented programming system, we can define our method simply by appending the class name to the end of the function name. That is, the <code>makeContent()</code> method for our surprise grob is defined by creating a function called <code>makeContent.trans()</code> that takes a grob as input and returns a modified grob as output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">makeContent.trans <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb11-2">  x_pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb11-3">  y_pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb11-4">  size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convertWidth</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unitTo =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">valueOnly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb11-5">  threshold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>threshold</span>
<span id="cb11-6">  </span>
<span id="cb11-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Work out which shapes are circles, and which are not</span></span>
<span id="cb11-8">  circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> threshold</span>
<span id="cb11-9">  </span>
<span id="cb11-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a circle grob for the small ones</span></span>
<span id="cb11-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(circles)) {</span>
<span id="cb11-12">    circle_grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circleGrob</span>(</span>
<span id="cb11-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_pos[circles], </span>
<span id="cb11-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_pos[circles], </span>
<span id="cb11-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(size[circles] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>)</span>
<span id="cb11-16">    )</span>
<span id="cb11-17">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb11-18">    circle_grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nullGrob</span>()</span>
<span id="cb11-19">  }</span>
<span id="cb11-20">  </span>
<span id="cb11-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a rect grob for the large ones</span></span>
<span id="cb11-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>circles)) {</span>
<span id="cb11-23">    square_grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectGrob</span>(</span>
<span id="cb11-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_pos[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>circles], </span>
<span id="cb11-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_pos[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>circles], </span>
<span id="cb11-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(size[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>circles], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>),</span>
<span id="cb11-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(size[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>circles], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>)</span>
<span id="cb11-28">    )</span>
<span id="cb11-29">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb11-30">    square_grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nullGrob</span>()</span>
<span id="cb11-31">  }</span>
<span id="cb11-32">  </span>
<span id="cb11-33">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the circle and rect grob as children of our input grob</span></span>
<span id="cb11-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setChildren</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gList</span>(square_grob, circle_grob))</span>
<span id="cb11-35">}</span></code></pre></div>
</div>
<p>Some of the functions we’ve called here are new, but they all reuse the core concepts that we discussed earlier. Specifically:</p>
<ul>
<li><code>convertWidth()</code> is used to convert grid units from one type to another.</li>
<li><code>nullGrob()</code> creates a blank grob.</li>
<li><code>gList()</code> creates a list of grobs.</li>
<li><code>setChildren()</code> specifies the grobs that belong to a gTree composite grob.</li>
</ul>
<p>The effect of this function is to ensure that every time the grob is rendered the absolute size of each shape is recalculated. All shapes smaller than the threshold become circles, and all shapes larger than the threshold become squares. To see how this plays out, lets call our new function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb12-3">trans <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transGrob</span>(</span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb12-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb12-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>),</span>
<span id="cb12-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-8">)</span></code></pre></div>
</div>
<p>The <code>trans</code> grob contains shapes whose locations and sizes have been specified relative to the size of the viewport. At this point in time we have no idea which of these shapes will be circles and which will be squares, because that depends on the size of the viewport in which the <code>trans</code> grob is to be drawn. Here’s what we end up with for this quarto post that defines the figure size to be 8x8 inches:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(trans)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>The exact same code, but now I’ve made the plot size smaller and as a consequence all the shapes have turned into circles:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(trans)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="384"></p>
</figure>
</div>
</div>
</div>
<p>If you run this code interactively and resize the plotting window you’ll see that the objects change shape based on the size of the plotting window. It’s not the most useful application of grid, but it is fun to play with.</p>
</section>
<section id="pushing-viewports" class="level2">
<h2 class="anchored" data-anchor-id="pushing-viewports">Pushing viewports</h2>
<p>A nice feature of grid is that viewports can be nested within other viewports. At the top level there is always “root” viewport that encompasses the entire image. By default user-created viewports are children of the root viewport, and inherit properties from it. However, there’s nothing stopping you from assigning new viewports to be children of previous user-generated viewports. In the simplest case<sup>4</sup>, we can use this to create a <em>viewport stack</em> in which each new viewport is the child of the previous one. The <code>pushViewport()</code> function allows us to do this.</p>
<p>Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">vp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb15-2">box <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectGrob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) {</span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pushViewport</span>(vp)</span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(box)</span>
<span id="cb15-7">}</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>In this code I define <code>vp</code> to be a viewport that shrinks the width and height of the current viewport to be 80% of its parent, and rotates the frame by 17 degrees.b Then I repeatedly push <code>vp</code> to the viewport stack, and draw a border (the <code>box</code> grob) showing the edges of that viewport. The effects of each push to the stack are cumulative, as the image shows.</p>
<p>It’s also quite pretty.</p>
<p>The grid package has a lot of tools for working with viewport lists, stacks, and trees. You can assign names to viewports, navigate back and forth between different viewports during plot construction, and so on. But that’s a topic for another day.</p>
</section>
<section id="trans-spirals" class="level2">
<h2 class="anchored" data-anchor-id="trans-spirals">Trans spirals</h2>
<p>I’m pleasantly surprised at how easy it is to create interesting generative art with grid. As a really simple example, here’s a system that combines two tricks: it uses the <code>transGrob()</code> that we defined earlier, and it uses a viewport stack to create spiraling images:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">trans_spiral <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb16-2">  </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb16-4">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb16-5">  trans <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transGrob</span>(</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), </span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>),</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-10">  )</span>
<span id="cb16-11">  </span>
<span id="cb16-12">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5BCEFA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#F5A9B8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb16-13">  </span>
<span id="cb16-14">  vp_spiral <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-15">  </span>
<span id="cb16-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb16-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) {</span>
<span id="cb16-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pushViewport</span>(vp_spiral)</span>
<span id="cb16-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grobTree</span>(trans, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> cols[i])))</span>
<span id="cb16-20">  }</span>
<span id="cb16-21">}</span></code></pre></div>
</div>
<p>It produces output like this…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_spiral</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>… and this …</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_spiral</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>… and this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_spiral</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The best text to use if you want to learn grid is <a href="https://www.stat.auckland.ac.nz/~paul/RG2e/">R Graphics (2nd ed)</a> by Paul Murrell. I’ve found myself relying on it quite heavily.↩︎</p></li>
<li id="fn2"><p>There are also functions <code>grid.points()</code>, <code>grid.lines()</code>, etc that immediately draw the corresponding grob to the graphics device, but when creating a generative art system I find it makes more separate the plot specification from the drawing process.↩︎</p></li>
<li id="fn3"><p>This example is based on the “surprise grob” example originally written by Thomas Lin Pedersen. I’ve adapted it a bit here because I’m the kind of person who does that.↩︎</p></li>
<li id="fn4"><p>The only case I’m going to consider here.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Generative Art with Grid},
  date = {2023-03-31},
  url = {https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Generative Art with Grid.”</span> March
31, 2023. <a href="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid">https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <category>Grid Graphics</category>
  <guid>https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Shattered landscapes</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><strong>Update:</strong> I made a little shiny app based on this post: <a href="https://djnavarro.shinyapps.io/shattered-landscapes/">djnavarro.shinyapps.io/shattered-landscapes</a> (<a href="https://github.com/djnavarro/quarto-blog/blob/main/posts/2023-03-13_shattered-landscapes/app.R">source code</a>). It doesn’t implement the complete system because rayshader causes out of memory problems for my free tier shinyapps account, but in other respects it’s the same thing.</p>
<p><br></p>
<blockquote class="blockquote">
<p>Magic doesn’t come from talent. It comes from pain. <br> &nbsp; &nbsp; – <a href="https://www.youtube.com/watch?v=WBeLX3O_mEU">Eliot Waugh</a><sup>1</sup></p>
</blockquote>
<p>In the last few weeks I’ve been tinkering with a generative art system I ended up calling <a href="https://art.djnavarro.net/gallery/broken-lands/"><em>Broken Lands</em></a>. It creates maps of bizarre and impossible landscapes in R, using the <a href="https://ambient.data-imaginist.com/">ambient</a> package to generate the topography, and <a href="https://www.rayshader.com/">rayshader</a> to render shadows cast by a hypothetical light source. It creates images like these:</p>
<div class="column-screen-inset">
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/https:/djnavarro.net/series-broken-lands/3000/alien-floe_15_2406.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/https:/djnavarro.net/series-broken-lands/3000/alien-floe_15_2416.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/https:/djnavarro.net/series-broken-lands/3000/alien-floe_15_2496.png" class="img-fluid"></p>
</div>
</div>
</div>
</div>
<p>To my eye, at least, these images are both beautiful and tragic. I cannot help but interpret them as coastal landscapes in an alien geography of some kind, a land that has suffered some cataclysm like the <a href="https://awoiaf.westeros.org/index.php/Doom_of_Valyria">Doom of Valyria</a> or the <a href="https://dragonlancenexus.com/the-rise-and-demise-of-istar/">Fall of Istar</a>. The contours feel too contorted to be the result of any terrestrial process, and – again, by my interpretation – there’s a tension between the smoothness of the individual contours and the jagged, chaotic structure of the landscape overall.</p>
<p>But what would I know? I wrote the code that makes the system work, but I don’t have a monopoly of interpretation of the images. <a href="https://en.wikipedia.org/wiki/The_Death_of_the_Author">Death of the author</a> and all that. Barthes would call me the “scriptor” rather than the author, I suppose, which honestly feels about right for generative art. So yeah. The pieces are what they are, quite separate from the artist and from the process by which the system was constructed.</p>
<p>That said, if you’re familiar with the R ecosystem you can probably take an educated guess about how I made these pieces. As mentioned at the start, the spatial noise patterns are created using the <a href="https://ambient.data-imaginist.com/">ambient</a> package and the shadows and three-dimensional look are provided by <a href="https://www.rayshader.com/">rayshader</a>. I wrote about both of these packages in my workshop on <a href="https://art-from-code.netlify.app/">generative art in R</a> workshop (specifically: <a href="https://art-from-code.netlify.app/day-1/session-2/">ambient art</a>, <a href="https://art-from-code.netlify.app/day-1/session-4/">rayshader art</a>), and those tutorials provide a lot of clues about how these pieces are made. But there are also some details I haven’t talked about before, and in any case it’s always fun to write about art.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span></span></code></pre></div>
</div>
<p><br></p>
<section id="starting-simple" class="level2">
<h2 class="anchored" data-anchor-id="starting-simple">Starting simple</h2>
<p>I’ll start by building a simple system that doesn’t go very far beyond what I covered in the <em>Art From Code</em> workshop. It’s built using three functions. There’s a <code>new_grid()</code> function used to define a grid of x and y coordinates, a <code>generate_simplex()</code> function used to create spatial noise patterns on such a grid, and a <code>render()</code> function used to create an image. First, the <code>new_grid()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">new_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb2-2">  ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n)</span>
<span id="cb2-5">  )</span>
<span id="cb2-6">}</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_grid</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 2
       x       y
   &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0      
 2     0 0.00100
 3     0 0.00200
 4     0 0.00300
 5     0 0.00400
 6     0 0.00501
 7     0 0.00601
 8     0 0.00701
 9     0 0.00801
10     0 0.00901
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>The output appears to be a tibble that contains x and y coordinates.<sup>2</sup> This defines the spatial locations that we’ll use to create the image, but we’ll need to assign colours to each of those locations.</p>
<p><br></p>
<section id="painting-a-canvas-with-spatial-noise" class="level3">
<h3 class="anchored" data-anchor-id="painting-a-canvas-with-spatial-noise">Painting a canvas with spatial noise</h3>
<p>In order to do this, we’ll write a function called <code>generate_simplex()</code> that generates interesting patterns of spatial noise:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">generate_simplex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) {</span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb4-4">  }</span>
<span id="cb4-5">  ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>billow,</span>
<span id="cb4-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb4-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>,</span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb4-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb4-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb4-15">  )</span>
<span id="cb4-16">}</span></code></pre></div>
</div>
<p>The particular choices I’ve made here came about from trial and error. I played around with a lot of different settings when creating generative art in this style, and these were things I liked. I’m not going to dive into the details here: you can find out more by reading the <a href="[ambient art](https://art-from-code.netlify.app/day-1/session-2/)">tutorial on spatial noise art</a> I linked to earlier. For the current post, all I want to highlight is that we can use this function to add a new column to the <code>canvas</code> that defines our artwork:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_grid</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed))</span>
<span id="cb5-3"></span>
<span id="cb5-4">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 3
       x       y paint
   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1     0 0       -3.96
 2     0 0.00100 -3.95
 3     0 0.00200 -3.95
 4     0 0.00300 -3.94
 5     0 0.00400 -3.93
 6     0 0.00501 -3.92
 7     0 0.00601 -3.91
 8     0 0.00701 -3.91
 9     0 0.00801 -3.90
10     0 0.00901 -3.89
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>This <code>canvas</code> object is structured like a lookup table: it’s a data frame with columns specifying x and y coordinates, and it contains a third column that specifies the colour of “paint” that needs to be applied at each coordinate. However, it’s a very structured data frame because the x and y values form a grid. This makes straightforward to flip from this format to a “bitmap” matrix format:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bitmap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint)</span>
<span id="cb7-2">bitmap[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      x
y           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]
  [1,] -3.963129 -3.931507 -3.899957 -3.868550 -3.837357 -3.806447
  [2,] -3.954987 -3.932781 -3.901242 -3.869845 -3.838662 -3.807762
  [3,] -3.946846 -3.924674 -3.902573 -3.871211 -3.840061 -3.809194
  [4,] -3.938708 -3.916594 -3.894550 -3.872644 -3.841552 -3.810740
  [5,] -3.930575 -3.908541 -3.886577 -3.864752 -3.843132 -3.812398
  [6,] -3.922448 -3.900516 -3.878655 -3.856932 -3.835414 -3.814166</code></pre>
</div>
</div>
<p>A grid of numbers isn’t very pretty to look at, but we will need to create this matrix representation before passing the data to rayshader later. But I’m getting ahead of myself. For now, we can use the <code>image()</code> function to render an image from matrix-formatted data:</p>
<div class="cell" data-hash="index_cache/html/simple-render_3eab0a7eeb32bc70f337c05d8f82896f">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/simple-render-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>We’re a long way from our goal, but at least we now have an output that looks like art rather than a matrix of numbers. It’s a start!</p>
<p><br></p>
</section>
<section id="casting-shadows-across-the-landscape" class="level3">
<h3 class="anchored" data-anchor-id="casting-shadows-across-the-landscape">Casting shadows across the landscape</h3>
<p>The next step in the process is to define a <code>render()</code> function that will take an “elevation” matrix as input, but instead of drawing a “heat map” like <code>image()</code> does, it renders it as a three-dimensional topographic map with shadows cast by a hypothetical light source. This is surprisingly easy to do using rayshader. Here’s the function I’ll use in this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">render <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shades =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span>) {</span>
<span id="cb10-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(shades)) {</span>
<span id="cb10-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(mat))</span>
<span id="cb10-4">    shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hcl.colors</span>(n, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YlOrRd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rev =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb10-5">  }</span>
<span id="cb10-6">  rayshader<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb10-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> mat,</span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> shades</span>
<span id="cb10-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-10">    rayshader<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb10-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> rayshader<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb10-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> mat,</span>
<span id="cb10-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb10-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>,</span>
<span id="cb10-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb10-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> zscale</span>
<span id="cb10-17">      ),</span>
<span id="cb10-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-19">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-20">    rayshader<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>()</span>
<span id="cb10-21">}</span></code></pre></div>
</div>
<p>I’m not going to go into the specifics: you can find out more by reading the <a href="[ambient art](https://art-from-code.netlify.app/day-1/session-4/)">tutorial on rayshader art</a> I linked to earlier. For this post, I’m simply going to show you what it does. Taking the <code>canvas</code> data as input, we first use <code>as.array()</code> to switch from a “data frame style” representation to a “matrix style” representation, and then pass the matrix to <code>render()</code>:</p>
<div class="cell" data-hash="index_cache/html/render-landscape_59c4a810d191eb5a7228c812793b479f">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/render-landscape-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Again, still a long way from our desired goal, but we are making progress. Thanks to rayshader, we have output that looks like a shaded topographic map.</p>
<p><br></p>
</section>
<section id="making-islands-from-the-landscape" class="level3">
<h3 class="anchored" data-anchor-id="making-islands-from-the-landscape">Making islands from the landscape</h3>
<p>At this point we have the ability to generate landscapes, but the images just look like a bunch of hills. They don’t have the “coastal” feeling that the original images did. We can create islands by setting a “sea level”. You can do this in a sophisticated way in rayshader using <code>detect_water()</code> and <code>add_water()</code>, but that’s overkill for our purposes. All we really want to do is imagine setting a sea level such that about half the image is “water” and half the image is “land”. To do that we just calculate the median value in the original data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">sea_level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(canvas<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint)</span></code></pre></div>
</div>
<p>From there it’s an exercise in using dplyr. Using <code>mutate()</code> we create a new “islands” column whose value is equal to the original value or the sea level, whichever is higher:</p>
<div class="cell" data-hash="index_cache/html/render-islands_89c99343fd7783865ca6e6cfde8463a6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb13-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> paint <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> sea_level,</span>
<span id="cb13-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> sea_level, </span>
<span id="cb13-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> paint</span>
<span id="cb13-7">    )</span>
<span id="cb13-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/render-islands-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Et voilà! We have a generative art system that creates fictitious topographic maps of coastal islands. It’s still not quite the same thing as the original, but it’s kind of a nice system in itself. If you want to play with it, the complete source code for generating this image is included in the <a href="islands.R">islands.R</a> script accompanying this post.</p>
<p><br></p>
</section>
<section id="tweaking-the-spatial-noise-generator" class="level3">
<h3 class="anchored" data-anchor-id="tweaking-the-spatial-noise-generator">Tweaking the spatial noise generator</h3>
<p>If you do end up playing around, a really useful way to create variations on this system is to modify the function that generates the spatial noise patterns. For example, this <code>generate_fancy_noise()</code> function is awfully similar to the noise generator I used in the <em>Broken Lands</em> series:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">generate_fancy_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) {</span>
<span id="cb14-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb14-4">  }</span>
<span id="cb14-5">  z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb14-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_worley,</span>
<span id="cb14-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>billow,</span>
<span id="cb14-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb14-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb14-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance2"</span>,</span>
<span id="cb14-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb14-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb14-16">  )</span>
<span id="cb14-17">  ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb14-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb14-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>billow,</span>
<span id="cb14-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb14-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>,</span>
<span id="cb14-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb14-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z,</span>
<span id="cb14-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z</span>
<span id="cb14-27">  )</span>
<span id="cb14-28">}</span></code></pre></div>
</div>
<p>Here it is in action:</p>
<div class="cell" data-hash="index_cache/html/island-fancy-noise_53f5ddc84ded78d671abebedeed2a975">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_grid</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fancy_noise</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed),</span>
<span id="cb15-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb15-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb15-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb15-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> height</span>
<span id="cb15-8">    )</span>
<span id="cb15-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/island-fancy-noise-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Very pretty. I suspect that had I isolated this particular noise generator earlier in the artistic process – rather than figuring out in hindsight that this was what I’d been using all along – I might have stopped here, and not bothered with any of the other tricks that I used.<sup>4</sup> But of course this is a post-mortem deconstruction, not a description of the bizarrely tangled artistic process I actually followed, so there are more layers to come…</p>
<p><br></p>
</section>
</section>
<section id="queering-geography" class="level2">
<h2 class="anchored" data-anchor-id="queering-geography">Queering geography</h2>
<p>The final image in the last section captures something about the overall structure of the <em>Broken Lands</em> images, but it feels wrong in the particulars. It’s too smooth, too fluid, too… natural. It doesn’t have the same feel as the originals. I don’t have the same feeling of alienness that the original pieces have. Where does that not-quite-real feeling come from?</p>
<p>The answer to this involves every generative artists favourite trick: curl fields. If you’ve read the tutorial articles I linked to earlier, you’ve encountered these before so I won’t repeat myself by explaining yet again what a curl field is. What I’ll do instead is write a <code>generate_curl()</code> function that takes the original grid of coordinates (in the “base” space) and transforms them to a new set of points (in an “embedding” space) using a curl transformation:<sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">generate_curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb16-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) {</span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb16-4">  }</span>
<span id="cb16-5">  ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fbm,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb16-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb16-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb16-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb16-16">  )</span>
<span id="cb16-17">}</span></code></pre></div>
</div>
<p>Here’s what happens when we apply this function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_grid</span>()</span>
<span id="cb17-2">coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_curl</span>(grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed)</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(coords)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             x        y
1 1.417494e-07 2.625000
2 4.275159e-05 2.624981
3 1.705772e-04 2.624924
4 3.836068e-04 2.624829
5 6.818209e-04 2.624697
6 1.065192e-03 2.624526</code></pre>
</div>
</div>
<p>The code here is slightly unpleasant, yes, but I’ll do it in a slightly cleaner way in a moment. What matters right now is the fact that the <code>coords</code> data frame is a transformed version of the <code>grid</code> data. The original (x,y) coordinates in the base space have been transformed to some (x,y) coordinates in some new space.</p>
<p>A slightly cleaner way of doing this – keeping both the original coordinates and the transformed values – would be as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb19-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curl_x =</span> coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb19-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curl_y =</span> coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb19-5">  )</span>
<span id="cb19-6"></span>
<span id="cb19-7">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 4
       x       y      curl_x curl_y
   &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;
 1     0 0       0.000000142   2.62
 2     0 0.00100 0.0000428     2.62
 3     0 0.00200 0.000171      2.62
 4     0 0.00300 0.000384      2.62
 5     0 0.00400 0.000682      2.62
 6     0 0.00501 0.00107       2.62
 7     0 0.00601 0.00153       2.62
 8     0 0.00701 0.00209       2.62
 9     0 0.00801 0.00273       2.62
10     0 0.00901 0.00345       2.62
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>Okay that’s nice, but what exactly are these “curl transformed” values? What do they look like? Fair question. Here’s a plot showing what has happened to our nice rectangular grid after the transformation…</p>
<div class="cell" data-hash="index_cache/html/plot-curl-transform_024c86bb8595fbe107b5f6ae51d9ba2f">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/plot-curl-transform-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This image has an evocative feel, right? Like I’ve taken a regular square sheet of fabric and folded or transformed it in some strange way to create an “embedded” manifold? Well, yeah. That’s precisely what I’ve done.</p>
<p>Our noise operations will be specified on this transformed/embedded manifold, but – to reveal the ending slightly too soon – the final image will be defined on the base space. The code below shows how to apply the noise operations in the embedding space:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb21-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fancy_noise</span>(curl_x, curl_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed),</span>
<span id="cb21-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb21-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb21-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb21-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> height</span>
<span id="cb21-8">    )</span>
<span id="cb21-9">  )</span>
<span id="cb21-10"></span>
<span id="cb21-11">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x       y      curl_x curl_y height islands
   &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0       0.000000142   2.62 -0.676  -0.676
 2     0 0.00100 0.0000428     2.62 -0.675  -0.675
 3     0 0.00200 0.000171      2.62 -0.674  -0.674
 4     0 0.00300 0.000384      2.62 -0.672  -0.672
 5     0 0.00400 0.000682      2.62 -0.670  -0.670
 6     0 0.00501 0.00107       2.62 -0.667  -0.667
 7     0 0.00601 0.00153       2.62 -0.664  -0.664
 8     0 0.00701 0.00209       2.62 -0.662  -0.662
 9     0 0.00801 0.00273       2.62 -0.660  -0.660
10     0 0.00901 0.00345       2.62 -0.658  -0.658
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>Just to give you a sense of what that looks like in the embedding space, here’s what happens when we redraw the “manifold” plot from above, with each point coloured using the value of the “islands” variable:</p>
<div class="cell" data-hash="index_cache/html/demo-worley-distance_ad5074cdd8c189365ccd09e3cb6846a3">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/demo-worley-distance-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>You can sort of see what’s going on here. We have a spatial noise pattern that generated the topography that I showed in the last section, but it’s defined on the <em>embedding</em> space. Our <em>base</em> space is like a rectangular fabric that has been laid and folded over and over onto this embedding space, and then we’ve spray painted this pattern onto the fabric.<sup>6</sup> <sup>7</sup> <sup>8</sup> When we unfold the spray painted fabric and lay it flat again, this is what we get:</p>
<div class="cell" data-hash="index_cache/html/unfolded-fabric_2e7f26189e4931538cd79b6853c25fe4">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/unfolded-fabric-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>It’s a bit like tie-dyeing I guess? That’s what it feels like to me. I’m taking something regular, scrunching it up in a strange way, and then applying the colours to the scrunched up object before unfolding it.</p>
<p>In any case, we can use our <code>render()</code> function to add shadows with rayshader:</p>
<div class="cell" data-hash="index_cache/html/plot-worley-distance_12c95c9c90abd9891eab921e41c0ca53">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/plot-worley-distance-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay now <em>that</em> feels like an alien geography to me! It still doesn’t look at all like our final images, but it has the right feel to it. Yes, it’s still a geography of sorts, but it feels stretched and twisted in an unnatural way. It feels… well, it feels <em>painful</em>. Nothing like this can occur naturally without the action of some catastrophic process. That’s what it feels like to me. The “brokenness” of the original images is created by this transformation: natural-ish patterns imposed on a twisted space create bizarre and alien patterns when those contortions are unfolded. It feels weird… it feels strange… it feels queer.<sup>9</sup></p>
</section>
<section id="artistic-trickery" class="level2">
<h2 class="anchored" data-anchor-id="artistic-trickery">Artistic trickery</h2>
<p>The last image in the previous section doesn’t look all that much like the <em>Broken Lands</em> pieces, but – perhaps surprisingly – we’re weirdly close to creating something that really does look like those pieces. There are no deep insights left to explore. From here on out, it’s really just a matter of applying a few artistic tricks. To be precise, there are three little tricks left to document.</p>
<p><br></p>
<section id="be-discreette" class="level3">
<h3 class="anchored" data-anchor-id="be-discreette">Be discre[et|te]</h3>
<p>The first trick is discretisation. So far we’ve been creating images in which the “elevation” of the landscapes vary smoothly. The <em>Broken Lands</em> images don’t do that. Instead, there is a distinct feeling that the lands are terraced. In the original pieces there’s that same unnatural terracing that that you see in <a href="https://en.wikipedia.org/wiki/Open-pit_mining">open cut mining</a>.<sup>10</sup> Creating that look in this system is not difficult. First, I’ll define a <code>discretise()</code> function that takes a continuously-varying vector as input, cuts it into <code>n</code> distinct levels that vary in value between 0 and 1, and returns the discretised values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">discretise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, n) {</span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb25-3">}</span></code></pre></div>
</div>
<p>Here’s an example in which 100 normally distributed numbers are sliced into 5 levels:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.6 0.8 0.2 0.4 0.6 0.4 0.6 0.4 0.8 0.6 0.4 0.2 0.2 0.4 0.6 0.6 0.6
 [18] 0.4 0.6 0.4 0.8 0.4 0.4 0.6 0.6 0.4 0.2 0.0 0.4 0.6 0.6 0.4 0.0 0.8
 [35] 0.2 0.2 0.4 0.6 0.4 0.4 0.8 0.4 0.4 0.4 0.4 0.2 0.4 0.2 0.6 0.4 0.8
 [52] 0.6 0.6 0.4 0.6 0.6 0.6 0.8 0.4 0.6 0.4 0.4 0.4 0.8 0.6 0.4 0.4 0.8
 [69] 0.4 0.2 0.4 0.2 0.6 0.2 0.2 0.8 0.4 0.4 0.6 0.4 0.6 0.4 0.8 0.6 0.4
 [86] 0.0 0.6 0.4 1.0 0.4 0.6 0.4 0.8 0.0 0.8 0.4 0.8 0.8 0.2 0.6</code></pre>
</div>
</div>
<p>To create a discretised version of our alien landscapes, all we have to do is liberally pepper our original code with a few calls to <code>discretise()</code>. Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_grid</span>() </span>
<span id="cb28-2">coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_curl</span>(grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed)</span>
<span id="cb28-3"></span>
<span id="cb28-4">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb28-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curl_x =</span> coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb28-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curl_y =</span> coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb28-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fancy_noise</span>(curl_x, curl_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb28-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb28-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb28-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb28-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> height</span>
<span id="cb28-14">    )</span>
<span id="cb28-15">) </span>
<span id="cb28-16"></span>
<span id="cb28-17">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x       y curl_x curl_y height islands
   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0         0.32      1   0.72    0.72
 2     0 0.00100   0.32      1   0.72    0.72
 3     0 0.00200   0.32      1   0.72    0.72
 4     0 0.00300   0.32      1   0.72    0.72
 5     0 0.00400   0.32      1   0.72    0.72
 6     0 0.00501   0.32      1   0.72    0.72
 7     0 0.00601   0.32      1   0.72    0.72
 8     0 0.00701   0.32      1   0.72    0.72
 9     0 0.00801   0.32      1   0.72    0.72
10     0 0.00901   0.32      1   0.72    0.72
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>If we plot this as a heatmap, the discrete levels are immediately obvious:</p>
<div class="cell" data-hash="index_cache/html/unfolded-fabric-discrete_b8a32407e08fed0238b23d30819ea920">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/unfolded-fabric-discrete-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>This terracing has the effect of levelling out some of the more bizarre features of the alien landscape we plotted earlier. Here’s what we get when we pass this terraced landscape to our <code>render()</code> function:</p>
<div class="cell" data-hash="index_cache/html/rayshaded_6ae7540888474db59e0519b96d8fdf8b">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/rayshaded-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ah, yes. Now we have something that feels closer to the <em>Broken Lands</em> pieces. The twists and contortions of the alien landscape are preserved, but they have now been forced onto a flatter, controlled geometry. The chaos of the alien land has been tamed. This is a domesticated variant. Safe for children and capitalists alike.</p>
<p><br></p>
</section>
<section id="be-smooth" class="level3">
<h3 class="anchored" data-anchor-id="be-smooth">Be smooth</h3>
<p>At some level I appreciate the stark feel of the previous piece, but even I am not enough of a masochist<sup>11</sup> to truly enjoy the brutality of what I just did. All those intricate alien swirls have been flattened and erased so crudely that we are left with something a little too minimal for my tastes.</p>
<p>And so to the second artistic sleight-of-hand: some of the starkness of the last piece can be ameliorated if we apply noise processes in both the embedding space (i.e., noise is applied to <code>curl_x</code> and <code>curl_y</code>) and in the base space (i.e., to <code>x</code> and <code>y</code>). The code for that might look a little like this:</p>
<div class="cell" data-hash="index_cache/html/mixed-method_038429f2e450bbe1fc914f53688a602f">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_grid</span>() </span>
<span id="cb32-2">coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_curl</span>(grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed)</span>
<span id="cb32-3"></span>
<span id="cb32-4">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb32-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb32-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curl_x =</span> coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb32-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curl_y =</span> coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb32-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise_curl =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fancy_noise</span>(curl_x, curl_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed),</span>
<span id="cb32-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed),</span>
<span id="cb32-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> (noise_curl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_base) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discretise</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb32-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb32-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb32-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(height),</span>
<span id="cb32-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> height</span>
<span id="cb32-15">    )</span>
<span id="cb32-16">) </span>
<span id="cb32-17"></span>
<span id="cb32-18">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb32-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb32-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/mixed-method-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There is no principle to this. No deep underlying logic. It is simply an attempt to paper over the cracks, to smooth out some of the raw, sharp edges that were left over when we discretised in the first step.</p>
<p>There is probably a life metaphor here, but I choose not to look too closely.</p>
<p><br></p>
</section>
<section id="be-chaotic" class="level3">
<h3 class="anchored" data-anchor-id="be-chaotic">Be chaotic</h3>
<p>The final layer of trickery involves the colour palette. Throughout this post I’ve used the default “yellow and red” palette that <code>image()</code> uses to create heat map images, but the <code>render()</code> function I wrote at the beginning lets you choose your own colour scheme. For instance, let’s say I want the land to vary smoothly along a “teal and green” colour palette, while having the water stay white (or thereabouts). It’s surprisingly straightforward to do this, by passing a hand crafted vector of colours to <code>render()</code>:</p>
<div class="cell" data-hash="index_cache/html/manual-colour_98e82ce263e6d6c08a8c44be9b7ceb1c">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hcl.colors</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TealGrn"</span>)</span>
<span id="cb33-2">shades[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span></span>
<span id="cb33-3"></span>
<span id="cb33-4">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shades =</span> shades) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/manual-colour-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is so very, very close to the style of imagery in the original <em>Broken Lands</em> series. The only thing missing is a slight feeling of chaos to the colours. If you scroll back up to the top of the post you’ll notice that the original images don’t quite adhere to the smoothly-varying-shades feel of a proper topographic map. The reason for this is that I shuffled the colour palette, so each “level” in the discrete map has a randomly sampled colour from the palette. Here’s some code that does precisely that:</p>
<div class="cell" data-hash="index_cache/html/manual-colour-shuffled_ab41e7b2a8c5325c9f9ef9f713abc54d">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">generate_shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TealGrn"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb34-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) {</span>
<span id="cb34-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb34-4">  }</span>
<span id="cb34-5">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hcl.colors</span>(n, palette)</span>
<span id="cb34-6">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(shades)</span>
<span id="cb34-7">  shades[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span></span>
<span id="cb34-8">  shades  </span>
<span id="cb34-9">}</span>
<span id="cb34-10"></span>
<span id="cb34-11">canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb34-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> islands) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shades =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_shades</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/manual-colour-shuffled-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>… and there it is. This version of the system isn’t precisely equivalent to the original, but it mirrors it in every respect that matters to me. The magic is all laid bare. There are no artistic secrets left in this system. Everything you need to know about these images is committed to text. Documented. Described. Codified.</p>
<p>I love the originals no less now that the magic is revealed. There is no art in secrecy.</p>
<p><br></p>
</section>
</section>
<section id="goodnight-sweet-dreams" class="level2">
<h2 class="anchored" data-anchor-id="goodnight-sweet-dreams">Goodnight, sweet dreams</h2>
<blockquote class="blockquote">
<p>One day we’re gonna wake up laughing <br> Put on your dancing shoes <br> You won’t believe the tales I tell <br> That time, Danielle, ain’t mine to choose <br> Danielle, Danielle, Danielle <br> &nbsp; &nbsp; – <a href="https://youtu.be/RClo-JU-8P4?t=79">Tex Perkins</a> (and others, but whatever…)<sup>12</sup></p>
</blockquote>
<p>Much like the <em>Broken Lands</em> system itself,<sup>13</sup> this post has a peculiar genesis. If you read the <a href="https://blog.djnavarro.net/posts/2022-12-26_strange-year/">strange year</a> post I wrote a few months ago, you’d be unsurprised to hear that I am attempting to <a href="https://en.wikipedia.org/wiki/Squaring_the_circle">square a few circles</a> right now. Something broke – rather badly – and I’m trying to work out how to put the pieces together even knowing that the shattered parts can’t go back together in the shape they were before. Aspects to my life that were once central to my sense of self are scattered, and there are little slivers of glass laid everywhere – when I attempt to pick up one of the pieces from the floor I get cut deeply by those tiny transparent needles.</p>
<p>This post is one of those attempts. One of the pieces I need to pick up is my writing. The little cataclysm of 2022 broke my writing. I didn’t become a bad writer, or at least I don’t think I did. I hope I didn’t! Rather, I lost my sense of ownership over my writing. I felt like I was writing for others rather than myself, as if my blog were a product to be optimised rather than a thing I write because I love writing. It’s been some work trying to reconnect with the joy of writing for my own purposes.</p>
<p>And so to the point…</p>
<p>I wrote this post because I loved creating the artwork, and it’s written the way it is written because it makes me happy to write again. That’s it. It’s something I wrote because I want to own my words again. There’s no “take home message”. There’s no “call to action”. You can love it, or hate it, or ignore it. That’s okay. I didn’t write it for you – I wrote it for me.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Also Lev Grossman I guess, but honestly Hale Appleman’s delivery is so good that I cannot possibly attribute the quote to anyone except Eliot.↩︎</p></li>
<li id="fn2"><p>It’s actually a slightly different kind of object called a “long grid” but for now I’ll treat it like a tibble↩︎</p></li>
<li id="fn3"><p>Okay that’s not quite correct. The <code>as.array()</code> method works here because we created this object by calling <code>ambient::long_grid()</code> rather than <code>tidyr::expand_grid()</code> or the <code>expand.grid()</code> function in base R. When you call <code>expand_grid()</code> all you’re doing is creating a regular data frame (or tibble), and you can redefine the x and y values however you like. With a long grid object, however, you’re creating a somewhat different data structure that is <em>required</em> to form a grid. You can’t modify the x and y values the same way you would for a tibble, because those values are part of the underlying data structure. That seems like an odd restriction the first time you encounter it, but the fact that the grid itself is immutable is what makes it trivially easy to call <code>as.array()</code> in this context.↩︎</p></li>
<li id="fn4"><p>Easter egg for the three people who know the reference: I rather suspect that what I’ve done in this section is create the artistic version of the “linear ballistic accumulator” model of human choice behaviour, where my original system was a full fledged diffusion model. Happily for all concerned, neither Scott nor Roger are going to read this post.↩︎</p></li>
<li id="fn5"><p>Fine. Yes, if you look closely at the code you can see I’m doing more than simply applying a curl field. But please… allow me some latitude here. This is a blog post not a dissertation.↩︎</p></li>
<li id="fn6"><p>Presumably using some magic spray paint that coats every layer of the folded fabric, not just the topmost layer!↩︎</p></li>
<li id="fn7"><p>Okay yes the metaphor is a bit strained, but it’s the best I can think of when what I’m actually doing is constructing a surjective mapping from the base space to the embedding space, adding noise to the mapped values, and then using “magic” to pull back to the base space because I’m a good girl who doesn’t throw away the original values when she performs a many-to-one trick.↩︎</p></li>
<li id="fn8"><p>Yes I’m aware that the “many to one” jokes write themselves at this point but as I mentioned previously I am a good girl so I shan’t continue this line of thought.↩︎</p></li>
<li id="fn9"><p>There is an obvious metaphor for the queer experience of living in a world defined by cisheteronormativity here, but I’ll let you flesh out the rest of the mapping on your own. You’re a clever person, you know how to read between the lines, right?↩︎</p></li>
<li id="fn10"><p>I grew up in a small mining town, four hours drive from the nearest city (sort of: technically it was the town founded around the refinery, and the mines were about an hour away). It was traumatic, and there are not enough drugs in the world to make me elaborate.↩︎</p></li>
<li id="fn11"><p>Which, let’s be frank, is saying quite a lot.↩︎</p></li>
<li id="fn12"><p>A note for foreigners: if you are an Australian male-attracted person of a certain age, you immediately understand. It doesn’t matter if you’re a bisexual, a straight woman, or a gay man. It doesn’t matter if you got hooked by Beasts of Bourbon, or by Cruel Sea, or by the solo acts. There’s nothing specific to it. There are no invariants to uncover except Tex Perkins.↩︎</p></li>
<li id="fn13"><p>The very earliest version of the system appeared as a throwaway piece in the <a href="https://art.djnavarro.net/gallery/quarantine/">quarantine moods</a> series, then became frozen in the <a href="https://art.djnavarro.net/gallery/ice-floes/">ice floes</a> system, re-emerged as the <a href="https://art-from-code.netlify.app/day-1/session-4/#fractured-terrain">fractured terrain</a> section in the <em>Art From Code</em> workshop, and then eventually became its own <a href="https://art.djnavarro.net/gallery/broken-lands/">thing</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Shattered Landscapes},
  date = {2023-03-13},
  url = {https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Shattered Landscapes.”</span> March 13,
2023. <a href="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes">https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index.html</guid>
  <pubDate>Sun, 12 Mar 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Fun and games with p5.js and observable.js in quarto</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-14_p5js/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>Be sweet to me, baby <br> I wanna believe in you <br> I wanna believe <br> Be sweet <br> Be sweet to me, baby <br> I wanna believe in you <br> I wanna believe in something <br> &nbsp; – Japanese Breakfast</p>
</blockquote>
<p>Okay, so… I write this blog using <a href="https://quarto.org/">quarto</a>, and quarto has native support for <a href="https://observablehq.com">observable.js</a> … and observable.js supports third-party javascript libraries such as <a href="https://p5js.org/">p5.js</a> executing in code cells… so, like… I can use p5.js to create generative art, inside the browser, inside a blog post? Right?</p>
<p>Apparently the answer to that is yes.</p>
<p>There is but one tiny problem. I don’t know anything about observable.js or p5.js. I supposed I’d best remedy that.</p>
<section id="enabling-p5js" class="level2">
<h2 class="anchored" data-anchor-id="enabling-p5js">Enabling p5js</h2>
<p>The first step in the process is enabling p5.js, which is not one of the core libraries in observable, and is not immediately available. To use a third-party library that exists as an <a href="https://docs.npmjs.com/about-packages-and-modules">NPM modules</a> we can import it using <code>require()</code>.</p>
<div class="cell" data-output="all">
<div class="sourceCode cell-code" id="cb1" data-startfrom="43" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 42;"><span id="cb1-43">P5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p5"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-1" data-nodetype="declaration">

</div>
</div>
</div>
<p>Just like that, thanks to the joy of the <a href="https://www.jsdelivr.com/">jsDelivr CDN</a>, p5.js is now available to me in this post.</p>
<p>Well, sort of. As you can see from the output,<sup>1</sup> the <code>P5</code> object is a function that takes three inputs. To do anything useful with it, I’ll use a trick I learned from <a href="https://observablehq.com/@tmcw/p5">this fabulous notebook by Tom MacWright</a> to run p5.js in “instance mode”. Normally, p5.js works by defining a lot of global objects. That works fine if you’re only doing one “sketch” on a single page, but it’s not so clean if you want to write modular code where a single page (like this one) could contain multiple p5.js sketches.</p>
<p>To run p5.js in instance mode, and in a way that plays nicely with observable.js and quarto, I’ll define <code>createSketch</code> as a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">generator function</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" data-startfrom="53" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 52;"><span id="cb2-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(sketch) {</span>
<span id="cb2-54">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-55">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-56">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">P5</span>(sketch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-57">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span> {</span>
<span id="cb2-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb2-59">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-60">    }</span>
<span id="cb2-61">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">finally</span> {</span>
<span id="cb2-62">    instance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-63">  }</span>
<span id="cb2-64">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-2" data-nodetype="declaration">

</div>
</div>
</div>
<p>Using this approach, each instantiation of <code>P5</code> is attached to a div element that created when <code>createSketch</code> is called. If you want to know more about how this approach works, it’s probably best to go to the original source that I adapted it from, because Tom has commented it and explained it nicely: <a href="https://observablehq.com/@tmcw/p5">observablehq.com/<span class="citation" data-cites="tmcw/p5">@tmcw/p5</span></a></p>
</section>
<section id="donut-1" class="level2">
<h2 class="anchored" data-anchor-id="donut-1">Donut 1</h2>
<p>In keeping with the tradition I’ve set up in the last few blog posts, all the examples are donut themed.<sup>2</sup> When calling <code>createSketch</code> I’ll pass an anonymous function that takes a single argument <code>s</code>, the document element to which all the p5 functions are attached. I’ll use the <a href="https://www.w3schools.com/js/js_arrow_function.asp">arrow notation</a>, so my code is going to look something like this:</p>
<div class="cell" data-eval="false">
<div class="sourceCode cell-code" id="cb3" data-startfrom="75" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 74;"><span id="cb3-75"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb3-76">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// add some p5.js code </span></span>
<span id="cb3-77">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-3" data-nodetype="expression">

</div>
</div>
</div>
<p>The idea in p5.js is all the work is done by two functions. The <code>setup</code> function includes code that is called only once, and if you want to draw static images you can do everything at the setup stage. In contrast the <code>draw</code> function is called repeatedly, so you can use that to add dynamic elements.</p>
<p>Here’s an example of a static sketch that draws a single donut shape using two circles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" data-startfrom="85" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 84;"><span id="cb4-85"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb4-86">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">setup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb4-87">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createCanvas</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-88">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-89">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-90">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-91">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-92">  }</span>
<span id="cb4-93">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-4" data-nodetype="expression">

</div>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>createCanvas</code> creates the drawing area in which the sketch will be rendered. Arguments are the width and height in pixels</li>
<li><code>background</code> sets the background colour. The colour specification is flexible: it can be a recognised colour name, a hex string, or a numeric RGB specification</li>
<li><code>fill</code> sets the fill colour</li>
<li><code>circle</code> draws a circle: the first two arguments specify the origin of the circle, and the third argument specifies the diameter</li>
</ul>
<p>I’ve used <a href="https://dev.to/isiakaabd/method-chaining-in-javascript-154a">method chaining</a> here to remind me that the first <code>fill</code> and the first <code>circle</code> go together: writing <code>s.fill("red").circle(250, 250, 100)</code> on a single line helps me group code together conceptually. It’s mostly for my own convenience though.</p>
</section>
<section id="donut-2" class="level2">
<h2 class="anchored" data-anchor-id="donut-2">Donut 2</h2>
<p>Okay Danielle, that’s nice but it’s not <em>that</em> nice. Can we do something a little more interesting? Maybe with some dynamics? Well okay, Other Danielle, since you asked so sweetly, here’s an example with a moving circle that changes colour and traces out a donut shape:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" data-startfrom="110" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 109;"><span id="cb5-110"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb5-111">  </span>
<span id="cb5-112">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">setup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb5-113">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createCanvas</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-114">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-115">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">noStroke</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-116">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-117">    </span>
<span id="cb5-118">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb5-119">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">translate</span>(</span>
<span id="cb5-120">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">millis</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PI</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-121">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">millis</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PI</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-122">      )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-123">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb5-124">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-125">      }</span>
<span id="cb5-126">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-127">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-128">    </span>
<span id="cb5-129">  }</span>
<span id="cb5-130">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-5" data-nodetype="expression">

</div>
</div>
</div>
<p>This example makes use of some geometry functions included in p5.j (<code>sin</code>, <code>cos</code>, <code>translate</code>), a random number generator (<code>random</code>), and timer that returns the number of milliseconds since the sketch started (<code>millis</code>). These are all documented in the <a href="https://p5js.org/reference/">p5.js reference</a>.</p>
</section>
<section id="donut-3" class="level2">
<h2 class="anchored" data-anchor-id="donut-3">Donut 3</h2>
<p>For the third example we’ll introduce some fonts, adapting an example from <a href="https://observablehq.com/@tmcw/p5">observablehq.com/<span class="citation" data-cites="tmcw/p5">@tmcw/p5</span></a>. First, I’ll add some CSS to import the Courgette font:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">@import</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">https://fonts.googleapis.com/css?family=Courgette</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<style type="text/css">
@import url(https://fonts.googleapis.com/css?family=Courgette);
</style>
</div>
<p>Now we can use that font in a p5.js scrolling window:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" data-startfrom="147" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 146;"><span id="cb7-147"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb7-148">  </span>
<span id="cb7-149">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">setup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb7-150">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createCanvas</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">746</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-151">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textFont</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Courgette'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-152">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textStyle</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BOLD</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-153">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textAlign</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CENTER</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CENTER</span>)</span>
<span id="cb7-154">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-155">    </span>
<span id="cb7-156">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb7-157">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">translate</span>(</span>
<span id="cb7-158">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">millis</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb7-159">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-160">      )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-161">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#222222'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-162">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#DC3F74'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textSize</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-163">      s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Donuts: A Hole World'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-164">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-165">    </span>
<span id="cb7-166">  }</span>
<span id="cb7-167">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-6" data-nodetype="expression">

</div>
</div>
</div>
<p>Could life be any more thrilling than this?</p>
</section>
<section id="donut-4" class="level2">
<h2 class="anchored" data-anchor-id="donut-4">Donut 4</h2>
<p>Well, maybe it can. We could make it a little more interesting by using webGL to move our donut plots into the… THIRD DIMENSION! (Gasp!)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" data-startfrom="179" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 178;"><span id="cb8-179"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb8-180"></span>
<span id="cb8-181">  s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">setup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb8-182">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createCanvas</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">746</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">746</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WEBGL</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-183">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">noStroke</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-184">  }</span>
<span id="cb8-185"></span>
<span id="cb8-186">  s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb8-187"></span>
<span id="cb8-188">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-189"></span>
<span id="cb8-190">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> locX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mouseX</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-191">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> locY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mouseY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  </span>
<span id="cb8-192">    </span>
<span id="cb8-193">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ambientLight</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-194">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pointLight</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">190</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">190</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> locX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> locY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-195">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pointLight</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">190</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-196">  </span>
<span id="cb8-197">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">specularMaterial</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-198">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotateX</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frameCount</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-199">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotateY</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frameCount</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-200">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">torus</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-201">  }</span>
<span id="cb8-202"></span>
<span id="cb8-203">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-7" data-nodetype="expression">

</div>
</div>
</div>
<p>If you move the mouse over the donut<sup>3</sup> you’ll see that the light source moves with it.</p>
</section>
<section id="donut-5" class="level2">
<h2 class="anchored" data-anchor-id="donut-5">Donut 5</h2>
<p>For the final example, I’ll do a tiny bit of object-oriented programming. Inspired by a generative art course by Bernat Ferragut (<a href="https://ga-course.surge.sh/">ga-course.surge.sh</a>) that I was skimming yesterday, I’ll define a <code>Dot</code> class that creates a particle that moves around on the canvas and has the ability to bounce off circular boundaries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" data-startfrom="215" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 214;"><span id="cb9-215"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Dot {</span>
<span id="cb9-216">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">constructor</span>(sketch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size) {</span>
<span id="cb9-217">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sketch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-218">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-219">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-220">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-221">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-222">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velX</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-223">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-224">  }</span>
<span id="cb9-225"></span>
<span id="cb9-226">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>() {</span>
<span id="cb9-227">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">noStroke</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-228">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-229">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-230">  }</span>
<span id="cb9-231"></span>
<span id="cb9-232">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">move</span>() {</span>
<span id="cb9-233">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-234">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-235">  }</span>
<span id="cb9-236">  </span>
<span id="cb9-237">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bounce</span>(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inside) {</span>
<span id="cb9-238">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-239">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-240">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (</span>
<span id="cb9-241">      inside <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb9-242">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>inside <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> radius</span>
<span id="cb9-243">    ) {</span>
<span id="cb9-244">    </span>
<span id="cb9-245">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// https://math.stackexchange.com/a/611836</span></span>
<span id="cb9-246">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-247">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-248">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-249">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-250">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velX</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>nx)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-251">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">velY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ny)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-252">    </span>
<span id="cb9-253">    }</span>
<span id="cb9-254">  }</span>
<span id="cb9-255">  </span>
<span id="cb9-256">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-8" data-nodetype="declaration">

</div>
</div>
</div>
<p>Naturally, I will use this to draw a donut:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" data-startfrom="263" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 262;"><span id="cb10-263"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createSketch</span>(s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb10-264"></span>
<span id="cb10-265">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-266">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-267">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> dotList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-268">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-269">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6B1B00"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-270">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AE8B70"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-271">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#F9FEFB"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-272">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#56382D"</span>) </span>
<span id="cb10-273">  ]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-274"></span>
<span id="cb10-275">  s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">setup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb10-276">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createCanvas</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">746</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">746</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-277">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb10-278">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TWO_PI</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-279">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-280">      dotList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>(dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dot</span>(</span>
<span id="cb10-281">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-282">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-283">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-284">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(palette)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-285">        s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb10-286">      ))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-287">    }</span>
<span id="cb10-288">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-289">    </span>
<span id="cb10-290">  s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb10-291">    dotList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(dot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb10-292">      dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-293">      dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">move</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-294">      dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bounce</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-295">      dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bounce</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-296">    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-297">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-298">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-9" data-nodetype="expression">

</div>
</div>
</div>
<p>Mmmm…. donuts.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>An assignment like this would not normally produce any visible output for an observable.js code cell within in a quarto document, but I’ve set <code>output: all</code> for expository purposes.↩︎</p></li>
<li id="fn2"><p>A tradition that, like most things, will last only until I get bored with it.↩︎</p></li>
<li id="fn3"><p>I can’t make up my mind if the colour scheme implies this is a bisexual donut or a trans donut. Oh wait, it’s probably both.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Fun and Games with P5.js and Observable.js in Quarto},
  date = {2023-01-14},
  url = {https://blog.djnavarro.net/posts/2023-01-14_p5js},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Fun and Games with P5.js and
Observable.js in Quarto.”</span> January 14, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-14_p5js">https://blog.djnavarro.net/posts/2023-01-14_p5js</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>P5</category>
  <category>Observable</category>
  <category>Javascript</category>
  <category>Quarto</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-14_p5js/index.html</guid>
  <pubDate>Fri, 13 Jan 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-14_p5js/donut.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Deploying R with kubernetes</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><strong>NOTE:</strong> The donuts app is no longer live. It was starting to cost me money! :-)</p>
<blockquote class="blockquote">
<p>Me: ooh I made a kubernetes app <br> 10yo: I made a paper dragon <br> Me: yeah… yours is cooler <br> &nbsp; – My daughter, reminding me that perspective is a thing</p>
</blockquote>
<p>Story time. There was a very weird moment in machine learning history, about 20 years ago, when the probabilistic AI folks were completely obsessed with Bayesian nonparametrics, and a disproportionate number of papers at NeurIPS had titles like “[Cutesy prefix]: An infinite dimensional model of [something really boring]”. In most cases, you’d dig into the paper and discover that they hadn’t done anything very special. All they’d done is implement a Bayesian model of [boring thing] that was ambiguous about the number of [components], and instead of thinking about what prior constraints make sense for the problem they were trying to solve, the authors used a <a href="https://en.wikipedia.org/wiki/Chinese_restaurant_process">Chinese restaurant process</a> (CRP) to specify the conditional prior distribution over allocations of observations to components. The CRP has the mildly-interesting property that for any finite sample size there is a non-negligible conditional probability that the next observation belongs to a hitherto unobserved component, and asymptotically the partitions over observations it generates have a countably infinite number of components. Alas, exactly zero of these papers happened to have an infinitely large data set to train the model on, and without fail the results in the papers didn’t appear to have anything “infinite dimensional” about them whatsoever.</p>
<p>I say this with love and gentleness, dear reader, because I wrote quite a few of those papers myself.</p>
<p>Why do I tell this story in a blog post that has absolutely nothing to do with machine learning, statistics, or Bayesian inference? Because in a fit of pique, somewhere around 2006, I decided to do the damned reading myself and learned quite a lot of Bayesian nonparametrics. Not because I thought it would be useful, but because I was curious and I was getting extremely irritated at overconfident machine learning boys telling me that as a mere psychologist I couldn’t possibly understand the depth of their thinking.</p>
<p>Which brings me, naturally enough, to <a href="https://kubernetes.io/">kubernetes</a>.</p>
<p><br></p>
<section id="ggplot2-on-kubernetes" class="level2">
<h2 class="anchored" data-anchor-id="ggplot2-on-kubernetes">ggplot2 on kubernetes</h2>
<p>Let’s start at the ending, shall we? The art shown below is generated at <a href="https://donut.djnavarro.net">donut.djnavarro.net</a>, and it is more-or-less unique. The site is designed to serve a different image every time it is accessed, using the timestamp as the seed to a generative art system written in R with ggplot2. If you refresh this page, the artwork will change:</p>
<a href="https://donut.djnavarro.net"><img width="100%" src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/https:/donut.djnavarro.net" title="donut.djnavarro.net"></a>
<p><br></p>
<p>Under the hood, the site is a kubernetes app running containerised R code with google kubernetes engine. Sounds fancy, right?</p>
<p>Well, maybe. Shall we take a look at how it works? Perhaps, like so many other things in this world, it will turn out not to be anywhere near as complicated as it is made out to be.</p>
<p><br></p>
</section>
<section id="um.-what-is-kubernetes-do-i-care" class="level2">
<h2 class="anchored" data-anchor-id="um.-what-is-kubernetes-do-i-care">Um. What is kubernetes? Do I care?</h2>
<p>There’s nothing I love more than looking at the website for a software tool and trying to work out what it does by reading how the developers have chosen to describe it. On the <a href="https://kubernetes.io/">kubernetes</a> website they’ve gone with the headline <em>“Production-Grade Container Orchestration”</em>, and started with this:</p>
<blockquote class="blockquote">
<p>Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.</p>
</blockquote>
<p>As opening lines go it wouldn’t get you a lot of attention on grindr<sup>1</sup> but context makes a difference and it’s not so terrible as a description of what kubernetes does. It’s a useful tool if you need to deploy an application on a cluster<sup>2</sup> and have that application run smoothly as you “scale” your cluster by adding more “nodes”<sup>3</sup> to the cluster. For the application I’m about to write, kubernetes is overkill. I don’t actually need kubernetes to run something this simple, but this is a learning exercise. I’m doing it so that I can familiarise myself with core concepts. When I get to the part of the post that actually <em>does</em> something with kubernetes I’ll start introducing terminology, but for now that’s enough for us.</p>
<p>Should you care as an R user? I mean, probably not. If you want a proper answer, Roel Hogervorst has an excellent blog post called <a href="https://www.r-bloggers.com/2022/04/wtf-is-kubernetes-and-should-i-care-as-r-user/"><em>“WTF is Kubernetes and Should I Care as R User?”</em></a> I won’t duplicate content here: you should read the original post. But the short answer is that you probably won’t need to run your own application using kubernetes, but you might need to contribute code to a larger application that uses it. If so, you may want to play around with kubernetes to make sure you understand what it does.</p>
<p><br></p>
</section>
<section id="write-the-r-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="write-the-r-code">Write the R code</h2>
<blockquote class="blockquote">
<p>Likes to watch me in the glass room, bathroom <br> Chateau Marmont, slippin’ on my red dress, puttin’ on my makeup <br> Glass room, perfume, cognac, lilac fumes <br> Says it feels like heaven to him <br> &nbsp; – Lana Del Rey<sup>4</sup></p>
</blockquote>
<p>Let’s begin at the beginning. Anytime you want to write something, it helps to have something to say. There is nothing more tiresome than an op-ed writer trying to fill out 1000 words to make the Saturday paper deadline, but tech writing that tries to demonstrate a tool<sup>5</sup> without anything even remotely resembling an application runs a very close second. So let’s at least <em>pretend</em> we have a use case for this yeah?</p>
<p>In real life I am an unemployed 40-something woman who smokes and drinks too much and makes very poor choices around men, but in my spare moments I make <a href="https://art.djnavarro.net/">generative art</a> using R. It’s an extremely unprofitable hobby<sup>6</sup> but it’s not completely without market value. Among other things the lovely folks at Posit were kind enough to pay me to put together an <a href="https://art-from-code.netlify.app">“art from code”</a> workshop last year, and thanks to their kindness and my weird priorities there is now a nice little online tutorial that you can use to learn how to make generative art in R. What I’m going to do in this post is build a little kubernetes app that creates generative in R. It won’t be very fancy, but hopefully you can see how an app like this could be expanded<sup>7</sup> to create a platform for “long form generative art” with R, not dissimilar to what <a href="https://www.artblocks.io/">artblocks</a> or <a href="https://www.fxhash.xyz/">fxhash</a> allow generative artists to do with javascript. The artist supplies code (in this case using R) that generates artwork, and the server uses that code to generate an arbitrary number of pieces that… idk, I guess you could sell them? Whatever. Do I look like a capitalist to you?</p>
<p>To build something like this we’ll need some R code that creates generative art. I won’t try to make anything too fancy here. In fact, I’ll reuse code for the “donuts” system I used in my <a href="https://blog.djnavarro.net/queue/">multi-threaded task queues post</a>. It’s a good choice for this application because the donuts system is something that is extremely easy to implement in R because the ggplot2 package provides tooling for creating data visualisations that use polar geometry<sup>8</sup></p>
<p>Here’s how you build the system. I won’t go into detail because this system is a very minor variation on <a href="https://art-from-code.netlify.app/day-1/session-1/#composition">this one in my art-from-code tutorial</a>, but here’s the gist. First, the plot is going to need a colour scheme, so we’ll define a function that samples a palette randomly with the assistance of the ggthemes package:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb1" data-startfrom="4" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 3;"><span id="cb1-4">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-7">}</span></code></pre></div>
</div>
</div>
<p>Next, we’ll have a function that generates a table full of random numbers that we will later on map onto various plot aesthetics to make a pretty picture:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" data-startfrom="10" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 9;"><span id="cb2-10">sample_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>){</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb2-12">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x0 =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb2-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb2-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb2-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb2-20">  )</span>
<span id="cb2-21">}</span></code></pre></div>
</div>
</div>
<p>Now comes the part of the system that does most of the artistic work, by defining a visual layout for any plots that are created using the system:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" data-startfrom="24" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 23;"><span id="cb3-24">donut_style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, palette) {</span>
<span id="cb3-25">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb3-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data,</span>
<span id="cb3-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb3-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x0,</span>
<span id="cb3-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y0,</span>
<span id="cb3-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x1,</span>
<span id="cb3-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y1,</span>
<span id="cb3-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade,</span>
<span id="cb3-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> size</span>
<span id="cb3-34">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-35">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-36">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb3-37">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb3-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep</span>
<span id="cb3-40">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-41">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb3-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb3-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-44">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep</span>
<span id="cb3-45">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-46">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-47">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_linewidth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-48">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-49">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb3-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb3-51">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> palette[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-52">      )</span>
<span id="cb3-53">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-54">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(</span>
<span id="cb3-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb3-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb3-57">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb3-58">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()</span>
<span id="cb3-59">    )</span>
<span id="cb3-60">}</span></code></pre></div>
</div>
</div>
<p>The last step is a function that puts it all together. The <code>donut()</code> function takes a single integer-valued input and returns a plot object that happens to look slightly pretty:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb4" data-startfrom="63" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 62;"><span id="cb4-63">donut <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb4-64"></span>
<span id="cb4-65">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-66">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-67"></span>
<span id="cb4-68">  line_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"331311"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"11"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"111115"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-69"></span>
<span id="cb4-70">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">donut_style</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-71">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> line_spec)</span>
<span id="cb4-72"></span>
<span id="cb4-73">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb4-74">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-75">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb4-76">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb4-77">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> line_spec</span>
<span id="cb4-78">      )</span>
<span id="cb4-79">  }</span>
<span id="cb4-80">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb4-81">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-82">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb4-83">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb4-84">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> line_spec</span>
<span id="cb4-85">      )</span>
<span id="cb4-86">  }</span>
<span id="cb4-87"></span>
<span id="cb4-88">  pic</span>
<span id="cb4-89">}</span></code></pre></div>
</div>
</div>
<p>Here it is in action:</p>
<div class="page-columns page-full">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(seed <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">donut</span>(seed))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-1.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-2.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-3.png" class="img-fluid" width="576"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-4.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-5.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-6.png" class="img-fluid" width="576"></p>
</div>
</div>
</div>
</div>
<p>Not my finest work, but still pretty enough to be fun.</p>
<p><br></p>
</section>
<section id="expose-an-api" class="level2">
<h2 class="anchored" data-anchor-id="expose-an-api">Expose an API</h2>
<blockquote class="blockquote">
<p>Are you posting hole on main again? <br> &nbsp; – Everyone who knows me, eventually</p>
</blockquote>
<p>The next step in the process is to define a public API that specifies how visitors to the website can interact with the underlying R code. That’s not something we typically do with R code because we aren’t usually in the business of writing web applications in R, but thanks to endless joy that is the <a href="https://www.rplumber.io/">plumber</a> this task can be accomplished with a few lines of code decoration:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb6" data-startfrom="91" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 90;"><span id="cb6-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#* draws a donut plot</span></span>
<span id="cb6-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#* @serializer svg list(width = 10, height = 10)</span></span>
<span id="cb6-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#* @get /</span></span>
<span id="cb6-94"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) {</span>
<span id="cb6-95">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(seed)) {</span>
<span id="cb6-96">    seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>())</span>
<span id="cb6-97">  }</span>
<span id="cb6-98">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">donut</span>(seed))</span>
<span id="cb6-99">}</span></code></pre></div>
</div>
</div>
<p>There are a few things to note here:</p>
<ul>
<li><p>The code decoration on line 93 specifies that the function defined in lines 94-99 will be called whenever an HTML <code>GET</code> request is sent to the <code>/</code> endpoint. Or, in simpler language, whenever someone visits the main page for the website that eventually ended up being hosted at <a href="https://donut.djnavarro.net">donut.djnavarro.net</a>.</p></li>
<li><p>The code decoration on line 92 how the output from the R function (an in-memory data structure) will be serialised (to a binary stream) and transmitted to the user.<sup>9</sup> In this case, the output is a plot object that would normally be handled by the R graphics device. What I’ve used plumber to do here, is have this output converted to an svg file. It’s that svg file that the website will serve to the user.</p></li>
<li><p>Finally, notice that the function does take a <code>seed</code> argument.<sup>10</sup> I’ve set <code>NA</code> as the default value rather than the more conventional <code>NULL</code> because plumber won’t accept a <code>NULL</code> default in this context.</p></li>
</ul>
<p>Noting that all the code I’ve presented so far belongs to a file called <a href="https://github.com/djnavarro/donut/blob/main/server.R"><code>server.R</code></a> (the link goes to the github repo for this “donut” side-project), I can start the web server running locally on port 3456 like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">plumber<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plumb</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server.R"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="containerise-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="containerise-it">Containerise it</h2>
<p>At this point in the process I have a perfectly functional webserver… that only runs on my machine which just happens to have the dependencies installed, and is only accessible locally from that machine. We’ll need to fix both of those problems.</p>
<p>Let’s start by fixing the first one by running the website from within a docker container. Under normal circumstances I’d walk you through that process, but since I wrote a <a href="https://blog.djnavarro.net/playing-with-docker/">long blog post about docker</a> just the other day, I’ll jump straight to showing you the <a href="https://github.com/djnavarro/donut/blob/main/Dockerfile"><code>Dockerfile</code></a>:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.2</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.source <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/djnavarro/donut"</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.authors <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle Navarro &lt;djnavarro@protonmail.com&gt;"</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.description DESCRIPTION</span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.licenses <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MIT"</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'install.packages(c("ggplot2", "scales", "tibble", "dplyr", "plumber", "ggthemes"))'</span></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> server.R /home/server.R</span>
<span id="cb8-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">EXPOSE</span> 80</span>
<span id="cb8-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plumber::plumb(file="/home/server.R")$run(host="0.0.0.0", port = 80)'</span></span></code></pre></div>
</div>
</div>
</div>
<p>Every instruction in this dockerfile is something I covered in the last post, except for the <a href="https://docs.docker.com/engine/reference/builder/#expose"><code>EXPOSE</code></a> instruction on line 10. That one tells the container to listen on port 80. It doesn’t necessarily publish the output anywhere accessible from outside the container<sup>11</sup> but it does mean that the plumber web server running inside the container is listening on port 80 and can create a response when it receives a request. I’ll deal with the publishing issue later.</p>
<p><br></p>
</section>
<section id="push-it-to-the-registry" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="push-it-to-the-registry">Push it to the registry</h2>
<p>The next step in the process is to host the image created from this dockerfile on a public registry.<sup>12</sup> I talked about that process in the last post too, so again I’ll keep things simple. The process I followed for the donut project is essentially identical to the one I used in this <a href="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/#hosting-images">section of the docker post</a>. I’ve created a github actions workflow that automatically builds the image on github and hosts it with the github container registry. The resulting image name is <code>ghcr.io/djnavarro/donut:main</code> and here’s the <a href="https://github.com/djnavarro/donut/blob/main/.github/workflows/build-image.yaml"><code>build-image.yaml</code></a> workflow I’m using:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.github/workflows/build-image.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> publish donut image</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">REGISTRY</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IMAGE_NAME</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.repository }}</span></span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build-and-push-image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb9-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strategy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fail-fast</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb9-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./Dockerfile</span></span>
<span id="cb9-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io/djnavarro/donut</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">permissions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> read</span></span>
<span id="cb9-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> write</span></span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> checkout repository</span></span>
<span id="cb9-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v2</span></span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> login to the container registry</span></span>
<span id="cb9-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9</span></span>
<span id="cb9-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registry</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ env.REGISTRY }}</span></span>
<span id="cb9-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">username</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.actor }}</span></span>
<span id="cb9-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb9-35"></span>
<span id="cb9-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> extract metadata (tags, labels) for docker</span></span>
<span id="cb9-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> meta</span></span>
<span id="cb9-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38</span></span>
<span id="cb9-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.image }}</span></span>
<span id="cb9-41"></span>
<span id="cb9-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> build and push docker image</span></span>
<span id="cb9-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc</span></span>
<span id="cb9-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb9-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.dockerfile }}</span></span>
<span id="cb9-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tags</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.meta.outputs.tags }}</span></span>
<span id="cb9-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.meta.outputs.labels }}</span></span></code></pre></div>
</div>
</div>
</div>
<p>At long, long last we have all the precursors in place. We have a little web application that runs inside a docker container, and the image describing that container is hosted on a registry.<sup>13</sup> We can get started on the kubernetes side of things…</p>
<p><br></p>
</section>
<section id="create-a-kubernetes-cluster" class="level2">
<h2 class="anchored" data-anchor-id="create-a-kubernetes-cluster">Create a kubernetes cluster</h2>
<p>At the risk of stating the bloody obvious, if you want to use kubernetes to deploy an application on a cluster… you’re probably going to need a cluster running kubernetes. You can get yourself one of these in lots of different ways but the way I’m going to do it is with GKE, the <a href="https://cloud.google.com/kubernetes-engine">google kubernetes engine</a>. You’ll need a google account to do this, and yes this is something that they charge actual money for, but the good news is that when you sign up for google cloud services you get a few hundred dollars of credit to start with. That’s pretty useful for novices: it’s nice to be able to play around and learn the basics before you have to start worrying about what it’s going to cost.</p>
<p>If you go down that path you can access your projects from the cloud console, located at <a href="https://console.cloud.google.com/">console.cloud.google.com</a>. Once there you can navigate to the various pages you’ll need by clicking on links and menu items, but google offers a lot of different cloud services and it does take a little while for the interface to start feeling familiar, so I’ll link to the pages you need directly as well.</p>
<p>Before you can create a cluster of your very own, you need to create a project. Pretty much everything you do with google cloud services is organised into projects so that’s where we’ll start. To create a project, go to <a href="https://console.cloud.google.com/projectcreate">console.cloud.google.com/projectcreate</a> and follow the prompts. Give your project a fancy name that makes you sound cool: I called mine <code>donut-art</code>.</p>
<p>Now that you have a project, you’ll need to enable the specific google cloud services that your project will need access to. In this example the only thing I’ll need is GKE itself, but in other situations you might need access to google cloud storage or something like that. To enable GKE on your current project go to <a href="https://console.cloud.google.com/kubernetes/">console.cloud.google.com/kubernetes/</a>. If it hasn’t already been enabled for the project the page will ask if you want to. Even more conveniently, if you don’t have a cluster running it will ask if you want to create one.<sup>14</sup> It will give you two options: an “autopilot” cluster is one where google will automatically manage the configuration for you, whereas for a “standard” cluster you’ll have to be more explicit about how many nodes you want and how they are organised. There are situations where you need to use the standard cluster,<sup>15</sup> but this is not one of those so I went with the autopilot approach because it’s simpler. I didn’t need to change any of the defaults: I called my cluster <code>donut-cluster</code>, and created it in the region <code>australia-southeast1</code>.<sup>16</sup></p>
<p>Here’s a screenshot showing you what the relevant bit of the google kubernetes engine console looks like for me now that I have a cluster up and running:</p>
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/donut-cluster.png" class="img-fluid"></p>
<p>If I click on the “donut-cluster” link it takes me to a page with a lot more detail, but you can see that some of the information is the same:</p>
<p><br></p>
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/donut-cluster-detail.png" class="img-fluid"></p>
<p><br></p>
</section>
<section id="command-line-tools" class="level2">
<h2 class="anchored" data-anchor-id="command-line-tools">Command line tools</h2>
<p>Time for a little digression.</p>
<p>Take a look at the menu shown in the last screenshot. If I click on the “connect” button and it will reveal a command I can use to connect to the cluster from the terminal on my laptop… but it requires me to have the gcloud command line tools installed. Now, if you don’t want to install the tools locally you can avoid this by selecting the “run in cloud shell” option that also appears on the dialog box. However, I dislike the cloud shell and prefer to work from my own terminal. So, the next step is to install the command line tools. For this project, the two things I need are gcloud (to interact with google cloud services) and kubectl (to interact with kubernetes).</p>
<section id="installing-gcloud" class="level3">
<h3 class="anchored" data-anchor-id="installing-gcloud">Installing gcloud</h3>
<p>It turns out that installing the command line tools is relatively straightforward, and is made a lot easier thanks to the <a href="https://cloud.google.com/sdk/docs/install">gcloud installation instructions</a> which are detailed and not too hard to follow. In addition to the basic tools, I installed the “gke-gcloud-auth-plugin” which are needed for authentication. Once the command line tools are installed, authentication from your terminal is a one-line command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> auth login</span></code></pre></div>
</div>
<p>I can now interact with my google cloud projects from my command line.</p>
</section>
<section id="installing-kubectl" class="level3">
<h3 class="anchored" data-anchor-id="installing-kubectl">Installing kubectl</h3>
<p>The second tool I need for this project is <a href="https://kubernetes.io/docs/reference/kubectl/">kubectl</a>, a command line tool used to control a kubernetes cluster. You can find installation instructions for different operating systems by visiting the kubernetes <a href="https://kubernetes.io/docs/tasks/tools/">install tools</a> page. I’m doing this from a linux machine, so I also found it useful to enable autocompletion of kubectl commands within the bash shell. The instructions for this are included in the kubectl install page for linux.</p>
</section>
<section id="connect-to-the-cluster" class="level3">
<h3 class="anchored" data-anchor-id="connect-to-the-cluster">Connect to the cluster</h3>
<p>Now that I have gcloud and kubectl running, I can connect to my cluster. The first thing to do is use gcloud to get the credentials needed to connect to my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">USE_GKE_GCLOUD_AUTH_PLUGIN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>True</span>
<span id="cb11-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> container clusters get-credentials donut-cluster <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--zone</span> australia-southeast1 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span> donut-art</span></code></pre></div>
</div>
<pre><code>Fetching cluster endpoint and auth data.
kubeconfig entry generated for donut-cluster.</code></pre>
<p>Then I can use kubectl to verify that it can connect to my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> cluster-info</span></code></pre></div>
</div>
<pre><code>Kubernetes control plane is running at blah blah blah
GLBCDefaultBackend is running at blah blah blah
KubeDNS is running at blah blah blah
KubeDNSUpstream is running at blah blah blah
Metrics-server is running at blah blah blah</code></pre>
<p>Okay, I may have edited the output slightly. The missing bits are the various URLs. They aren’t very interesting… the main thing to notice is that yes, kubectl can connect to my cluster and the cluster is up and running.</p>
<p><br></p>
</section>
</section>
<section id="kubernetes-terminology" class="level2">
<h2 class="anchored" data-anchor-id="kubernetes-terminology">Kubernetes terminology</h2>
<p>Not surprisingly, kubernetes has a lot of terminology. That’s quite daunting when you’re getting started and I’m not going to attempt a complete glossary here. Instead, let’s start with these four terms, since we’ll use them a lot:</p>
<ul>
<li><strong>Container</strong>. This has the same meaning it has in other contexts: a container is a self-contained executable that bundles up dependencies and runs isolated from other processes on the machine. Kubernetes supports other types of containers besides docker containers, but let’s pretend we’re only talking about docker here.</li>
<li><strong>Pod</strong>. A pod is the smallest deployable unit you can create: it is an abstraction that refers to one or more containers working together. An application can have many pods running on many machines (nodes) but each pod runs on one machine. Pods are considered ephemeral. Kubernetes will have no qualms about shutting down a pod if it doesn’t seem to be doing its job, or creating new pods to replace it if it needs to,<br>
</li>
<li><strong>Deployment</strong>. A deployment is an abstraction that specifies a collection of pods that your application runs. Essentially it describes your “desired state” for the application. When you “apply” a deployment kubernetes will start the application running (more or less), and try to make the thing that’s actually running look like your stated deployment configuration.</li>
<li><strong>Service</strong>. A service is an abstraction that specifies how the pods running on your kubernetes cluster communicate with the outside world. They’re awfully handy things to have if you want your application to be accessible on the web.</li>
</ul>
<p>Conceptually, it’s also helpful to know these terms at the very beginning, even though frankly I’m not going to do anything with them here:</p>
<ul>
<li><strong>Node</strong>. A node refers one of the machines running in your cluster.</li>
<li><strong>Control Plane</strong>. The control plane refers to a collection of processes that run together on a single node and are in charge of actually running the whole thing. We won’t need to do anything to the control plane in this post other than leave it alone and let it do its job, but it does help to know the term because it shows up everywhere.</li>
</ul>
<p>More terms will appears as we go along – and I’ll try to explain all those when they pop up – but these are the ones that I wish I’d understood properly before I started trying to play with kubernetes clusters.</p>
<p><br></p>
</section>
<section id="create-a-deployment" class="level2">
<h2 class="anchored" data-anchor-id="create-a-deployment">Create a deployment</h2>
<p>The way to configure your kubernetes cluster is with manifest files that are written in <a href="https://en.wikipedia.org/wiki/YAML">yaml</a> format and use the <code>kubectl apply</code> command to update your cluster using the instructions laid out in the manifest file. You can use a manifest to modify any aspect to your cluster configuration, and later in this post I’ll show a few more manifests, but for now here’s the <a href="https://github.com/djnavarro/donut/blob/main/deployment.yaml"><code>deployment.yaml</code></a> file I’m using to specify a deployment for the donuts application:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut-example</span></span>
<span id="cb15-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut</span></span>
<span id="cb15-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matchLabels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut-example</span></span>
<span id="cb15-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut-example</span></span>
<span id="cb15-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut</span></span>
<span id="cb15-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io/djnavarro/donut:main</span></span>
<span id="cb15-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">imagePullPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Always</span></span>
<span id="cb15-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"64Mi"</span></span>
<span id="cb15-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"250m"</span></span>
<span id="cb15-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">limits</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"128Mi"</span></span>
<span id="cb15-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500m"</span></span>
<span id="cb15-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containerPort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span></code></pre></div>
</div>
</div>
<p>For the moment, let’s censor the metadata and everything that uses the metadata so that we can focus on what the rest of the manifest is doing:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb16-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb16-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names are metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io/djnavarro/donut:main</span></span>
<span id="cb16-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">imagePullPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Always</span></span>
<span id="cb16-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"64Mi"</span></span>
<span id="cb16-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"250m"</span></span>
<span id="cb16-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">limits</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"128Mi"</span></span>
<span id="cb16-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500m"</span></span>
<span id="cb16-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb16-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containerPort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span></code></pre></div>
</div>
</div>
<p>There’s a lot going on here, so for the moment let’s focus on the bottom.<sup>17</sup> The section of the code from lines 13-25 is used to specify the docker containers<sup>18</sup> that my cluster is going to deploy. There’s only one container listed in this section, and the line that reads <code>image: ghcr.io/djnavarro/donut:main</code> is the way that I’ve specified the docker image to use when creating the container. There are other settings I’ve used to set up this container: I’ve asked kubernetes to allocate memory and cpu resources to the container, and I’ve exposed container port 80 (which, if you can remember back that far, is where the plumber web API is running inside the container). I’ve also set <code>imagePullPolicy: Always</code> to ensure that every time I update this deployment kubernetes will pull the image from the registry afresh. I did that because more often than not while I was writing code for the kubernetes deployment I was tweaking the image too, and I wanted to make sure that I was always trying to deploy the most recent version of the image.</p>
<p>Okay, now that we know what’s going on in that section of the code, let’s collapse that part and think about the manifest file like this:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb17-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb17-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb17-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb17-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb17-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb17-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">details of one or more containers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
</div>
<p>Okay, so now let’s think about the bottom part of this code too. Lines 9-13 of this condensed pseudo-manifest describe some kind of template. But a template for what? Well, as clearly stated on line 13 in human(ish) language, it’s a template for “one or more containers”. In kubernetes terminology, a deployable thing that holds one or more containers is a pod… so this section of the code is describing a <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates">pod template</a>. It’s an instruction to kubernetes that says… “hey, when you create a pod as part of this deployment, here’s the template you should use”. So we can simplify again:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb18-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb18-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb18-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb18-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">details of the pod template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
</div>
<p>In this condensed form we can see that lines 5-10 provide a specification of the deployment itself. I’ve given it a pod template that tells kubernetes what the pods should look like, and I’ve specified the number of “replicas”. How many copies of this pod do I want it to run in this deployment: for no good reason at all I decided to run two (i.e., two replicas).</p>
<p>If we simplify the manifest yet again, we can see the top-level description:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb19-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">some metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb19-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">details of the deployment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
</div>
<p>The only other things to point out right now is that the “kind” field is used to tell kubernetes what type of object to create (a Deployment), and the “apiVersion” field is used to specify which version of the kubernetes API to use when interpreting the manifest. That’s handy to note because later on I’ll be using APIs that are a bit more specific to the google kubernetes engine.</p>
<p>Okay, so now that we have some sense of what’s going on in the <code>deployment.yaml</code> file (ignoring the fact that I’ve glossed over the metadata bits), let’s actually apply it to our cluster:<sup>19</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> deployment.yaml</span></code></pre></div>
</div>
<p>To see if it’s working we can use <code>kubectl get deployments</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> get deployments</span></code></pre></div>
</div>
<pre><code>NAME    READY   UP-TO-DATE   AVAILABLE   AGE
donut   2/2     2            2           19h</code></pre>
<p>It is alive.</p>
<p>For more details on this part of the process, check out the kubernetes documentation on <a href="https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/">deploying a stateless application</a>. You may also want to look at the page on <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">managing container resources</a> at this point.</p>
<p><br></p>
</section>
<section id="expose-the-deployment-no-https" class="level2">
<h2 class="anchored" data-anchor-id="expose-the-deployment-no-https">Expose the deployment (no https)</h2>
<p>At this point my little donut application is running happily on the cluster, but it doesn’t have a public IP address. No-one can visit it. To expose the deployment to the world you’ll need to start a service running that takes care of this for you. Exactly how you go about doing this depends on whether you want to enable https on the website. If you’re not too fussed about https the process is fairly simple and you can find details on how to do it by reading the <a href="https://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address/">tutorial on exposing an external IP address</a>, and you may find the kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/">documentation on services</a> helpful too. The TL;DR is that it’s simple enough that you don’t even need to bother with a manifest file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> expose deployment donut <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LoadBalancer <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>donut-service</span></code></pre></div>
</div>
<p>The application is now online. It has a public IP address that you can find, and if you own a domain that you want to map to that IP address all you have to do is create a DNS record that points the URL at the appropriate IP. With any luck your domain provider will have some decent documentation for this. For instance, I use google domains for <code>djnavarro.net</code> domain, and they have some pretty decent <a href="https://support.google.com/a/answer/2579934?hl=en">instructions on configuring DNS records</a> that I could use to point <code>donut.djnavarro.net</code> at the IP address for my kubernetes application.</p>
<p>Unfortunately for me, I am a masochist, and as such I chose the option that delivers pain.</p>
<p><br></p>
</section>
<section id="expose-the-deployment-with-https" class="level2">
<h2 class="anchored" data-anchor-id="expose-the-deployment-with-https">Expose the deployment (with https)</h2>
<blockquote class="blockquote">
<p>I like the kick in the face <br> And the things you do to me <br> I love the way that it hurts <br> I don’t miss you, I miss the misery <br> &nbsp; – Halestorm</p>
</blockquote>
<p>Configuring the kubernetes application to use https is a bit of a pain in the ass.<sup>20</sup> I’m deploying all this through google kubernetes engine, so the approach I took was to follow the guide for using <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs">google-managed ssl certificates</a>. The guide is excellent… apart from a couple of minor… issues… that really fucked me<sup>21</sup> when I tried to follow it. I’ll mention those as I go.</p>
<section id="get-a-static-ip" class="level3">
<h3 class="anchored" data-anchor-id="get-a-static-ip">Get a static IP</h3>
<p>The first thing you have to do is create a static IP address that you’ll later use for your cluster. The <code>gcloud compute addresses create</code> command does that for you. Here’s how I did that for my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> compute addresses create donut-ip-address <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span> donut-art</span></code></pre></div>
</div>
<!-- :::{.column-page-right} -->
<!-- ``` -->
<!-- Created [https://www.googleapis.com/compute/v1/projects/donut-art/global/addresses/donut-ip-address] -->
<!-- ``` -->
<!-- ::: -->
<p>This prints out a very boring message that informs you that the ID address has been created. More helpfully, now that the IP address exists you can ask google to tell you what it is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> compute addresses describe donut-ip-address <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb25-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span> donut-art</span></code></pre></div>
</div>
<p>When you do this, the output prints out the IP address and some other details. Later on, this is the address you’ll create a DNS record for so that – in my case – the <a href="https://donut.djnavarro.net/">https://donut.djnavarro.net/</a> address points to the correct location.</p>
</section>
<section id="get-a-certificate" class="level3">
<h3 class="anchored" data-anchor-id="get-a-certificate">Get a certificate</h3>
<p>The next step in the process is to create a managed certificate. Somebody needs to certify that my website is what it says it is.<sup>22</sup> I’m going to need a manifest file for this, which I’ve saved as <a href="https://github.com/djnavarro/donut/blob/main/managed-cert.yaml"><code>managed-cert.yaml</code></a>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>managed-cert.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> networking.gke.io/v1</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ManagedCertificate</span></span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb26-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> managed-cert</span></span>
<span id="cb26-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb26-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">domains</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb26-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut.djnavarro.net</span></span></code></pre></div>
</div>
</div>
<p>Notice that the <code>apiVersion</code> field here is using something specific to GKE: I’m using google infrastructure here and they’ve kindly<sup>23</sup> provided an API that makes it easy to use their managed certificates. The yaml here is pretty simple: I’m asking google to supply me with a certificate for my kubernetes application, which will be valid for the domain <code>donut.djnavarro.net</code> (you can list more than one here but I didn’t).</p>
<p>Now that I have a manifest, I apply it to my cluster in the usual way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> managed-cert.yaml</span></code></pre></div>
</div>
<p>Okay, at this point in the guide it warns you that it might take an hour or so for the certificate to be provisioned. I manage so many websites now that I’d stopped paying attention to this warning because like, 90% of the time, the thing actually happens in 20 seconds. Yeah nah, not this time babe. This one actually took an hour. We’ll come back to it. I mean, if you want to check you can try this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> describe managedcertificate managed-cert</span></code></pre></div>
</div>
<p>It will print out a bunch of stuff, but when you scroll through the output you’ll very likely come across something that says that the certificate is “Provisioning”. It did work for me but it took a while so let’s move on while that is happening.</p>
</section>
<section id="create-a-service" class="level3">
<h3 class="anchored" data-anchor-id="create-a-service">Create a service</h3>
<p>Next up is the step that fucked me in the worst possible way. It failed, because I did a copy-paste on a bit of code that I needed to edit. I did that because the guide on the google website doesn’t flag this as something you need to edit. Worse yet, it failed silently because kubernetes had no bloody way to know my manifest was fucked up. Worst of all, for at least three hours I was convinced that my error was in the <em>later</em> step because this step failed silently.</p>
<p>Siiiiiiiiiiiiiigh. Computers were a mistake.</p>
<p>Anyway, let’s start by looking at the manifest file, which I’ve called <a href="https://github.com/djnavarro/donut/blob/main/mc-service.yaml"><code>mc-service.yaml</code></a>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mc-service.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Service</span></span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb29-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mc-service</span></span>
<span id="cb29-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb29-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb29-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut-example</span></span>
<span id="cb29-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> NodePort</span></span>
<span id="cb29-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb29-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">protocol</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> TCP</span></span>
<span id="cb29-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb29-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetPort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span></code></pre></div>
</div>
</div>
<p>At this point in the process I freely admit I’m at the edge of my own knowledge, and I don’t want to say too much about something I only barely understand myself, but there are two things I will point out about this:</p>
<ul>
<li><p>Notice that under <code>spec.selector</code> (lines 5-7) I’m referring to the name of my deployment (<code>donut-example</code>). That’s what the kubernetes docs tell you to do when setting up a NodePort service (see <a href="https://kubernetes.io/docs/concepts/services-networking/service/">here</a>), but the guide on the the corresponding google page that I linked to earlier (i.e., <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs">this one</a>) misled me. It made me think I was supposed to use the name of the service (<code>mc-service</code>). You want this service to point at your deployment!</p></li>
<li><p>Notice I’m doing everything on port 80? You probably don’t need to do this, but I found some discussion online about an old issue with kubernetes where they were hardcoding port 80 somewhere. I’m pretty certain that’s been properly resolved now and I don’t need to use port 80 for everything, but it was one of the tweaks I made on the way to figuring out the problem with <code>spec.selector</code> and… well… fuck it. The current version works and I’m new to kubernetes so I’m not changing it today.</p></li>
</ul>
<p>In any case, now that I have a manifest file I can apply it to the cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> mc-service.yaml</span></code></pre></div>
</div>
</section>
<section id="create-the-dns-record" class="level3">
<h3 class="anchored" data-anchor-id="create-the-dns-record">Create the DNS record</h3>
<p>The next step in the process was to create a DNS record (with google domains in my case) for <code>donut.djnavarro.net</code> that points this subdomain to the appropriate IP address. I talked about this earlier in the post, so let’s move on…</p>
</section>
<section id="create-an-ingress" class="level3">
<h3 class="anchored" data-anchor-id="create-an-ingress">Create an ingress</h3>
<p>If the gods were kind we would be done, but of course we are not. I have a managed certificate and I have a service that exposes my deployment. That <em>doesn’t</em> mean that my application is configured to serve pages over https. To do this I need to create an <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">ingress</a> that manages external access to the service I created earlier and handles the SSL bit. Which is the thing I really need in order to make https work. Again…</p>
<p>Siiiiiiiiiiiigh.</p>
<p>Okay, here’s my <a href="https://github.com/djnavarro/donut/blob/main/mc-ingress.yaml"><code>mc-ingress.yaml</code></a> manifest file for that:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mc-ingress.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> networking.k8s.io/v1</span></span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Ingress</span></span>
<span id="cb31-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb31-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mc-ingress</span></span>
<span id="cb31-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotations</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb31-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kubernetes.io/ingress.global-static-ip-name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> donut-ip-address</span></span>
<span id="cb31-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networking.gke.io/managed-certificates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> managed-cert</span></span>
<span id="cb31-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kubernetes.io/ingress.class</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gce"</span></span>
<span id="cb31-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb31-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">defaultBackend</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb31-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb31-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mc-service</span></span>
<span id="cb31-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb31-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">number</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span></code></pre></div>
</div>
</div>
<p>This manifest uses the static IP address I created (<code>donut-ip-address</code>), as well as the TLS certificate that I’ve asked google to provide me (<code>managed-cert</code>), and it specifies the <code>mc-service</code> I created as the backend. These things together give me https… apparently.</p>
<p>As usual, I apply the manifest to my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> mc-ingress.yaml </span></code></pre></div>
</div>
<p>I can inspect the results with <code>kubectl get ingress</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> get ingress</span></code></pre></div>
</div>
<pre><code>NAME         CLASS    HOSTS   ADDRESS         PORTS   AGE
mc-ingress   &lt;none&gt;   *       34.149.195.33   80      98s</code></pre>
<p>I might still have to wait for the certificate provisioning to finish, so I’d better check again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> describe managedcertificate managed-cert</span></code></pre></div>
</div>
<p>Here’s the relevant bit of the output showing what it looks like once it’s all working:</p>
<pre><code>Spec:
  Domains:
    donut.djnavarro.net
Status:
  Certificate Name:    mcrt-b2204ff4-ad92-4811-a56d-f007190bb659
  Certificate Status:  Active
  Domain Status:
    Domain:     donut.djnavarro.net
    Status:     Active</code></pre>
<p>At last. I have https. It works, which I can verify simply by visiting <a href="https://donut.djnavarro.net">https://donut.djnavarro.net</a> and seeing if my app is working. Obviously I know that it is, because the embedded image at the start of the post is doing what it’s supposed to, but just for fun I’ll do it again:</p>
<a href="https://donut.djnavarro.net"><img width="100%" src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/https:/donut.djnavarro.net" title="donut.djnavarro.net"></a>
<p><br></p>
<p>Excellent. It works.</p>
<p><br></p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>The application I built is very limited, and I think it’s important to point to the things that I know it does poorly. I am sure there are others, but the big one is storage. As currently designed, the app generates a new image every time the site is visited. That’s wasteful, especially if you’re going to reuse images. You can do better than this by enabling google cloud storage, connecting to it as a volume, and writing generated images to storage when they are create. The plumber app would then check for the relevant files before trying to generate a new one. There’s a useful <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/volumes">tutorial on volumes</a> if you want to explore this with the google kubernetes engine.</p>
<p>It’s also worth pointing out that I have completely ignored <a href="https://helm.sh/">helm</a>, the package manager for kubernetes. Helm is excellent, and when the time comes that you want to deploy an application that someone else has designed properly, the thing you actually do is use a helm “chart”. For example, the one time I actually got <a href="https://spark.apache.org/">spark</a> running properly on a kubernetes cluster, the way I did it was using a terribly-useful helm chart provided by Bitnami: <a href="https://bitnami.com/stack/spark/helm">bitnami.com/stack/spark/helm</a>. There’s a lot of useful tooling built up around kubernetes, and you might as well take advantage of that!</p>
<p>That being said… yes there’s a lot more to talk about, but I’m done with this post. I’m tired and unemployed, and since nobody is paying me for any of this I’m going to call it quits for today.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Though who knows: there’s a lot of strange on grindr.↩︎</p></li>
<li id="fn2"><p>Lots of computers working as a single unit.↩︎</p></li>
<li id="fn3"><p>Also known colloquially as “computers”. A node in a cluster is one of the machines that makes up the cluster. I’m endlessly entertained by the human ability to make concepts impenetrable to outsiders by writing in jargon that is never explained to novices.↩︎</p></li>
<li id="fn4"><p>Oh look it’s a trans who likes Lana, how original.↩︎</p></li>
<li id="fn5"><p>The author does not count.↩︎</p></li>
<li id="fn6"><p>Unless you are Thomas Lin Pedersen, but I think it is very clear that he is much taller than me.↩︎</p></li>
<li id="fn7"><p>After a <em>staggering</em> amount of work, mind you…↩︎</p></li>
<li id="fn8"><p>To be honest I am still not convinced <code>coord_polar()</code> is particularly useful for visualisation because I very rarely have anything to say that is naturally expressed as a pie chart, but it’s brilliant for generative art.↩︎</p></li>
<li id="fn9"><p>This isn’t the right place for a deep dive on <a href="https://blog.djnavarro.net/serialisation-with-rds/">serialising R objects</a>, but I’ve written about it before.↩︎</p></li>
<li id="fn10"><p>Arguments can be passed to a plumber endpoint through the query string. For instance, the URL <a href="http://donut.djnavarro.net/?seed=6">http://donut.djnavarro.net/?seed=6</a> fixes the <code>seed</code> to 6, so the output will always be the same as the red and black donut shown in the bottom right of the output above.↩︎</p></li>
<li id="fn11"><p>Here’s a blog post on the difference between <a href="https://nickjanetakis.com/blog/docker-tip-59-difference-between-exposing-and-publishing-ports">exposing and publishing ports</a> in docker if you need it!↩︎</p></li>
<li id="fn12"><p>It doesn’t have to be public: kubernetes can pull images from private registries too, but I’m not going to bother with that sort of thing here↩︎</p></li>
<li id="fn13"><p>If this were something fancier you’d probably have more than one container, but I’m keeping this as simple as possible for the sake of what’s left of my sanity.↩︎</p></li>
<li id="fn14"><p>I should mention that yes you can do all this with the <code>gcloud</code> command line tool, but I haven’t reached the point in the post where I talk about that yet, and in any case the point-and-click process is actually pretty easy.↩︎</p></li>
<li id="fn15"><p>An example would be if you plan to deploy <a href="https://spark.apache.org/">spark</a> on kubernetes. I’ve been playing around with that a little and for that you really need to have google back off and not delete nodes whenever the autopilot thinks you don’t need them. But that’s not the case for the donut app so I’m keeping it simple.↩︎</p></li>
<li id="fn16"><p>Also known as “Sydney” to those of us who live here↩︎</p></li>
<li id="fn17"><p>Too obvious.↩︎</p></li>
<li id="fn18"><p>Kubernetes supports other types of containers besides docker, but let’s not complicate matters.↩︎</p></li>
<li id="fn19"><p>The <code>-f</code> argument in <code>kubectl apply</code> here tells it to use the manifest <strong>f</strong>ile.↩︎</p></li>
<li id="fn20"><p>Which may be your thing in an appropriate mutually consensual context, but it’s not everyone’s cup of tea.↩︎</p></li>
<li id="fn21"><p>Not in the fun way.↩︎</p></li>
<li id="fn22"><p>I could go on a long ramble about all my issues with authority figures at this point, but frankly I don’t think that certification authorities are a bad thing so perhaps just this once I’ll be a good girl and use the damn service. It’s convenient and it’s useful.↩︎</p></li>
<li id="fn23"><p>lol no. This is a figure of speech. Nothing that google or any large tech company does is a kindness. It is self interest on their part, of course, but it’s convenient for my purposes here.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Deploying {R} with Kubernetes},
  date = {2023-01-10},
  url = {https://blog.djnavarro.net/posts/2023-01-10_kubernetes},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Deploying R with Kubernetes.”</span>
January 10, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-10_kubernetes">https://blog.djnavarro.net/posts/2023-01-10_kubernetes</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Docker</category>
  <category>Kubernetes</category>
  <category>Plumber</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index.html</guid>
  <pubDate>Mon, 09 Jan 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/donut.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Playing with docker and the github container registry</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Docker docker docker baby. This is a post about docker, and on the off chance that you’ve been living under a rock for the last several years, docker<sup>1</sup> allows you to run your code within a “container” that isolates it from other processes running on your machine. Containers are a bit like virtual machines, but smaller, more portable, and don’t require you to have a complete copy of a second operating system running on your machine. They’re… actually, you know what? Why don’t I quote the relevant paragraphs from <a href="https://www.docker.com/resources/what-container/">the docker website</a>:</p>
<blockquote class="blockquote">
<p><strong>CONTAINERS</strong>: Containers are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel<sup>2</sup> <sup>3</sup> <sup>4</sup> with other containers, each running as isolated processes in user space. Containers take up less space than VMs (container images are typically tens of MBs in size), can handle more applications and require fewer VMs and Operating systems.</p>
<p><strong>VIRTUAL MACHINES</strong>: Virtual machines (VMs) are an abstraction of physical hardware turning one server into many servers. The hypervisor allows multiple VMs to run on a single machine. Each VM includes a full copy of an operating system, the application, necessary binaries and libraries – taking up tens of GBs. VMs can also be slow to boot.</p>
</blockquote>
<p>They even have pretty pictures on the website. I thought about reproducing their figures for this blog post but why bother? If you want to look at their pictures you can go look at the website and in any case I think we can all agree that making these cute whale graphics with ggplot2 was a much better use of my time, yes?</p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-1-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>Anyway. I’ve been meaning to teach myself docker for a few years now. It’s one of those “things” that has this weird aura of being difficult when it… doesn’t seem to be all that difficult? For a long time I’ve had this feeling of dread or insecurity about it, thinking that it must be “too technical” for me.<sup>5</sup> I have no doubt that the internals to docker are complicated, and there are subtleties to using docker well that will take a while to grasp, but when I managed to set aside my fears and read the documentation it turned out that the basics were surprisingly easy.</p>
<section id="installing-docker" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="installing-docker">Installing docker</h2>
<p>The <a href="https://docs.docker.com/get-docker/">installation guides</a> on the docker website are good, and have information for various operating systems. I’m doing this on my ubuntu laptop<sup>6</sup> so I followed the <a href="https://docs.docker.com/engine/install/ubuntu/">ubuntu install guide</a>. I also went a little further and followed the <a href="https://docs.docker.com/engine/install/linux-postinstall/">post-install instructions for linux</a> so that I could run docker commands without requiring superuser privileges: that’s the reason you won’t see any <code>sudo</code> commands in this post. Obviously, that’s something that will be a bit different on different operating systems and I’m not trying to write a tutorial here, but if you are using this post as a resource you can check that everything is working on your own installation by running this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run hello-world</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
2db29710123e: Pull complete 
Digest: sha256:c77be1d3a47d0caf71a82dd893ee61ce01f32fc758031a6ec4cf1389248bb833
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/</code></pre>
</div>
<p>Okay that looks good. Docker<sup>7</sup> seems to be running on my machine. As an aside, as long as you are online you don’t need to have a copy <code>hello-world</code> itself for this to work: docker will download it for you when you run the command.</p>
</section>
<section id="terminology" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p>Before diving in and using docker, it helps to disambiguate three terms:</p>
<ul>
<li><strong>Container</strong>. A container is an executable. It runs on your machine isolated from other processes, has a namespace on the kernel, etc. Setting the particulars aside, it <em>is</em> a computing environment.</li>
<li><strong>Image</strong>. An image is a read-only template that contains the instruction to build a container. It’s a “snapshot” of a computing environment, constructed from one or more “layers” of build steps. Images are binaries that are stored locally and hosted on various registries. More on that later!</li>
<li><strong>Dockerfile</strong>. Finally, there’s the dockerfile.<sup>8</sup> That’s a plain text file that you as the user write. It contains the instructions for how to construct an image. They supply, in a (very!) abstract sense, the source code for an image.</li>
</ul>
<p>So it works like this. You use a dockerfile to <strong>build</strong> an image, the image contains the instructions to <strong>run</strong> a container, and the corresponding commands are quite sensibly called <code>docker build</code> and <code>docker run</code>. Or if you like diagrams with labelled arrows…</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bdockerfile%7D%20%5Cxrightarrow%7B%5Cmbox%7Bbuild%7D%7D%20%5Cmbox%7Bimage%7D%20%5Cxrightarrow%7B%5Cmbox%7Brun%7D%7D%20%5Cmbox%7Bcontainer%7D%0A"></p>
<p>At any point you can get a summary of the images on your system by running <code>docker image list</code>. If you’re doing this with a fresh installation and you run the command after running the “hello world” example above,<sup>9</sup> you’d get output that looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> image list</span></code></pre></div>
</div>
<pre><code>REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
hello-world   latest    feb5d9fea6a5   15 months ago   13.3kB</code></pre>
<p>You can do the same thing for containers with <code>docker container ls</code>,<sup>10</sup> which by default will show you currently-running containers. To see all containers, running or not, add the <code>--all</code> parameter:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> container ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span></span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES
efcf7186776f   hello-world   "/hello"   6 minutes ago   Exited (0) 6 minutes ago             bold_davinci</code></pre>
</div>
<p>Notice the difference in the “CREATED” time! The <em>image</em> for hello-world is something that someone else created 15 months ago and kindly placed online so I could pull it onto my machine without building it myself. The <em>container</em> is the executable that I created from that image a mere 6 minutes ago when I called <code>docker run</code>. They’re both currently on my laptop, but they are quite different things.</p>
<p>Ah, but I am rambling again, aren’t I? Sorry. Shall we have a go at this then?</p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-0-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">This was my first attempt at plotting something that looks a bit like the docker whale. It’s nothing fancy: I created a data frame with coordinates corresponding to a circle and then distorted it in two different ways. One distortion produces the whale body, another makes the tail. They are rendered in ggplot2 with <code>geom_polygon()</code>. Later in the process I tweaked the tail a bit.</figcaption>
</figure>
</div>
</div></div></div>
</section>
<section id="motivating-problem" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="motivating-problem">Motivating problem</h2>
<p>In my <a href="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/">last post</a> I mentioned that, <a href="https://knowyourmeme.com/memes/btw-i-use-arch">btw I use arch</a> now.<sup>11</sup> Well. Sort of. A more accurate statement would be to say that I installed arch linux on a secondary laptop as something to play with and I’m still using ubuntu for my day to day coding. At the moment I’m still getting used to the quirks of arch and encountering odd behaviour when – for example – one of my scripts that ran perfectly well on my ubuntu machine caused RStudio to crash when I ran it on the arch box. The “it works on my machine” problem strikes again… sigh.</p>
<p>In an effort to isolate the problem I started reran the unit tests for the package that I thought might be responsible for the crash and they all passed on both machines, but since that package is my <a href="https://blog.djnavarro.net/posts/2022-12-22_queue/">queue</a> package and the unit test aren’t as comprehensive as I’d like I would not be at all surprised if there’s an exotic bug that makes it fail only on arch.</p>
<p>All this made me think a little about how I typically use CI.<sup>12</sup> Like many R developers I’ll use github actions to run my unit tests on mac os, ubuntu, and windows. I’ll run the tests with multiple versions of R including R-devel. If I’m thinking about a CRAN submission I’ll expand the scope and run my tests using other services also.</p>
<p>I’ve never tested on arch though.</p>
<p>I’ve never tested on arch because I’ve never had an arch machine to test on before. Or… [docker enters from stage left]… I’ve never had an arch image that I can use to containerise my unit tests before…</p>
<p>Ooh… a side project! Why don’t I try creating some docker images with R running on arch linux? In other words, why don’t I do a really lazy, half-arsed version of the thing that the <a href="https://rocker-project.org/">rocker project</a> has already done to an extremely high standard with ubuntu and debian… except with arch?<sup>13</sup></p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-1-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Adding the boxes was conceptually easy: the <code>expand_grid()</code> function from tidyr creates the necessary data structure, and <code>geom_tile()</code> plots it. One thing I really like about this iteration is that the spacing of the boxes creates a <a href="https://en.wikipedia.org/wiki/Grid_illusion">Hermann grid illusion</a>. It’s not as cool as the scintillating grid version, but I used to teach it in introductory cognitive science classes and I have a soft spot for it.</figcaption>
</figure>
</div>
</div></div></div>
</section>
<section id="minimal-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="minimal-example">Minimal example</h2>
<p>Sometimes the easiest way to tell a story is to begin at the ending, and – spoiler! – I did in fact succeed in my attempt,<sup>14</sup> and I am now the proud<sup>15</sup> maintainer of two hastily-constructed images hosted on the github container repository. Now that I have these things, it should be really easy for us to put together a simple project that will run R code using these images and – even though I’m going to be using my ubuntu laptop – have it be executed by a container that is running arch.</p>
<p>Oh. The. Thrill.</p>
<p>Be. Still. My. Beating. Heart.</p>
<p>Okay, so here it is. Accompanying this post is a project called <a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2023-01-01_playing-with-docker/system-check"><code>system-check</code></a> that consists of a three-line dockerfile and a two-line R script. Let’s ignore the dockerfile for a moment and focus on the R code. Here’s the script:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./system-check/script.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running on:"</span>, osVersion), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "</span>)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"With locale:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getlocale</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "</span>)</span></code></pre></div>
</div>
</div>
<p>If we ignore the parts the code dedicated to making the output pretty, we can see that all it’s doing is printing the <code>osVersion</code> and calling <code>Sys.getlocale()</code>. Here’s what happens when I run the script on my ubuntu laptop, without using docker in any way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> ./system-check/script.R</span></code></pre></div>
</div>
<pre><code>Running on:
  Ubuntu 22.04.1 LTS
With locale:
  LC_CTYPE=en_AU.UTF-8
  LC_NUMERIC=C
  LC_TIME=en_AU.UTF-8
  LC_COLLATE=en_AU.UTF-8
  LC_MONETARY=en_AU.UTF-8
  LC_MESSAGES=en_AU.UTF-8
  LC_PAPER=en_AU.UTF-8
  LC_NAME=C
  LC_ADDRESS=C
  LC_TELEPHONE=C
  LC_MEASUREMENT=en_AU.UTF-8
  LC_IDENTIFICATION=C</code></pre>
<p>The first part of the output tells me my operating system (ubuntu), and the second part specifies the locale. I’m in Australia so for most things my locale is <code>en_AU.UTF-8</code>. That makes sense, but of course this output is specific to my machine: an arch user running R in the United States should expect to see something very different.</p>
<p>That’s where docker comes in.</p>
<p>The docker images that I built and am hosting on github simulate exactly that. The computing environments specified by the <code>arch-r-base</code> and <code>arch-r-test</code> images use arch linux as the operating system and have the system locale set to <code>en_US.UTF-8</code>. So if I were to execute this script from within a container running the <code>arch-r-base</code><sup>16</sup> image, I should expect to see different results even though my laptop is running ubuntu and my system locale is <code>en_AU.UTF-8</code>.</p>
<p>Here’s a dockerfile specifying an image that does exactly that:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./system-check/Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> ghcr.io/djnavarro/arch-r-base:release</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> script.R /home/script.R</span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> /home/script.R</span></code></pre></div>
</div>
</div>
<p>It’s a sequence of three <strong>docker instructions</strong>.</p>
<ul>
<li><p>Like all dockerfiles, it begins with a <a href="https://docs.docker.com/engine/reference/builder/#from"><code>FROM</code></a><sup>17</sup> <sup>18</sup> instruction that specifies the name of a preexisting docker image to use as a starting point. I’ve been very explicit here and <a href="https://windsock.io/referencing-docker-images/">referenced the image</a> using a fully qualified name that consists of a container repository (<code>ghcr.io</code>), a username (<code>djnavarro</code>), the image name <code>arch-r-base</code>, and an optional tag (<code>release</code>). You don’t always need to be that precise, especially if you’re using an image that you know exists locally.</p></li>
<li><p>The second step is a <a href="https://docs.docker.com/engine/reference/builder/#copy"><code>COPY</code></a> instruction that copies the R script to a specific file path within the image. This takes place at build time. This step is necessary because when the container starts up it will be isolated from other processes on the system. It doesn’t have access to the host file system. If you want the container to have access to a file you need to copy it at build time.<sup>19</sup></p></li>
<li><p>The third step is a <a href="https://docs.docker.com/engine/reference/builder/#cmd"><code>CMD</code></a> instruction. Every dockerfile must have a <code>CMD</code> instruction (and much like highlanders there can be only one) specifying a default for what the container should do when it is launched.<sup>20</sup></p></li>
</ul>
<p>Later on, when you’re starting to feel comfortable with the basic idea of writing dockerfiles, its worth reading the official guide on <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">dockerfile best practices</a>. Lots of little things started to make sense to me when I did that. For now, let’s just acknowledged that yes Virginia we have a dockerfile.</p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-2-1.png" class="img-fluid" width="672"></p>
</div></div></div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-3-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">I created the random container stacks using dplyr. The boxes are grouped by column (using their x-coordinate), a random height is generated for that column, and rows in the data frame corresponding to boxes above that height are filtered out of the data set before it is passed to ggplot2.</figcaption>
</figure>
</div>
</div></div></div>
<section id="building-the-image" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="building-the-image">Building the image</h3>
<p>Our next step is to build it to an image. The way we do that from the terminal is with the <a href="https://docs.docker.com/engine/reference/commandline/build/"><code>docker build</code></a> command. For the purposes of this post – which I am writing in quarto and thus has a code execution engine blah blah blah – I am going to assume<sup>21</sup> that the working directory is set to the folder containing the post, and that it contains a subfolder called <code>system-check</code> in which the dockerfile and the R script are stored. In other words, <code>system-check</code> is the directory holding the docker project.</p>
<p>The simplest way to build an image from this project is like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build system-check</span></code></pre></div>
</div>
<p>This command tells docker to look for a dockerfile in the <code>system-check</code> folder, and make an image using whatever it finds there. That’s a perfectly fine way to do it, but my personal preference is to give the resulting image a name, using the <code>--tag</code> flag. So the command, which I’ve broken over a few lines to highlight its structure, now looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> my-system-check <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-3">  system-check</span></code></pre></div>
</div>
<p>The reason I’ve done this is that later on when I call the <code>docker run</code> command I can refer to the image by name, which does make life simpler. Under normal circumstances I’d probably have called the image <code>system-check</code> rather than <code>my-system-check</code> (why create new names when I don’t need to?) but for the purposes of this post I think it’s helpful to be clear that when I refer to the image name I’m referring to the thing I created using <code>--tag</code>, not the name of the folder that holds the dockerfile!</p>
<p>Okay, enough talk. Let’s run it this time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> my-system-check <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-3">  system-check</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/3 : FROM ghcr.io/djnavarro/arch-r-base:release
release: Pulling from djnavarro/arch-r-base
597018910566: Pull complete 
8150bcc6bc64: Pull complete 
e49e8a34689c: Pull complete 
c14eff78251d: Pull complete 
42b358854199: Pull complete 
babcc0d99cfd: Pull complete 
Digest: sha256:f9ff0f7b431ed1b975823c871949ccbc15c3e3d7dce23775f793f9f64bb2779e
Status: Downloaded newer image for ghcr.io/djnavarro/arch-r-base:release
 ---&gt; 0a9929e54a6b
Step 2/3 : COPY script.R /home/script.R
 ---&gt; b9913096b118
Step 3/3 : CMD Rscript /home/script.R
 ---&gt; Running in 1314ee0ff2fb
Removing intermediate container 1314ee0ff2fb
 ---&gt; 489003ffb5d0
Successfully built 489003ffb5d0
Successfully tagged my-system-check:latest</code></pre>
</div>
<p>The output here shows you that the build process unfolds as a sequence of three steps: one for each of our docker instructions. It also gives you the impression (correctly!) that the first step is considerably more complex than the other two. That makes sense: the <code>arch-r-base</code> image is itself constructed from a sequence of steps, and those steps have produced an image that is built from several “layers”. Each of those hexadecimal hashes refers to one of the layers.<sup>22</sup></p>
<p>When you run this on your own system you’ll see little progress bars as the different layers of the image are downloaded. For example, that line that says <code>597018910566: Pull complete</code>? That’s referring to the very first layer in the <code>arch-r-base</code> image (which is arch linux itself) and that layer is about 280MB or something like that, so you get a little progress bar to let you know how its going. That’s super helpful if you ever find yourself using the <code>arch-r-test</code> image, because one of the layers in that image includes a texlive installation (ugh) so that layer is (I’m so sorry) about 2GB in size.</p>
<p>Downloading large images is a huge pain, and generally I would try to avoid creating an image with a layer that large. Thankfully, docker is smart enough to check the local cache before trying to download anything.<sup>23</sup> We can see this in action if we repeat the exact same command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> my-system-check <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-3">  system-check</span></code></pre></div>
</div>
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/3 : FROM ghcr.io/djnavarro/arch-r-base:release
 ---&gt; 0a9929e54a6b
Step 2/3 : COPY script.R /home/script.R
 ---&gt; Using cache
 ---&gt; b9913096b118
Step 3/3 : CMD Rscript /home/script.R
 ---&gt; Using cache
 ---&gt; 489003ffb5d0
Successfully built 489003ffb5d0
Successfully tagged my-system-check:latest</code></pre>
<p>This finishes instantaneously because docker<sup>24</sup> <sup>25</sup> notices that I already have a copy of this image so it uses the cache for everything.</p>
<p>We can confirm that this has worked by running <code>docker image list</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> image list</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>REPOSITORY                      TAG       IMAGE ID       CREATED          SIZE
my-system-check                 latest    489003ffb5d0   26 minutes ago   955MB
ghcr.io/djnavarro/arch-r-base   release   0a9929e54a6b   13 hours ago     955MB
hello-world                     latest    feb5d9fea6a5   15 months ago    13.3kB</code></pre>
</div>
<p>Now, you might be wondering about those image sizes. Did I really just create <em>two</em> 955MB images? That seems a bit much. It’s certainly true that the image is 955MB in size: after all, the image does have to describe an entire operating system running R, so it’s not surprising that it isn’t tiny. But it looks as if I just wasted an entire GB of space by making two of them. Thankfully, docker is not that silly. The <code>my-system-check</code> image is almost identical to <code>arch-r-base</code>. In fact, it’s just one very small layer added on top of the layers that comprise the <code>arch-r-base</code> image. If you dig into the documentation on <a href="https://docs.docker.com/storage/storagedriver/">storage</a> you discover that docker quite sensibly allows images to share layers, so even though <code>arch-r-base</code> and <code>my-system-check</code> are individually 955MB in size, they are also <em>collectively</em> 955MB in size thanks to layer sharing.</p>
<p>The sheer excitement of working with computers is just too much for me to bear sometimes.</p>
</section>
<section id="run-in-a-container" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="run-in-a-container">Run in a container</h3>
<p>Okay, we are ready to go baby! The image is set up, and all we have to do is run it in a container using <a href="https://docs.docker.com/engine/reference/commandline/run/"><code>docker run</code></a>. The <code>docker run</code> command is quite powerful, and has a lot of arguments you can use to control how the image executes.<sup>26</sup> I’m not going to use any of that flexibility here. This is just a vanilla command asking docker to run the <code>my-system-check</code> image:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run my-system-check</span></code></pre></div>
</div>
<pre><code>Running on:
  Arch Linux
With locale:
  LC_CTYPE=en_US.UTF-8
  LC_NUMERIC=C
  LC_TIME=en_US.UTF-8
  LC_COLLATE=en_US.UTF-8
  LC_MONETARY=en_US.UTF-8
  LC_MESSAGES=en_US.UTF-8
  LC_PAPER=en_US.UTF-8
  LC_NAME=C
  LC_ADDRESS=C
  LC_TELEPHONE=C
  LC_MEASUREMENT=en_US.UTF-8
  LC_IDENTIFICATION=C</code></pre>
<p>It’s an awfully elaborate way to say “btw I use arch”, but yes… the image does what we hoped it would. It’s executed the R script on arch linux with a <code>en_US.UTF-8</code> locale. I have successfully faked it<sup>27</sup> as an arch user.</p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-2-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="fancier-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="fancier-example">Fancier example</h2>
<p>For the next example I’ll add a little bit of extra complexity. The real reason I wanted the <code>arch-r</code> images in the first place was to make it easier to run unit tests for an R package on a system running arch linux. If I were going to do this properly I’d set it up in a way that could be incorporated into a CI workflow with github actions, but I’m not going to be that fancy for this blog post. Instead, I’ll set it up so that I can generate containers running arch linux that can clone a package repository from github into the container, and then run the unit tests. I’ll even give it a bit of flexibility so that the user can decide at build time<sup>28</sup> which github repository the container points to.</p>
<p>As before the project – which I’ve called <code>test-on-arch</code> – consists of two files. There’s an R script that executes at run time, and the dockerfile executed at build time. Here they are:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./test-on-arch/Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> ghcr.io/djnavarro/arch-r-test:release</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy the testing script</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> clone-and-check.R /home/clone-and-check.R</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass args through environment variables</span></span>
<span id="cb21-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ARG</span> user</span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ARG</span> repo</span>
<span id="cb21-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ARG</span> cran=https://cloud.r-project.org</span>
<span id="cb21-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> user=$user</span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> repo=$repo</span>
<span id="cb21-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> cran=$cran</span>
<span id="cb21-13"></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the testing script</span></span>
<span id="cb21-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> /home/clone-and-check.R</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./test-on-arch/clone-and-check.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the system environment variables</span></span>
<span id="cb22-2">user <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>)</span>
<span id="cb22-3">repo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repo"</span>)</span>
<span id="cb22-4">cran <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cran"</span>)</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define github url and a path for the local package install</span></span>
<span id="cb22-7">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com"</span>, user, repo, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb22-8">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/project"</span>, repo, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone repo, install dependencies, and run checks</span></span>
<span id="cb22-11">gert<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git_clone</span>(url, dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb22-12">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_deps</span>(dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dependencies =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> cran)</span>
<span id="cb22-13">rcmdcheck<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcmdcheck</span>(dir)</span></code></pre></div>
</div>
</div>
<p>Like last time, the place to start is with the R script. It expects to find <code>user</code>, <code>repo</code>, and <code>cran</code> values as environment variables. Once it finds those, it clones the <code>user/repo</code> repository from github, installs any dependencies of the package from <code>cran</code>, and then uses rcmdcheck to check the downloaded package.</p>
<p>Now let’s look at how the dockerfile sets up the computing environment to enable this script to be run on arch linux:</p>
<ul>
<li><p>Just like we saw in the last example, the dockerfile begins with a <code>FROM</code> instruction. This time around though I’m using the <code>arch-r-test</code> image rather than the <code>arch-r-base</code> image. Much like the base image, the test image runs arch linux and installs R in the environment. However, it also installs several other system dependencies and R packages that come in handy when running <code>R CMD check</code>, which makes it a bit more useful in this context.</p></li>
<li><p>The next step in the dockerfile is the <code>COPY</code> instruction that ensures that the image has a copy of the R script. There’s nothing new here so we can move on.</p></li>
<li><p>The next two steps use the <a href="https://docs.docker.com/engine/reference/builder/#arg"><code>ARG</code></a> instruction. This is a new one for us: it’s a mechanism for allowing the user to specify arguments that will be passed to docker when building the image. That’s handy because it means I can customise the image that gets built. The obvious use here is that I can specify the <code>user</code> and the <code>repo</code> for the package that I want to check! (Later on we’ll see how this is done using the <code>--build-arg</code> argument to <code>docker build</code>)</p></li>
<li><p>Next up is another <code>ARG</code> step, used to specify the url for the <code>cran</code> repository that the container should use to download any R packages. Notice, however, that this time I’ve specified a default value, so you don’t actually have to specify <code>cran</code> when you call <code>docker build</code>: if you don’t it will just use the default url</p></li>
<li><p>The <code>ARG</code> steps pass the user input to docker, but they don’t set any environment variables (remember, our R script is expecting to find environment variables). That’s the job of the <a href="https://docs.docker.com/engine/reference/builder/#env"><code>ENV</code></a> instructions that appear in the next three steps.<sup>29</sup></p></li>
<li><p>Finally, we have the <code>CMD</code> instruction, which specifies a default action for the container: run the script.</p></li>
</ul>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-4-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">After a little bit of tinkering I decided to make the tail a little fatter and use <code>theme_minimal()</code> with a border added as a way of subtly communicating the fact that ggplot2 is doing the work. The grid lines are almost invisible in a single whale plot like this but become more prominent in the facetted plots where there are more of them.</figcaption>
</figure>
</div>
</div></div></div>
<section id="building-the-image-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="building-the-image-1">Building the image</h3>
<p>Setting aside the fact that our <code>test-on-arch</code> project has a lot of flaws and limitations, it will serve the purposes we need it to. Let’s say I want to create an image that will check the queue package hosted at <a href="https://github.com/djnavarro/queue/">github.com/djnavarro/queue</a>. To do that I’ll need to set <code>user=djnavarro</code> and <code>repo=queue</code> when I build the image, which I can do with the <code>--build-arg</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb23-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> test-queue <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> user=djnavarro <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb23-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> repo=queue <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb23-5">  test-on-arch</span></code></pre></div>
</div>
<p>Notice that I’ve chosen to call this image <code>test-queue</code>. A nice thing about being able to name the images independently from the dockerfile is that it’s easy to create multiple images using the same dockerfile (just with different arguments) and give them meaningful names. And sure, this particular example is very silly because literally everything I’m doing here at the build stage could be done just as efficiently at the run stage. But whatever.</p>
<p>Let’s see what happens when I try to execute this build command. The <code>arch-r-test</code> image is considerably larger than <code>arch-r-base</code>. This one isn’t a frugal image! It takes a while, so I’m going to go have a smoke while I wait<sup>30</sup> but the nice thing is that if you’ve done it once you don’t have to do it again. Anyway…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> test-queue <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> user=djnavarro <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> repo=queue <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-5">  test-on-arch</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/9 : FROM ghcr.io/djnavarro/arch-r-test:release
release: Pulling from djnavarro/arch-r-test
597018910566: Already exists 
8150bcc6bc64: Already exists 
198fc6066fb9: Pull complete 
b1600153860f: Pull complete 
ed6330815f89: Pull complete 
fb2d11f79510: Pull complete 
ff05f09f5a58: Pull complete 
9abaa14ad138: Pull complete 
Digest: sha256:f4605c32e18168589bd32248f5af97f8f1b57bd4de5fa6e1b54e53db13ab9514
Status: Downloaded newer image for ghcr.io/djnavarro/arch-r-test:release
 ---&gt; 4f873f316861
Step 2/9 : COPY clone-and-check.R /home/clone-and-check.R
 ---&gt; d7c276834cf8
Step 3/9 : ARG user
 ---&gt; Running in efeeb43f874d
Removing intermediate container efeeb43f874d
 ---&gt; d5d055328ea4
Step 4/9 : ARG repo
 ---&gt; Running in 75f6d1ff1502
Removing intermediate container 75f6d1ff1502
 ---&gt; 7edce4d95863
Step 5/9 : ARG cran=https://cloud.r-project.org
 ---&gt; Running in 3f620871b0d7
Removing intermediate container 3f620871b0d7
 ---&gt; 51a7ec6700ba
Step 6/9 : ENV user=$user
 ---&gt; Running in c7a7811e374e
Removing intermediate container c7a7811e374e
 ---&gt; b8e01e708a08
Step 7/9 : ENV repo=$repo
 ---&gt; Running in 2f01c723898c
Removing intermediate container 2f01c723898c
 ---&gt; 0939221c1a35
Step 8/9 : ENV cran=$cran
 ---&gt; Running in 37399a0bbe70
Removing intermediate container 37399a0bbe70
 ---&gt; ccba9748fdd2
Step 9/9 : CMD Rscript /home/clone-and-check.R
 ---&gt; Running in 5d3eb7184e21
Removing intermediate container 5d3eb7184e21
 ---&gt; 76926d5616d7
Successfully built 76926d5616d7
Successfully tagged test-queue:latest</code></pre>
</div>
<p>Notice that during the first step when downloading <code>arch-r-test</code>, I didn’t have to download the whole thing. Two of the layers in <code>arch-r-test</code> are shared with the <code>arch-r-base</code> image, and docker is smart enough to notice that I already have those layers in my cache. That’s what the <code>Already exists</code> part of the output indicates. Admittedly it doesn’t save us much in this case because its the texlive installation that causes pain, but it’s a nice feature nevertheless.</p>
<p>As a little sanity check – because, dear reader, I have been sitting here waiting very patiently while a large image downloaded over a slow connection and would like to confirm that I don’t have to do that again – let’s repeat the exercise from earlier and try building it a second time just to reassure ourselves that the cache is doing its job:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb26-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> test-queue <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb26-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> user=djnavarro <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb26-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> repo=queue <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb26-5">  test-on-arch </span></code></pre></div>
</div>
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/9 : FROM ghcr.io/djnavarro/arch-r-test:release
 ---&gt; 4f873f316861
Step 2/9 : COPY clone-and-check.R /home/clone-and-check.R
 ---&gt; Using cache
 ---&gt; d7c276834cf8
Step 3/9 : ARG user
 ---&gt; Using cache
 ---&gt; d5d055328ea4
Step 4/9 : ARG repo
 ---&gt; Using cache
 ---&gt; 7edce4d95863
Step 5/9 : ARG cran=https://cloud.r-project.org
 ---&gt; Using cache
 ---&gt; 51a7ec6700ba
Step 6/9 : ENV user=$user
 ---&gt; Using cache
 ---&gt; b8e01e708a08
Step 7/9 : ENV repo=$repo
 ---&gt; Using cache
 ---&gt; 0939221c1a35
Step 8/9 : ENV cran=$cran
 ---&gt; Using cache
 ---&gt; ccba9748fdd2
Step 9/9 : CMD Rscript /home/clone-and-check.R
 ---&gt; Using cache
 ---&gt; 76926d5616d7
Successfully built 76926d5616d7
Successfully tagged test-queue:latest</code></pre>
<p>Not going to lie, I breathed a little sigh of relief. Docker used the cached layers, and that all happened instantaneously. Okay cool. I’m going to stop doing these checks from now on, but one last time let’s take a peek at the list of images I have stored locally:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> image list</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>REPOSITORY                      TAG       IMAGE ID       CREATED              SIZE
test-queue                      latest    76926d5616d7   About a minute ago   4.99GB
my-system-check                 latest    b7426ffb1484   12 minutes ago       955MB
ghcr.io/djnavarro/arch-r-test   release   4f873f316861   17 hours ago         4.99GB
ghcr.io/djnavarro/arch-r-base   release   0a9929e54a6b   17 hours ago         955MB
hello-world                     latest    feb5d9fea6a5   15 months ago        13.3kB</code></pre>
</div>
</section>
<section id="run-in-a-container-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="run-in-a-container-1">Run in a container</h3>
<p>Okay where were we? Ah yes, we’ve built our image so now it’s time to run it. Does my little queue package build cleanly and pass its unit tests on arch? Let’s find out…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run test-queue</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Transferred 766 of 766 objects...done!
Checked out 34 of 34 commits... done!

── R CMD build ─────────────────────────────────────────────────────────────────
* checking for file ‘.../DESCRIPTION’ ... OK
* preparing ‘queue’:
* checking DESCRIPTION meta-information ... OK
* installing the package to build vignettes
* creating vignettes ... OK
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
* building ‘queue_0.0.2.tar.gz’

── R CMD check ─────────────────────────────────────────────────────────────────
* using log directory ‘/tmp/Rtmp1Nld2I/file131069108/queue.Rcheck’
* using R version 4.2.2 (2022-10-31)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘queue/DESCRIPTION’ ... OK
* this is package ‘queue’ version ‘0.0.2’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘queue’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘callr’ ‘cli’ ‘R6’ ‘tibble’
  All declared Imports should be used.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’
 OK
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ...
  ‘queue.Rmd’ using ‘UTF-8’... OK
 NONE
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE

Status: 1 NOTE
See
  ‘/tmp/Rtmp1Nld2I/file131069108/queue.Rcheck/00check.log’
for details.
System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to connect to bus: Host is down
Warning: Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink
Warning: ‘/var/db/timezone/localtime’ is not identical to any known timezone file
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
── R CMD check results ──────────────────────────────────────── queue 0.0.2 ────
Duration: 38.5s

❯ checking dependencies in R code ... NOTE
  Namespaces in Imports field not imported from:
    ‘callr’ ‘cli’ ‘R6’ ‘tibble’
    All declared Imports should be used.

0 errors ✔ | 0 warnings ✔ | 1 note ✖</code></pre>
</div>
<p>Okay yes, this is the expected result. That note would of course get me in trouble on CRAN, but it’s what I was expecting to see: I get the same note on ubuntu. I just haven’t gotten around to fixing it yet. The only part that is different to what I see on ubuntu is this:</p>
<div class="column-page-right">
<pre><code>System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to connect to bus: Host is down
Warning: Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink
Warning: ‘/var/db/timezone/localtime’ is not identical to any known timezone file
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1</code></pre>
</div>
<p>Yeah. This is interesting. I deliberately didn’t try to faff about with <a href="https://en.wikipedia.org/wiki/Systemd">systemd</a> in these images, so this is an expected warning. It’s not a problem with queue or with arch, just a consequence of how I built the images. That would have some consequences for testing a lot of packages, but I’m not trying to recreate the rocker project here so I’m not too fussed about it in this little exercise.</p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-6a-1.png" class="img-fluid" width="672"></p>
</div></div></div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-6b-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">The colour scheme is sampled using <code>ggthemes::canva_palettes</code>, picking one of the ones that provides a blue/green palette.</figcaption>
</figure>
</div>
</div></div></div>
</section>
<section id="two-images-one-dockerfile" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="two-images-one-dockerfile">Two images, one dockerfile</h3>
<p>The advantage to passing arguments is that you can build many images from the same dockerfile, and docker will reuse the cached layers intelligently. We’ve seen this already, but here’s another example. Let’s try using the <code>test-on-arch</code> dockerfile to build an image that checks the <a href="https://github.com/rladies/praise">praise</a> package. Up to this point I’ve never tried testing the praise package on arch before, but (of course????) this builds immediately and without downloading anything, because everything that actually matters about this build was already done when I built the <code>test-queue</code> image earlier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb33-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> test-praise <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb33-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> user=rladies <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb33-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> repo=praise <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb33-5">  test-on-arch </span></code></pre></div>
</div>
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/9 : FROM ghcr.io/djnavarro/arch-r-test:release
 ---&gt; 4f873f316861
Step 2/9 : COPY clone-and-check.R /home/clone-and-check.R
 ---&gt; Using cache
 ---&gt; d7c276834cf8
Step 3/9 : ARG user
 ---&gt; Using cache
 ---&gt; d5d055328ea4
Step 4/9 : ARG repo
 ---&gt; Using cache
 ---&gt; 7edce4d95863
Step 5/9 : ARG cran=https://cloud.r-project.org
 ---&gt; Using cache
 ---&gt; 51a7ec6700ba
Step 6/9 : ENV user=$user
 ---&gt; Running in 3a9b1843d5b4
Removing intermediate container 3a9b1843d5b4
 ---&gt; aa2578d71155
Step 7/9 : ENV repo=$repo
 ---&gt; Running in 1d15632dd6ca
Removing intermediate container 1d15632dd6ca
 ---&gt; 057a61970d7c
Step 8/9 : ENV cran=$cran
 ---&gt; Running in e5586a32b05a
Removing intermediate container e5586a32b05a
 ---&gt; 48852232e4b7
Step 9/9 : CMD Rscript /home/clone-and-check.R
 ---&gt; Running in 0fb9a526210c
Removing intermediate container 0fb9a526210c
 ---&gt; a02feea26152
Successfully built a02feea26152
Successfully tagged test-praise:latest</code></pre>
<p>Once again, we can take a look at the list of images:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> image list</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>REPOSITORY                      TAG       IMAGE ID       CREATED          SIZE
test-praise                     latest    a02feea26152   20 seconds ago   4.99GB
test-queue                      latest    76926d5616d7   4 minutes ago    4.99GB
my-system-check                 latest    b7426ffb1484   14 minutes ago   955MB
ghcr.io/djnavarro/arch-r-test   release   4f873f316861   17 hours ago     4.99GB
ghcr.io/djnavarro/arch-r-base   release   0a9929e54a6b   17 hours ago     955MB
hello-world                     latest    feb5d9fea6a5   15 months ago    13.3kB</code></pre>
</div>
<p>Again note the value of layer sharing. If these were all independent images we’d be looking at 17GB on disk. In fact, because <code>arch-r-test</code> reuses the layers from <code>arch-r-base</code> and all the other images are trivial additions to one of these two images, the <em>total</em> size of all these images is in fact “only” 5GB… i.e., the size of the <code>arch-r-test</code> image. And again, the only reason that one is so big is that I was really fussy about tex installations and bundled an entire texlive distribution with extra fonts and everything because I have no desire deal with tests whining about missing tex stuff.</p>
<p>Anyway, let’s get back on track and run the <code>test-praise</code> image in a container:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb37-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run test-praise</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Transferred 431 of 431 objects...done!
Checked out 26 of 26 commits... done!

── R CMD build ─────────────────────────────────────────────────────────────────
* checking for file ‘.../DESCRIPTION’ ... OK
* preparing ‘praise’:
* checking DESCRIPTION meta-information ... OK
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
Omitted ‘LazyData’ from DESCRIPTION
* building ‘praise_1.0.0.tar.gz’

── R CMD check ─────────────────────────────────────────────────────────────────
* using log directory ‘/tmp/Rtmpi7Ngun/file12ad64a83/praise.Rcheck’
* using R version 4.2.2 (2022-10-31)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘praise/DESCRIPTION’ ... OK
* this is package ‘praise’ version ‘1.0.0’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘praise’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’
 OK
* checking PDF version of manual ... OK
* DONE

Status: OK

System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to connect to bus: Host is down
Warning: Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink
Warning: ‘/var/db/timezone/localtime’ is not identical to any known timezone file
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
── R CMD check results ─────────────────────────────────────── praise 1.0.0 ────
Duration: 25.1s

0 errors ✔ | 0 warnings ✔ | 0 notes ✔</code></pre>
</div>
<p>Once again we see the warning about systemd, and once again I am ignoring it. The thing that matters here, as far as I’m concerned, is that the unit tests for the praise package pass on arch.</p>
</section>
<section id="a-small-caution" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="a-small-caution">A small caution</h3>
<p>Before we move onto the third project I want to talk about one more example using this one, as a way of cautioning anyone who might feel inclined to use it without fixing its many deficiencies. Let’s try using <code>test-on-arch</code> to run the unit tests for ggplot2, shall we? Unlike praise and queue, ggplot2 is a large and complicated package with substantial dependencies and a lot of unit tests. That’s going to be a problem given that <code>test-on-arch</code> clones the entire repository from scratch every time it’s called. Building the image is easy, because the build stage for <code>test-on-arch</code> doesn’t do anything except copy the script and pass a few arguments…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb39-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> test-ggplot2 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb39-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> user=tidyverse <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb39-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> repo=ggplot2 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb39-5">  test-on-arch </span></code></pre></div>
</div>
<p>But when we call <code>docker run</code> things become unpleasant for us even before we’ve had a chance to start running the unit tests, because the git clone operation is very time consuming…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run test-ggplot2 </span></code></pre></div>
</div>
<pre><code>Transferred 15676 of 74694 objects...</code></pre>
<p><br></p>
<p>…uh, right. Look this is going to take a while, so maybe we should move on?</p>
<p>The main reason I wanted to point to this is to highlight that the clone step occurs at run time, and the entire clone operation is repeated every time we call it. That’s not a smart way to do this. If you really wanted to design a docker workflow for testing packages on arch, you’d want to make some smarter design choices than this! The <code>test-on-arch</code> project I’ve used in this blog post is a toy, nothing more.<sup>31</sup></p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-3-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="hosting-images" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="hosting-images">Hosting images</h2>
<p>For the third example, let’s look at the <a href="https://github.com/djnavarro/arch-r/blob/main/base/Dockerfile"><code>arch-r-base</code></a> image itself. In addition to the dockerfile there are two small text files used to specify locale information. The two locale files aren’t very interesting and could easily have been included as strings in the dockerfile, but I found it neater to keep them separate. The <code>locale-gen</code> file specifies locales that the image understands, and <code>locale.conf</code> specifies configuration details. (Both are configuration files on linux). In any case, here’s the whole thing:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>base/Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb42-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> archlinux:base-devel</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.source <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/djnavarro/arch-r"</span> </span>
<span id="cb42-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.authors <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle Navarro &lt;djnavarro@protonmail.com&gt;"</span> </span>
<span id="cb42-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.description DESCRIPTION</span>
<span id="cb42-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LABEL</span> org.opencontainers.image.licenses <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPL-3.0"</span></span>
<span id="cb42-7"></span>
<span id="cb42-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the locale</span></span>
<span id="cb42-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> base/locale.gen /etc/locale.gen</span>
<span id="cb42-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> base/locale.conf /etc/locale.conf</span>
<span id="cb42-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">locale-gen</span></span>
<span id="cb42-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> LANG=en_US.UTF-8</span>
<span id="cb42-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> LC_ALL=en_US.UTF-8</span>
<span id="cb42-14"></span>
<span id="cb42-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install R and set default command</span></span>
<span id="cb42-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pacman</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Syu</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--noconfirm</span> r</span>
<span id="cb42-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-save</span></span></code></pre></div>
</div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>base/locale.gen</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">C.UTF8</span> UTF-8</span>
<span id="cb43-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">en_US.UTF-8</span> UTF-8</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>base/locale.conf</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb44-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LANG</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>en_US.UTF-8</span>
<span id="cb44-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LC_ALL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>en_US.UTF-8</span></code></pre></div>
</div>
</div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-5a-1.png" class="img-fluid" width="672"></p>
</div></div></div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-5b-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">The names are sampled using the babynames package. I deliberately chose to ignore name frequency, sampling uniformly at random from the names in the data set. You end up with more interesting choices that way.</figcaption>
</figure>
</div>
</div></div></div>
<p>Truly exciting stuff, I know. Thankfully only some of it is new. The <code>FROM</code> instruction uses the <code>archlinux:base-devel</code> image hosted <a href="https://hub.docker.com/_/archlinux">here</a>. The <a href="https://docs.docker.com/engine/reference/builder/#run"><code>RUN</code></a> instruction is used to execute commands at build time, so you can see in this example I’ve used it to create system locale information (by calling <code>locale-gen</code>) and to install R (using the <code>pacman</code> package manager used on arch linux).</p>
<p>The other new thing here is the <a href="https://docs.docker.com/engine/reference/builder/#label"><code>LABEL</code></a> instruction used to supply metadata about the image. This is particularly important if you’re planning to make your image public, as I have done with the <code>arch-r-base</code> and <code>arch-r-test</code> images. The labelling that I’ve supplied here follows the <a href="https://github.com/opencontainers/image-spec/blob/main/annotations.md">specifications</a> provided by the <a href="https://opencontainers.org/">open container initiative</a>, or at least attempts to. I’m still new to this, but as far as I can tell this is correct? Anyway, you can see that it specifies the location of the source code, the author of the image, and the licence. That’s the main thing.</p>
<p>You are probably wondering, though, why the description just reads “DESCRIPTION” and doesn’t have an actual… you know… description. The reason for that is that I’m hosting these through the <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">github container registry</a> that links my github repository to the images automatically. Specifically, I’m using a github action that automates the build process and populates the description on the <a href="https://github.com/djnavarro/arch-r/pkgs/container/arch-r-base">arch-r-base package page</a> using the description field from the <a href="https://github.com/djnavarro/arch-r">arch-r github repository</a>. Leaving the value for that field as “DESCRIPTION” ensures that all works smoothly.</p>
<p>Speaking of which, I’m not in any way an expert on github actions – this is my first attempt at creating a workflow and I cribbed heavily from other workflows I found online – but for whatever it’s worth I figure I should share. Here’s the <a href="https://github.com/djnavarro/arch-r/blob/main/.github/workflows/build-image.yaml">workflow</a> I’m using:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.github/workflows/build-image.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> publish arch-r images</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'release'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb45-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb45-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">REGISTRY</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io</span></span>
<span id="cb45-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IMAGE_NAME</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.repository }}</span></span>
<span id="cb45-10"></span>
<span id="cb45-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build-and-push-image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb45-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strategy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fail-fast</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb45-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./base/Dockerfile</span></span>
<span id="cb45-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io/djnavarro/arch-r-base</span></span>
<span id="cb45-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./test/Dockerfile</span></span>
<span id="cb45-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ghcr.io/djnavarro/arch-r-test</span></span>
<span id="cb45-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span></span>
<span id="cb45-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">permissions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> read</span></span>
<span id="cb45-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> write</span></span>
<span id="cb45-26"></span>
<span id="cb45-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> checkout repository</span></span>
<span id="cb45-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v2</span></span>
<span id="cb45-30"></span>
<span id="cb45-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> login to the container registry</span></span>
<span id="cb45-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9</span></span>
<span id="cb45-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registry</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ env.REGISTRY }}</span></span>
<span id="cb45-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">username</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.actor }}</span></span>
<span id="cb45-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb45-37"></span>
<span id="cb45-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> extract metadata (tags, labels) for docker</span></span>
<span id="cb45-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> meta</span></span>
<span id="cb45-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38</span></span>
<span id="cb45-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.image }}</span></span>
<span id="cb45-43"></span>
<span id="cb45-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> build and push docker image</span></span>
<span id="cb45-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc</span></span>
<span id="cb45-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb45-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb45-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.dockerfile }}</span></span>
<span id="cb45-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb45-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tags</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.meta.outputs.tags }}</span></span>
<span id="cb45-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.meta.outputs.labels }}</span></span></code></pre></div>
</div>
</div>
</div>
<p>For this workflow to run, I needed to edit the permissions associated with my github PAT to include some additional scopes. If, like me, you’ve created your PAT using the default scopes provided by <code>usethis::create_github_token()</code>, you’ll need a few more to run workflows that build and modify docker images if you want to work with github packages. This workflow doesn’t use all these, but the permissions typically required for to work with container images on github are these:</p>
<ul>
<li><code>read:packages</code> scope to download container images and read metadata.</li>
<li><code>write:packages</code> scope to download and upload container images and read and write metadata.</li>
<li><code>delete:packages</code> scope to delete container images.</li>
</ul>
<p>In any case, this github actions workflow triggers an automatic deployment to the github container registry whenever there is a new push to the release branch of the repository. This is what creates the <code>ghcr.io/djnavarro/arch-r-base:release</code> and <code>ghcr.io/djnavarro/arch-r-test:release</code> images. I’m entirely certain that this could be done in a more sophisticated way, but it does work, and that was my main goal for this post.</p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-4-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>And that brings us to the end of the post. There’s not much else to say really. I played around with docker. Learned a few things. Had some fun. Drew some whales. Normal stuff, really. But if you’re at all keen on following up on any of the things in this post, here are some resources I relied on when writing this:</p>
<ul>
<li><p>The docker reference documentation: <a href="https://docs.docker.com/reference/">docs.docker.com/reference</a></p></li>
<li><p>Dockerfile best practices <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">docs.docker.com/develop/develop-images/dockerfile_best-practices</a></p></li>
<li><p>Instructions on giving docker sudo privileges for linux users: <a href="https://docs.docker.com/engine/install/linux-postinstall/">docs.docker.com/engine/install/linux-postinstall</a></p></li>
<li><p>The rocker project by Carl Boettiger, Dirk Eddelbuettel, Noam Ross, and Shima Tatsuya: <a href="https://rocker-project.org/">rocker-project.org</a></p></li>
<li><p>Source code for the rocker repositories: <a href="https://github.com/rocker-org/rocker">github.com/rocker-org/rocker</a></p></li>
<li><p>Blog post on docker by Colin Fay: <a href="https://colinfay.me/docker-r-reproducibility/">colinfay.me/docker-r-reproducibility</a></p></li>
<li><p>Slides on docker by Noam Ross: <a href="https://github.com/noamross/nyhackr-docker-talk">github.com/noamross/nyhackr-docker-talk</a></p></li>
<li><p>Docker for beginners by Prakhar Srivastav: <a href="https://docker-curriculum.com/">docker-curriculum.com</a></p></li>
<li><p>Referencing docker images by Nigel Brown <a href="https://windsock.io/referencing-docker-images/">windsock.io/referencing-docker-images</a></p></li>
<li><p>Working with the github container registry: <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry</a></p></li>
<li><p>Information about open containers labels: <a href="https://github.com/opencontainers/image-spec/blob/main/annotations.md">github.com/opencontainers/image-spec/blob/main/annotations.md</a></p></li>
</ul>
</section>
<section id="postscript-making-dockerplots-in-ggplot2" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="postscript-making-dockerplots-in-ggplot2">Postscript: Making “dockerplots” in ggplot2</h2>
<p>I had a lot of fun making the whales. They’re cute, and they make me happy. The function that generates these is called <code>sample_whales()</code>, and you can find the source code by expanding the folded code block below. Enjoy!</p>
<div class="cell">
<details>
<summary>Source code for <code>sample_whales()</code></summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb46-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb46-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb46-5"></span>
<span id="cb46-6">sample_whales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb46-7"></span>
<span id="cb46-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb46-10"></span>
<span id="cb46-11">  nwhales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nrow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ncol</span>
<span id="cb46-12"></span>
<span id="cb46-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a circle</span></span>
<span id="cb46-14">  circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb46-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">th =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb46-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(th),</span>
<span id="cb46-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(th)</span>
<span id="cb46-18">  )</span>
<span id="cb46-19"></span>
<span id="cb46-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># distort a circle to create the whale body</span></span>
<span id="cb46-21">  whale_body <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> circle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb46-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y),</span>
<span id="cb46-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>)</span>
<span id="cb46-25">    )</span>
<span id="cb46-26"></span>
<span id="cb46-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># distort a circle to create the whale tail</span></span>
<span id="cb46-28">  whale_tail <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> circle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb46-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(th <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pi)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pi) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>,</span>
<span id="cb46-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,</span>
<span id="cb46-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> weight <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> weight),</span>
<span id="cb46-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_scaled =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb46-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_scaled =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb46-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle),</span>
<span id="cb46-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> x_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb46-37">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.35</span>,</span>
<span id="cb46-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb46-39">    )</span>
<span id="cb46-40"></span>
<span id="cb46-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind the body to the tail to make a whale</span></span>
<span id="cb46-42">  whale <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(whale_body, whale_tail)</span>
<span id="cb46-43"></span>
<span id="cb46-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fully stacked set of boxes</span></span>
<span id="cb46-45">  box_stack <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb46-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb46-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb46-48">  )</span>
<span id="cb46-49"></span>
<span id="cb46-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample names using babynames package</span></span>
<span id="cb46-51">  names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb46-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> babynames<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>babynames<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name,</span>
<span id="cb46-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(nwhales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>)</span>
<span id="cb46-54">  ))</span>
<span id="cb46-55"></span>
<span id="cb46-56">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample colours using a blue palette from ggthemes</span></span>
<span id="cb46-57">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb46-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cool blues</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb46-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> nrow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ncol,</span>
<span id="cb46-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb46-61">  )</span>
<span id="cb46-62"></span>
<span id="cb46-63">  boxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb46-64">  whales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb46-65">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(nrow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ncol)) {</span>
<span id="cb46-66"></span>
<span id="cb46-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign the whales a name and a look</span></span>
<span id="cb46-68">    whales[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> whale <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-69">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb46-70">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> names[[i]],</span>
<span id="cb46-71">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">look =</span> shades[[i]]</span>
<span id="cb46-72">      )</span>
<span id="cb46-73"></span>
<span id="cb46-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign the whales a name and colour,</span></span>
<span id="cb46-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and randomly remove boxes off the stack</span></span>
<span id="cb46-76">    boxes[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> box_stack <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-77">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb46-78">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> names[[i]],</span>
<span id="cb46-79">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">look =</span> shades[[i]]</span>
<span id="cb46-80">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-81">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-82">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-83">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_height)</span>
<span id="cb46-84">  }</span>
<span id="cb46-85"></span>
<span id="cb46-86">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collapse lists to data frames</span></span>
<span id="cb46-87">  boxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(boxes)</span>
<span id="cb46-88">  whales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(whales)</span>
<span id="cb46-89"></span>
<span id="cb46-90">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last minute tinkering... :-)</span></span>
<span id="cb46-91">  boxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> boxes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>)</span>
<span id="cb46-92">  whales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> whales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>)</span>
<span id="cb46-93"></span>
<span id="cb46-94">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw the plot</span></span>
<span id="cb46-95">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> look, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> look)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-96">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> whales, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-97">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>(</span>
<span id="cb46-98">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> boxes,</span>
<span id="cb46-99">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,</span>
<span id="cb46-100">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,</span>
<span id="cb46-101">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb46-102">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linejoin =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bevel"</span></span>
<span id="cb46-103">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-104">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(name), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> nrow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-105">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-106">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-107">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-108">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-109">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-110">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-111">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb46-112">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb46-113">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.border =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey90"</span>)</span>
<span id="cb46-114">    )</span>
<span id="cb46-115">}</span></code></pre></div>
</details>
</div>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-grid-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Look, I know it’s technically supposed to be “Docker” not “docker” and it’s supposed to be “GitHub” not “github”. But my body was “supposed” to use testosterone as its primary sex hormone too, and we’ve all seen how little regard I had for that. Sometimes conventions are worth breaking out of sheer bloody-mindedness.↩︎</p></li>
<li id="fn2"><p>STEM people need to find new words for things. What is a “kernel”? Is it the bits of an operating system that run essential processes? Is it a specialised function that applies only to input arguments of specific types (i.e., what R folks would call a “method” in the functional object oriented programming sense, as opposed to the encapsulated object-oriented programming paradigm that dominates in other languages)? Or is it the thing the governs the transformation from data space to feature space in a support vector machine or other inferential systems built on reproducing kernel Hilbert spaces? For fuck’s sake people LEARN A NEW WORD.↩︎</p></li>
<li id="fn3"><p>I’d like to propose using “egg” in lieu of “kernel” for any new tech nomenclature. Not only does it show you have some wit and know your audience.↩︎</p></li>
<li id="fn4"><p>Your audience consists of queers. Nobody else reads this far into a nested footnote series.↩︎</p></li>
<li id="fn5"><p>Sometimes I think that the “not technical enough” concept is just straight up misogyny, both internalised and… external. I mean, I taught myself Bayesian nonparametrics and algorithmic information theory and even wrote respected academic papers in both those fields in addition to my own discipline of mathematical psychology. I was an editor at Science (yes, the journal). I wrote a quite successful statistics textbook. I’m an author on the ggplot2 book. I was a successful tenured academic in a mathematical science with no formal training in mathematics. I’ve taught myself several programming languages. Last year I wrote quite a lot of Apache Arrow content that everyone seems to like. So, um, yeah. Perhaps I should stop paying attention to the opinions of boys who condescend to me and tell me I’m not technical enough because… I’m stronger in R than in Python or C++? Tiresome.↩︎</p></li>
<li id="fn6"><p>Yes I know <a href="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/">I use Arch now</a>, hush. you’ll see why I’m doing this from ubuntu in a moment…↩︎</p></li>
<li id="fn7"><p>I suppose, for the sake of precision, I should draw attention to the part of the output that refers to the <strong>docker client</strong> and the <strong>docker daemon</strong>. Docker takes a client-server approach. When I’m typing these commands I’m interacting with the docker client, which passes my requests over to the docker daemon. The daemon is the process that does most of the work. It pulls images from registries (e.g., <a href="https://hub.docker.com/">docker hub</a>, <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">github container registry</a>, etc), it builds images, it creates containers, etc. In this case, the client and the daemon are both running on the same machine, but they don’t actually have to. The daemon could totally run on a remote system. However, the distinction between the client and the daemon isn’t important for this post so I’m going to ignore it and collectively refer to both of them working together as “docker”.↩︎</p></li>
<li id="fn8"><p>I’m sure that’s supposed to be “Docker file”. Per my earlier footnote, I don’t care.↩︎</p></li>
<li id="fn9"><p>As a little aside. In order to create this output with the “appearance” of starting with a fresh docker installation I – quite nobly – cleared out all my cached containers and images so that I could start from a clean system. Should you ever want to do the same, it’s a two step process. Assuming you don’t have any containers running, your first step is to delete any containers on your system that aren’t running (i.e., all of them) with <code>docker container prune</code>. Then you can delete any “dangling” images that aren’t associated with a container (i.e., all of them) with <code>docker image prune --all</code>. You’re welcome.↩︎</p></li>
<li id="fn10"><p>No I don’t know why they use <code>list</code> for images and <code>ls</code> for containers. That seems unhelpful.↩︎</p></li>
<li id="fn11"><p>I strongly feel there is qualitative dissertation to be written mapping the btw-i-use-arch guy onto the <a href="https://en.wikipedia.org/wiki/Men_Explain_Things_to_Me">men-explain-things-to-me</a> guy from the Rebecca Solnit essay. As far as I can tell they are essentially the same person, just inhabiting different semantic domains. One day I will write the story of the guy at a conference who breathlessly explained a paper to me and how my work would be improved considerably if I’d read it while I was quietly wondering how to explain to him that it was my paper… sigh. <em>Men</em>.↩︎</p></li>
<li id="fn12"><p>Am I the only one who still thinks that CI should stand for “confidential informant” rather than “continuous integration”?↩︎</p></li>
<li id="fn13"><p>Quite obviously, I do not actually recommend anyone use the images I’ve set up. I mean, surely my phrasing here makes 1000% clear that this is a cute project I threw together in a couple of days for my own amusement. If you are looking to do reproducible computing in R you should be using the images provided by rocker. If you use my images and something goes wrong then to be perfectly frank you only have yourself to blame.↩︎</p></li>
<li id="fn14"><p>Set your sights low enough and it is very easy to achieve your goals.↩︎</p></li>
<li id="fn15"><p>No.&nbsp;Just no.↩︎</p></li>
<li id="fn16"><p>It’s an open question how long I’m going to last in this post before making an Archer joke.↩︎</p></li>
<li id="fn17"><p>Technically it’s possible for an <code>ARG</code> instruction to precede a <code>FROM</code> instruction but I’m yet to actually see that in the wild.↩︎</p></li>
<li id="fn18"><p>Much like SQL clauses, docker instructions are written in uppercase by convention. They don’t actually <em>have</em> to be uppercase, but again, I’ve never seen a dockerfile written any other way. Along the same lines, your dockerfile doesn’t actually have to be called “Dockerfile”, but it’s the default and everyone uses it.↩︎</p></li>
<li id="fn19"><p>Alternatively, you can use the <a href="https://docs.docker.com/engine/reference/builder/#volume"><code>VOLUME</code></a> instruction to create a mount point and use that as a way to share a folder between the host and the container at run time, but that’s more fiddly and there’s really no need for that in this simple example. But if you want an easy-to-follow example using the <code>VOLUME</code> instruction in an R project, Colin Fay uses it in his <a href="https://colinfay.me/docker-r-reproducibility/">docker for R users</a> post.↩︎</p></li>
<li id="fn20"><p>The user can override the default by when calling <code>docker run</code> but I’m not going to cover that in this post↩︎</p></li>
<li id="fn21"><p>Correctly.↩︎</p></li>
<li id="fn22"><p>To a first approximation you can imagine that every docker instruction produces a layer, and it is my understanding that this is how it used to be. But for efficiency reasons more recent versions of docker only produce persistent layers from <code>RUN</code>, <code>COPY</code>, and <code>ADD</code> instructions. Other instructions produce temporary intermediate images, but do not create persistent layers in the final image.↩︎</p></li>
<li id="fn23"><p>Or, as Sterling would phrase it, “I swear I had something for this.”↩︎</p></li>
<li id="fn24"><p>Now that I’ve started making Archer jokes, it’s very hard not to turn “docker” into a euphemism. Hm. I should call him.↩︎</p></li>
<li id="fn25"><p>Look all I’m saying is that “Queering the dock: images as tops, containers as bottoms” would make a terrible thesis and I would read the hell out of it.↩︎</p></li>
<li id="fn26"><p>In truth I didn’t actually need to construct the <code>my-system-check</code> image at all: I could have just run <code>arch-r-base</code> in a container with a few arguments tweaked. But that would defeat the point of the exposition, obviously.↩︎</p></li>
<li id="fn27"><p>Phrasing.↩︎</p></li>
<li id="fn28"><p>Okay yeah I could do this at run time too, but I want an excuse to talk about the <code>ARG</code> instruction.↩︎</p></li>
<li id="fn29"><p>Okay yes, clever person, I could have chosen to pass environment variables at run time using the <code>--env</code> argument to <code>docker run</code>. I didn’t need to do this at build time using <code>ARG</code>. But that would defeat the point of the exposition wouldn’t it? I wanted to use <code>ARG</code> and <code>ENV</code> in the main text, and quietly mention the <code>--env</code> argument to <code>docker run</code> in an aside. And I have now accomplished exactly that, haven’t I?↩︎</p></li>
<li id="fn30"><p>I am, after all, “on smoko” (which in my case means I am unemployed and bored out of my mind) but incidentally if you want to see the most fabulous cover ever (Wet Leg covering The Chats), <a href="https://www.youtube.com/watch?v=P_dza9y6cg0">here it is</a>.↩︎</p></li>
<li id="fn31"><p>I know the mystery will be too much for some people so I’d better resolve it: no, the ggplot2 tests didn’t pass on the arch image. Some of the dependencies didn’t install properly, and then eventually it threw an error trying to build the vignettes. If I had the energy I’d dig into it and figure out why… but I don’t.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Playing with Docker and the Github Container Registry},
  date = {2023-01-01},
  url = {https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Playing with Docker and the Github
Container Registry.”</span> January 1, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker">https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <category>Docker</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/whales.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>btw I use Arch now</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I installed <a href="https://archlinux.org/">Arch Linux</a> on an aging Dell XPS 13 today.</p>
<p>Did I plan to do this when I woke up this morning? No, it was an impulsive decision. Was it a sensible way to spend the last Friday of 2022? Also no. Was it the kind of thing that will pay off in the long run through a deeper technical understanding of… something? Again, the answer is no.</p>
<p>Ah, but will it impress people and make them think I am cool?</p>
<p>Oh honey.</p>
<p>No.<sup>1</sup></p>
<p>But look…</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/screenfetch.png" class="img-fluid figure-img" alt="The screenfetch for Arch running on my laptop"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/laptops.jpg" class="img-fluid figure-img" alt="My regular laptop running Ubuntu (on the left) and the newly-built Arch laptop (on the right)"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/rstudio.png" class="img-fluid figure-img" alt="The Arch screenfetch alongside ggplot2 output, both inside RStudio"></p>
</figure>
</div>
<p>So pretty. So pointless. So fun.</p>
<p><br></p>
<section id="installing-arch" class="level2">
<h2 class="anchored" data-anchor-id="installing-arch">Installing Arch</h2>
<p>I have absolutely no intention of writing a “how to install Arch” guide, for many excellent reasons. Top of that list is that I am a complete amateur when it comes to Arch and I have no idea whatsoever what I’m doing. The only reason any of this happened is that I happened to have a spare laptop<sup>2</sup> and couldn’t think of anything better to do with it. My point is I have no business whatsoever in trying to guide anyone else through the installation process. What I am going to do, however, is jot down my notes to myself on the process. I may need them again…</p>
<ul>
<li><p>The installation guide (<a href="wiki.archlinux.org/title/installation_guide">https://wiki.archlinux.org/title/installation_guide</a>) is good but dense, and I had to read a lot of the documents it links to in order to make progress. It took me three tries to get a working installation, because I missed some subtle thing (e.g., the first time I didn’t have the bootable USB booting in UEFI mode, because <em>obviously</em> I would have thought of that at the beginning… sigh).</p></li>
<li><p>Everything became easier once I started feeling comfortable using <a href="https://wiki.archlinux.org/title/pacman">pacman</a>.</p></li>
<li><p>The network configuration step gave me some grief. Eventually I got it to work when I installed <a href="https://wiki.archlinux.org/title/NetworkManager">NetworkManager</a> and enabled <code>NetworkManager.service</code>, which in turn only made sense to me after I’d read about <a href="https://wiki.archlinux.org/title/Help:Reading#Control_of_systemd_units">start/enable</a> and realised that “starting” a service sets it running in the background now, and “enabling” it means it will start automatically on startup.</p></li>
<li><p>Toward the end of the installation it tells you to install a bootloader. I thought I wouldn’t need to since I already had grub on my machine from the previous Ubuntu install but in the end it didn’t work without going through the <a href="https://wiki.archlinux.org/title/GRUB">GRUB</a> install process</p></li>
<li><p>Setting up users was an odd exercise in reminding me that I’d forgotten what life was like before sudo. During the initial installation I set up a root user, but no regular users, so my first step was to give myself a … um, me. This article on <a href="https://linuxhint.com/add_users_arch_linux/">adding users on Arch Linux</a> was helpful. Partly because it’s a nice walkthrough, but also because it clued me into the fact that Arch doesn’t come with <a href="https://wiki.archlinux.org/title/sudo">sudo</a>, so I had to install that. It also highlighted things I’d never thought about with sudo before, mostly around which users have sudo privileges. Anyway, the article walked me through the process so now I am danielle on my Arch box (insert the usual Australian joke about getting a root). I added myself to the wheel group so that I can escalate to admin privileges using sudo, and I’m done.</p></li>
<li><p>As much as the thought of returning to my childhood and running a computer without any desktop environment at all amused me… no. No we are going to have a desktop. I did think about other possible desktop environments besides old faithful, but in the end decided that I actually quite like the look and feel of default <a href="https://wiki.archlinux.org/title/GNOME">GNOME</a> (even without the various tweaks that distros usually overlay on top of it) so I installed that. I did, however, make one concession to nostalgia. I decided not to have the machine automatically boot into GNOME. Instead I followed the instructions so I could start it with <code>startx</code> as soon as I log in, or choose to stay in the shell.</p></li>
<li><p>Installing a decent browser (<a href="https://wiki.archlinux.org/title/firefox">firefox</a>, obviously…) was easy, but not surprisingly the font situation for the web was a bit tricky. Arch doesn’t come with an extensive font library so the browser would often rely on fallback fonts for pages that don’t bundle the fonts, making a lot of pages look a bit unpleasant. Fixing that took a bit of digging. The best description on fonts I found was <a href="https://gist.github.com/YoEight/d19112db56cd8f93835bf2d009d617f7">this gist</a>. I have a suspicion that it’s the <a href="https://archlinux.org/packages/extra/any/noto-fonts/">noto-fonts</a> package that does a lot of the work in fixing the issues</p></li>
<li><p>Fixing the touchpad scroll direction and speed was awkward too. Initially the settings panel in GNOME didn’t acknowledge that I even had a touchpad, which was annoying. So I started trying to edit the <a href="https://man.archlinux.org/man/xorg.conf.5">xorg.conf</a> settings and… actually I don’t think that fixed anything but weirdly after editing <code>/etc/X11/xorg.conf</code> the touchpad settings magically showed up in the GNOME settings panel and then I could edit them. Yeah. I have no idea whatsoever whether this had anything to do with me, or if the gods at large were messing with me or what. So um… yeah, future Danielle, best of luck!</p></li>
</ul>
<p>Moving on…</p>
<p><br></p>
</section>
<section id="setting-up-r-on-arch" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-r-on-arch">Setting up R on Arch</h2>
<p>Any time I get a new machine set up, my first discretionary task is to make sure that I can do data science work with it (that’s a depressingly revealing statement about me). Once upon a time that really meant getting R set up, but I’m a bit more polyglot nowadays (gasp!). Nevertheless, R is my first love so I always start there…</p>
<p>Some of the set up tasks are easy, or at least as easy as anything gets on linux. For example, installing <a href="https://wiki.archlinux.org/title/r">R</a> is “easy”, and installing <a href="https://wiki.archlinux.org/title/git">git</a> is “easy”. Similarly, if you use <a href="https://wiki.archlinux.org/title/Visual_Studio_Code">VS code</a> as your IDE, that too is “easy”. These are all easy tasks because they’re officially supported. You can install all three with one command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> pacman <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-S</span> r git code</span></code></pre></div>
<p>That installs the most recent R release, the current git release, and the current VS code release. It’s considerably easier than installing on a Ubuntu LTS release, especially for R, to be honest. On Ubuntu there’s a lot of messing about trying to get the latest versions. The Arch repositories are up to date, which does simplify matters considerably.</p>
<p>Things become a little trickier when you have to venture outside the official repositories. For example, suppose I want to use RStudio as my IDE. There isn’t an Arch package for RStudio, and – to the surprise of nobody – Posit doesn’t release one either. However, I’m hardly the first person to want to use RStudio on Arch, so it is equally unsurprising that the Arch community has stepped in to help fill the gap.</p>
<p>In other words, I’ve reached the point where I have to start installing from the <a href="https://aur.archlinux.org/">Arch user repository</a> (AUR). This is a community resource, so you have to be a bit more careful in checking that the packages you install from here are good ones, but that’s no different to investigating an R package before installing from CRAN or GitHub. It’s also really important to read through <a href="https://wiki.archlinux.org/title/Arch_User_Repository">the AUR guidelines</a> <em>before</em> you start trying to use it, because it talks about the tools you’ll need to install first and has a nice walkthrough of the process. So I did that, installed everything from the <a href="https://archlinux.org/groups/x86_64/base-devel/">base-devel group</a> and got started…<sup>3</sup></p>
<p>There are a few different user submitted packages for RStudio on the AUR. The one I decided to use was <a href="https://aur.archlinux.org/packages/rstudio-desktop-bin">rstudio-desktop-bin</a>, largely because it’s a binary<sup>4</sup> and because other Arch users seem to like it. It’s a multi-step process. First I had to get a copy of the package files. The easiest way is with git:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://aur.archlinux.org/rstudio-desktop-bin.git</span></code></pre></div>
<p>The <code>rstudio-desktop-bin</code> folder that I just downloaded contains a <code>PKGBUILD</code> file… opening it in a text editor reveals that it’s basically a recipe for building a package. It doesn’t actually contain any of the components you need, and in fact for RStudio what you’ll notice when you take a peek at the inside is that it’s essentially a wrapper telling Arch how to use the <code>.deb</code> binary that Posit releases for Ubuntu/Debian systems.</p>
<p>To build the package I navigate to this folder and call <code>makepkg</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> rstudio-desktop-bin</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">makepkg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span></span></code></pre></div>
<p>The <code>-s</code> flag attempts to synchronise: it will download and install any dependencies, as long as those are official dependencies (I think?). It doesn’t install dependencies when those are also packages on the AUR. Those you just have to do manually.</p>
<p>Anyway once <code>makepkg</code> does its job, you end up with a whole lot of new files in that folder. The one that we care most about is the one with the <code>.pkg.tar.zst</code> file extension. That’s the one that <code>pacman</code> can install:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> pacman <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> rstudio-desktop-bin-2022.12.0.353-1-x86_64.pkg.tar.zst</span></code></pre></div>
<p>This will install RStudio and… it almost works. When I attempt to open RStudio I get a message in the Rstudio window complaining about a missing library. Digging into the comments on the <a href="https://aur.archlinux.org/packages/rstudio-desktop-bin">rstudio-desktop-bin</a> revealed the problem. One of the system dependencies for RStudio is missing from the PKGBUILD file: you have to install <code>openssl-1.1</code> to make it work. This did the trick for me:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> pacman <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> openssl-1.1</span></code></pre></div>
<p>And that’s it. Just like that I have RStudio running on Arch…</p>
<p>… and just like that I felt an immediate need to also get quarto running on Arch so that I could write this blog post on my new Arch box. Quarto is also available on the AUR, and I installed it using the <a href="https://aur.archlinux.org/packages/quarto-cli">quarto-cli</a> package, following essentially the same process described above. There were no missing dependencies, and everything seems to work fine.</p>
<p>I’m suspicious. Things aren’t supposed to work first time. I fully expect my laptop to catch fire simply because I am doing something foolish.</p>
</section>
<section id="was-it-worth-it" class="level2">
<h2 class="anchored" data-anchor-id="was-it-worth-it">Was it worth it?</h2>
<p>Probably not. But I don’t care. I had fun. Sometimes we do things because it’s useful to do them. Sometimes we do things because we like doing them. It’s important to know the difference. This was fun.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>No.↩︎</p></li>
<li id="fn2"><p>Don’t ask why, it’s a long and unbearably stupid story.↩︎</p></li>
<li id="fn3"><p>After I posted this on mastodon, <a href="https://fosstodon.org/@urswilke/109605698346985430">Urs Wilke</a> kindly told me about <a href="https://aur.archlinux.org/packages/yay">yay</a>, which simplifies the process of installing packages from AUR. I intend to look into this! It looks really nice↩︎</p></li>
<li id="fn4"><p>I have indeed managed to build the RStudio IDE from source on Arch. Once. I shan’t be doing that again. All my horrible memories of building all the Apache Arrow R and C++ libraries from source for the very first time came flooding back.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Navarro, Danielle},
  title = {Btw {I} Use {Arch} Now},
  date = {2022-12-31},
  url = {https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2022. <span>“Btw I Use Arch Now.”</span> December 31,
2022. <a href="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch">https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/index.html</guid>
  <pubDate>Fri, 30 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/arch.png" medium="image" type="image/png" height="137" width="144"/>
</item>
<item>
  <title>A very strange year</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-26_strange-year/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post refers briefly to sexual assault</p>
</div>
</div>
<p>We all saw this back in 2020, right? It seemed pretty funny to me at the time – 2020 was such a messed up year that it seemed hard to believe that 2022 could <em>really</em> be even stranger. Oh how very wrong I was.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/godzilla.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p>My personal life has taken the biggest upheavals. After leaving academia in late 2021, I started my first ever tech job in January 2022… and was let go from my first ever tech job in December 2022. Not gonna lie, that one stings a bit, but mostly because it’s recent and I still haven’t really emotionally processed it all. I’m objective enough to recognise that the situation I’m in now really isn’t so bad. I lost a job that I was enjoying. I feel sad and hurt about losing it because I’m a normal human being who feels sad about things that are sad. It’ll pass. I’ll heal.</p>
<p>Besides, let’s be honest. In a year when I find myself in the situation where I can say things like “okay sure I’ve been sexually assaulted four times in the last 12 months, but technically speaking, only two of the men raped me” in a conversation and have it be entirely true, losing a job just doesn’t carry the level of trauma that it probably should.</p>
<p>On reflection, that is a very horrible sentence to have written.</p>
<p>But it is true. Sexual assault has been a recurring theme in 2022 for me, and while I don’t have much desire to talk about what it feels like to have been repeatedly violated in my personal life, I also don’t feel like I should be ashamed that it happened. I’m not going to make a secret of something that was not my fault. It happened, and I cannot change the fact that it happened. I’ve picked up the pieces as best I can and gone about my life again. What else can I do?</p>
<p>But let’s turn to happier topics, shall we? I’ve said the thing I wanted to say about the dark topics and there’s no need to dwell.</p>
<section id="contributing-to-the-ggplot2-book" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="contributing-to-the-ggplot2-book">Contributing to the ggplot2 book</h2>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/ggplot2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div></div><p>I keep a little log of things that I’ve been doing with my time, and it’s interesting to look back at what I was doing in January 2022. It feels like a lifetime ago: on January 9th I merged <a href="https://github.com/hadley/ggplot2-book/pull/260">a big pull request into the work-in-progress 3rd edition of the ggplot2 book</a> that reorganised the scales chapters. I haven’t had time to do anything else on that since January, but I really like how the writing worked out for that (plus it’s always fun to work with Hadley!) The book now has four separate chapters on scales. Three of the chapters focus on the practicalities of working with scales:</p>
<ul>
<li>Position scales: <a href="https://ggplot2-book.org/scale-position.html">ggplot2-book.org/scale-position.html</a></li>
<li>Colour scales: <a href="https://ggplot2-book.org/scale-colour.html">ggplot2-book.org/scale-colour.html</a></li>
<li>Scales for other aesthetics: <a href="https://ggplot2-book.org/scale-other.html">ggplot2-book.org/scale-other.html</a></li>
</ul>
<p>There’s a fourth one too, which talks more about the underlying theory:</p>
<ul>
<li>Scales and guides <a href="https://ggplot2-book.org/scales-guides.html">ggplot2-book.org/scales-guides.html</a></li>
</ul>
<p>Having done earlier work helping out with revising the <a href="https://ggplot2-book.org/maps.html">Maps</a> and <a href="https://ggplot2-book.org/annotations.html">Annotations</a> chapters, it felt really nice to be able to work on that. It’s possible I’ll have more time to revisit in 2023, but at this point all my plans are up in the air so who knows.</p>
</section>
<section id="writing-about-apache-arrow" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="writing-about-apache-arrow">Writing about Apache Arrow</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/arrow.png" class="img-fluid"></p>
</div></div><p>For most of the year I was gainfully employed to work on open source projects – Apache Arrow in particular – and I’ve written a lot over the last year about it. On this blog alone here’s what I wrote this year:</p>
<ul>
<li><a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">Getting started with Apache Arrow in R</a>. A now slightly dated primer on how to get started. Okay this one was technically November 2021, but it’s the logical beginning of the sequence of posts and I’m including anyway</li>
<li><a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">Binding Apache Arrow to R</a>. A post about how the dplyr bindings in the arrow R package work and how you can write them yourself</li>
<li><a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">Data types in Arrow and R</a>. A very long post that walks you through the low level data types used by Arrow and R, and some of the subtle details around translating from one to the other</li>
<li><a href="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/">Arrays and tables in Arrow</a>. This post builds on the previous one and talks about some of the higher level data structures used in Apache Arrow (Arrays, Tables, Record Batches, etc), and the ways in which they are similar to and different from similar data structures in R (vectors, data frames, etc).</li>
<li><a href="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/">How to visualise a billion rows of data in R with Apache Arrow</a>. This one was a practical post, walking you through the process of plotting a very large data set</li>
<li><a href="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/">Passing data between R and Python with reticulate</a> Part one of a two-part series about how you can use Arrow to pass data between R and Python without incurring serialisation costs. In part one I talked about it from an R-centric perspective, using the reticulate R package as the primary tool</li>
<li><a href="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/">Passing data between Python and R with rpy2</a> Part two of the same series. This one takes a Pythonic perspective and uses the rpy2 Python library as the primary tool</li>
<li><a href="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/">Building an Arrow Flight server</a>. One of the underrated features of the Arrow toolkit is that is the Flight RPC protocol: you can use it to efficiently communicate Arrow data over a network. This post is a walkthrough of how to do that in R and Python (mostly Python, really)</li>
<li><a href="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/">The Arrow Dataset API</a>. The last Arrow post I wrote this year talked about the Arrow Dataset API in more detail than I had done previously.</li>
</ul>
<p>A lot of these posts are… well, they’re long and they’re detailed. The intention was always to try to create a collection of useful resources with code walkthoughs that I could later fold back into documentation, books, workshops and so on. The nice thing is that this actually did happen. For example…</p>
<ul>
<li>I wrote an entire workshop on <a href="https://arrow-user2022.netlify.app/">Larger than memory data workflows with Apache Arrow</a> for the R community. The slides, walkthrough, tutorial, etc are all up on the website</li>
<li>I contributed a chapter on Arrow to the 2nd edition of <a href="https://r4ds.hadley.nz/arrow.html">R for Data Science</a>. Given the centrality of R4DS in the R community I kind of feel like that’s probably one of the more useful things I actually managed to get done!</li>
</ul>
<p>But probably the biggest thing is that a lot of the content from my other writing worked its way into a <a href="https://github.com/apache/arrow/commit/4afe71030cdd9d3103c7b028082ba63bafdf5d27">big pull request</a> I wrote updating the documentation for the arrow R package. It hasn’t <em>quite</em> gone properly live yet, and I don’t think it will migrate to the front page until the 11.0.0 release in January, but it’s currently available on the dev version of the documentation.</p>
<ul>
<li>I completely rewrote the <a href="https://arrow.apache.org/docs/dev/r/articles/arrow.html">Get started</a> page so that it is now more novice friendly and helps orient new users</li>
<li>I added a new article highlighting the <a href="https://arrow.apache.org/docs/dev/r/articles/read_write.html">read/write capabilities</a> of Arrow</li>
<li>I added a new article talking about the <a href="https://arrow.apache.org/docs/dev/r/articles/data_wrangling.html">data wrangling using the dplyr interface</a> that was partly new material, and partly reworked existing content</li>
<li>I tidied up the article on <a href="https://arrow.apache.org/docs/dev/r/articles/dataset.html">multi-file Dataset objects</a></li>
<li>I added a new article on <a href="https://arrow.apache.org/docs/dev/r/articles/data_objects.html">data objects in Arrow</a> that reworked a lot of content I’d originally written for my blog</li>
<li>I added a new article on <a href="https://arrow.apache.org/docs/dev/r/articles/data_types.html">data types in Arrow</a> that, again, reworked a lot of content I’d written for my blog</li>
<li>I laid the groundwork for a tidier discussion of <a href="https://arrow.apache.org/docs/dev/r/articles/metadata.html">metadata in Arrow</a> that I’d intended to expand on later</li>
</ul>
<p>Oh, and I also wrote the <a href="https://arrow.apache.org/visual_identity/">Arrow Visual Identity</a> page and all the code for generating the various logos!</p>
<p>There was a lot more I wanted to do with Arrow, to be honest. For example, the R package doesn’t handle Arrow Flight correctly at the moment (it works in special cases but it badly needs updating), and – before I found myself unemployed – I had talked about writing bindings so that the R package implemented the Arrow Flight protocol correctly. Maybe one day I’ll write them. I don’t think it’s actually very hard because the hard work is already done in the C++ library, but… oddly, I think I’ll take a bit of a break from Arrow work while I let my emotions about my employment situation settle.</p>
</section>
<section id="art" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="art">Art</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/hexagonal.png" class="img-fluid"></p>
</div></div><p>I made a lot of generative art in 2022, though maybe not quite as much as in 2021. I added nine new galleries on my art website <a href="https://art.djnavarro.net/">art.djnavarro.net</a>, but really the big thing for me in art this year was being invited to give a generative art workshop at rstudio::conf. So, thanks to the support of folks at Posit, there is now a fully fledged freely available tutorial – okay it’s closer to being an entire book, really – on how to make generative art with R. It’s online at <a href="https://art-from-code.netlify.app/">art-from-code.netlify.app</a>. It makes me really happy that I was lucky enough to be able to write that one. I was also interviewed for the DSxD book on <a href="https://datasciencebydesign.org/book">The Future of Data Science</a> for my artistic work! Oh, and one of my art pieces was used – with my permission freely given to the authors because they are lovely – as a the cover of a book on transgender sexual health, which I think is really cool.</p>
</section>
<section id="academia" class="level2">
<h2 class="anchored" data-anchor-id="academia">Academia</h2>
<p>Somehow, despite the fact that I am no longer in academia, I managed to publish some academic papers… in my spare time, like normal people do. To be fair though I didn’t actually do much of the work this year: these were all project that I’d committed to while I was still in academia. They were mostly papers that had been accepted or in the final stages of revision at the start of 2021 and have been slowly emerging from the pipeline one by one. It’s hard to know what to say about my academic output given that I’m no longer invested in the peculiar norms of the academia. It’s not my world anymore. I care a lot about some of the values, and so I’m still maintaining a personal archive as well as contributing my papers to institutional and other public archives, but… look, if ever you feel a need to ask “wait, what was Danielle’s academic research all about?” I moved all that to <a href="https://papers.djnavarro.net/">papers.djnavarro.net</a> at the end of 2022.</p>
</section>
<section id="what-else" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-else">What else?</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/crayola.png" class="img-fluid"></p>
</div></div><p>I did a lot of other things in 2022. There’s really no need to try to go through all of them. But here are some other personal favourites that made an appearance on this blog:</p>
<ul>
<li>I wrote an R package on multi-threaded task queues: <a href="https://blog.djnavarro.net/posts/2022-12-22_queue/">blog.djnavarro.net/queue</a></li>
<li>I wrote about Crayola crayon colours and some fun data wrangling problems: <a href="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/">blog.djnavarro.net/crayola-crayon-colours</a></li>
<li>I wrote an absurdly popular blog post about mastodon: <a href="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/">blog.djnavarro.net/what-i-know-about-mastodon/</a></li>
<li>I wrote a post that I <em>thought</em> was absurdly-popular (until the mastodon thing happened) about porting this blog from distill to quarto: <a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">blog.djnavarro.net/porting-to-quarto</a></li>
</ul>
</section>
<section id="so-what-happens-next" class="level2">
<h2 class="anchored" data-anchor-id="so-what-happens-next">So what happens next?</h2>
<p>Arriving at the end of this post, I find myself very unsure about what comes next. It’s been such a strange year. I’m proud of the work that I’ve done and the projects I’ve completed. It feels good to be able to look at the list above and think yeah that’s actually a pretty decent body of work, and I could have added more if I’d wanted to. I think I’ve used my time well? I’ve accomplished a lot and learned a lot. But at the same time these things sit against a stunningly horrible backdrop, and it hasn’t been easy coping with that. In general I try not to talk about those kinds of topics on this blog – this is a data science blog, after all, and it’s not really a place for talking about sexual assault and what can do to your sense of self worth – but I suppose I would like it if 2023 goes a little differently. Not sure I can manage another year like this one.</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Navarro, Danielle},
  title = {A Very Strange Year},
  date = {2022-12-26},
  url = {https://blog.djnavarro.net/posts/2022-12-26_strange-year},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2022. <span>“A Very Strange Year.”</span> December
26, 2022. <a href="https://blog.djnavarro.net/posts/2022-12-26_strange-year">https://blog.djnavarro.net/posts/2022-12-26_strange-year</a>.
</div></div></section></div> ]]></description>
  <guid>https://blog.djnavarro.net/posts/2022-12-26_strange-year/index.html</guid>
  <pubDate>Sun, 25 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-26_strange-year/hexagonal_smol.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Queue</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-22_queue/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Okay. So I wrote a simple package for <a href="https://queue.djnavarro.net">multi-threaded tasks queues in R</a> this week. It wasn’t intentional, I swear. I was just trying to teach myself how to use the <a href="https://callr.r-lib.org/">callr</a> package,<sup>1</sup> and making sure I had a solid grasp of encapsulated object-oriented programming with <a href="https://r6.r-lib.org/">R6</a>. Things got a little out of hand. Sorry.</p>
<p>And let’s be very clear about something at the outset. If you want to do parallel computing in R correctly, you go look at <a href="https://www.futureverse.org/">futureverse.org</a>. The <a href="https://future.futureverse.org/">future</a> package by Henrik Bengtsson provides a fabulous way to execute R code asynchronously and in parallel. And there are many excellent packages built on top of that, so there’s a whole lovely ecosystem there just waiting for you.<sup>2</sup> Relatedly, if the reason you’re thinking about parallel computing is that you’ve found yourself with a burning need to analyse terabytes of data with R then babe it might be time to start learning some R workflows using <a href="https://therinspark.com/">Spark</a>, <a href="https://blog.djnavarro.net/category/apachearrow">Arrow</a>, <a href="https://www.r-bloggers.com/2022/04/wtf-is-kubernetes-and-should-i-care-as-r-user/">Kubernetes</a>. It may be time to learn about some of those other eldritch words of power that have figured rather more prominently in my life than one might expect for a simple country girl.<sup>3</sup></p>
<p>My little queue package is a personal project. I happen to like it, but you should not be looking at it as an alternative to serious tools.</p>
<p>That’s been said now. Good. We can put aside all pretension.</p>
<section id="what-does-it-do" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-does-it-do">What does it do?</h2>
<p>Let’s say I have a generative art function called <code>donut()</code>, based loosely on a <a href="https://art-from-code.netlify.app/day-1/session-1/#composition">teaching example from my art from code workshop</a>. The <code>donut()</code> function takes an input <code>seed</code>, creates a piece of generative art using ggplot2, and writes the output to an image file. This process takes several seconds to complete on my laptop:</p>
<div class="cell" data-hash="index_cache/html/my-first-donut_78cc3a9337022adc6a85a72fd51f194e">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">donut</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>5.277 sec elapsed</code></pre>
</div>
</div>
<p>Here’s the piece, by the way:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_100.png" class="img-fluid"></p>
<p>That’s nice and I do like this piece, but generative art is an iterative process and I like to make many pieces at once to help me get a feel for the statistical properties of the system. Waiting five or six seconds for one piece to render is one thing: waiting 8-10 minutes for 100 pieces to render is quite another. So it’s helpful if I can do this in parallel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(queue)</span></code></pre></div>
</div>
<p>Here’s how I might do that using queue. I designed the package using R6 classes – more on that later – so we’ll be working in the “encapsulated” object oriented programming style that is more common in other programming languages. The first step is to initialise a <a href="https://queue.djnavarro.net/reference/Queue.html"><code>Queue</code></a> object, specifying the number of workers we want to use. I’ll use six:</p>
<div class="cell" data-hash="index_cache/html/my-first-queue_dfc1ff39dc3ddb607ec985d5339378c1">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">queue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
</div>
<p>When I do this, the queue package starts six R sessions for us, and all my computations will be done in those R sessions. Under the hood, all the hard work of managing the R sessions is being done by the wonderful callr package by Gábor Csárdi<sup>4</sup> – the only thing that queue does is provide a layer of abstraction and automation to the whole process.</p>
<p>Next, I’ll add some tasks to the queue. <code>Queue</code> objects have an <code>add()</code> method that take a function and a list of arguments, so I can do this to push a task to the queue:</p>
<div class="cell" data-hash="index_cache/html/my-first-task_e9d06a818d4aab8856c997131ca80f42">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(donut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
</div>
<p>When the queue executes, it will be in a “first in, first out” order,<sup>5</sup> so this task will be the first one to be assigned to a worker. Though of course that’s no guarantee that it will be the first one to finish!</p>
<p>Anyway, let’s load up several more tasks. There’s some weird aversion out there to using loops in R, but this isn’t one of those situations where we need to worry about unnecessary copying, so I’m going to use a loop:</p>
<div class="cell" data-hash="index_cache/html/load-several-tasks_5cc68af5a47beff90603fa0c398907e3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span>) queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(donut, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s))</span></code></pre></div>
</div>
<p>So now we have nine tasks loaded onto a queue with six workers. To start it running I call the <code>run()</code> method for the queue. By default, all you’d see while the queue is running is a spinner with a progress message telling you how many tasks have completed so far, how many are currently running, and how many are still waiting. But I’ll ask it to be a bit more chatty. I’ll call it setting <code>message = "verbose"</code> so that we can see a log showing the order in which the tasks completed and time each task took to complete, in addition to the total time elapsed on my system while the queue was running:</p>
<div class="cell" data-hash="index_cache/html/run-my-queue_f0e1b58ef56570b65d67c0ec4ae0c11c">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"verbose"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_5 finished in 3.18 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_2 finished in 5.78 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_6 finished in 5.78 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_4 finished in 7.34 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_3 finished in 8.09 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_1 finished in 9.46 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_7 finished in 7.76 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_9 finished in 6.09 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_8 finished in 6.92 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ Queue complete: 9 tasks done in 12.7 secs</code></pre>
</div>
</div>
<p>Here are the nine pieces that popped off the queue in 13 seconds:</p>
<div class="column-screen-inset">
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_100.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_101.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_102.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_103.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_104.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_105.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_106.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_107.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_108.png" class="img-fluid"></p>
</div>
</div>
</div>
</div>
<p>So it’s a three-step process: (1) create the queue, (2) load up the tasks, (3) execute the tasks. In practice I would probably simplify the code to this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">queue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span>) queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(donut, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s))</span>
<span id="cb18-3">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span>()</span></code></pre></div>
</div>
<p>True, I could simplify it further. For example, if I know that I’m always calling the same function and always passing the same the same arguments – just with different values – this could be wrapped up in <a href="https://purrr.tidyverse.org/">purrr</a> style syntax, but honestly I’m not sure why I would bother doing that when <a href="https://furrr.futureverse.org/">furrr</a> already exists? I’m not planning to reinvent the wheel, especially not when Davis Vaughn already offers a fully-operational mass-transit system free of charge.</p>
</section>
<section id="what-does-it-store" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-does-it-store">What does it store?</h2>
<p>The output object <code>out</code> stores quite a lot of information about the tasks, the results, and the events that occurred during task execution, but most of it isn’t immediately interesting to us (especially when things actually work!) So let’s keep things simple for the moment and just look at the first five columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">out[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  task_id worker_id state        result       runtime
1  task_1    577202  done donut_100.png 9.457713 secs
2  task_2    577226  done donut_101.png 5.782191 secs
3  task_3    577239  done donut_102.png 8.087054 secs
4  task_4    577251  done donut_103.png 7.336802 secs
5  task_5    577263  done donut_104.png 3.183247 secs
6  task_6    577275  done donut_105.png 5.780861 secs
7  task_7    577263  done donut_106.png 7.763061 secs
8  task_8    577226  done donut_107.png 6.921016 secs
9  task_9    577275  done donut_108.png 6.093996 secs</code></pre>
</div>
</div>
<p>The columns are pretty self-explanatory I think?</p>
<ul>
<li><code>task_id</code> is a unique identifier for the task itself</li>
<li><code>worker_id</code> is a unique identifier for the worker that completed the task (it’s also the process id for the R session)</li>
<li><code>state</code> summarises the current state of the task (they’re all <code>"done"</code> because the queue is finished)</li>
<li><code>result</code> is a list column containing the output from each task</li>
<li><code>runtime</code> is a difftime column telling you how long each task took to finish</li>
</ul>
<p>As for the the full output… well… here it is…</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  task_id worker_id state        result       runtime                                                                          fun args
1  task_1    577202  done donut_100.png 9.457713 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  100
2  task_2    577226  done donut_101.png 5.782191 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  101
3  task_3    577239  done donut_102.png 8.087054 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  102
4  task_4    577251  done donut_103.png 7.336802 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  103
5  task_5    577263  done donut_104.png 3.183247 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  104
6  task_6    577275  done donut_105.png 5.780861 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  105
7  task_7    577263  done donut_106.png 7.763061 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  106
8  task_8    577226  done donut_107.png 6.921016 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  107
9  task_9    577275  done donut_108.png 6.093996 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  108
              created              queued            assigned             started            finished code
1 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:03  200
2 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00  200
3 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:02  200
4 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:01  200
5 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:57  200
6 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00  200
7 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:57 2022-12-23 12:27:57 2022-12-23 12:28:05  200
8 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00 2022-12-23 12:28:00 2022-12-23 12:28:06  200
9 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00 2022-12-23 12:28:00 2022-12-23 12:28:06  200
                             message stdout stderr error
1 done callr-rs-result-8ce3e320ef539                NULL
2 done callr-rs-result-8ce3e6e032153                NULL
3 done callr-rs-result-8ce3e5d32c7ba                NULL
4  done callr-rs-result-8ce3e72346af                NULL
5 done callr-rs-result-8ce3e4193129d                NULL
6 done callr-rs-result-8ce3e42c3653c                NULL
7 done callr-rs-result-8ce3e6ecedbfa                NULL
8 done callr-rs-result-8ce3e41e0f9e6                NULL
9 done callr-rs-result-8ce3e5a3c4630                NULL</code></pre>
</div>
</div>
<p>Okay so there’s a bit more to unpack here. Let’s take a look…</p>
<ul>
<li>The <code>fun</code> and <code>args</code> columns contain the functions and arguments that were originally used to specify the task</li>
<li>The <code>created</code>, <code>queued</code>, <code>assigned</code>, <code>started</code>, and <code>finished</code> columns contain POSIXct timestamps indicating when the task was created, added to a queue, assigned to a worker, started running on a worker, and returned from the worker</li>
<li><code>code</code> is a numeric code returned by the callr R session: of particular note 200 means it returned successfully, 500 means the session exited cleanly, and 501 means the session crashed</li>
<li><code>message</code> is a message returned by callr</li>
<li><code>stdout</code> and <code>stderr</code> are the contents of the output and error streams from the worker session while the task was running</li>
<li><code>error</code> currently is <code>NULL</code> because I haven’t implemented that bit yet lol.</li>
</ul>
</section>
<section id="surviving-a-crash" class="level2">
<h2 class="anchored" data-anchor-id="surviving-a-crash">Surviving a crash</h2>
<p>I’m going to be honest. Sometimes<sup>6</sup> I write bad code when I am exploring a new generative art system. Code that crashes the R session unpredictably. So it would be nice if the queue had a little bit of robustness for that. To be honest, the queue package isn’t very sophisticated in detecting sessions that have crashed,<sup>7</sup> but it does have some ability to recover when a task crashes its thread. Let’s keep this simple. I’ll define a perfectly safe function that waits for a moment and then returns, and another function that always crashes the R session as soon as it is called:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">wait <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(x)</span>
<span id="cb23-3">  x</span>
<span id="cb23-4">}</span>
<span id="cb23-5">crash <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.Call</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abort"</span>)</span></code></pre></div>
</div>
<p>Now let’s define a queue that has only two workers, but has no less than three tasks that are guaranteed to crash the worker the moment the tasks are started:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">queue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-2">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-3">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(crash)</span>
<span id="cb24-4">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(crash)</span>
<span id="cb24-5">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(crash)</span>
<span id="cb24-6">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The queue allocates task in a first-in first-out order, so the three “crash tasks” are guaranteed to be allocated before the final “wait task”. Let’s take a look at what happens when the queue runs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ Queue complete: 5 tasks done in 4.3 secs</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 17
  task_id worker_id state result    runtime        fun    args            
  &lt;chr&gt;       &lt;int&gt; &lt;chr&gt; &lt;list&gt;    &lt;drtn&gt;         &lt;list&gt; &lt;list&gt;          
1 task_1     401728 done  &lt;dbl [1]&gt; 0.1239407 secs &lt;fn&gt;   &lt;named list [1]&gt;
2 task_2     401740 done  &lt;NULL&gt;    2.1264157 secs &lt;fn&gt;   &lt;list [0]&gt;      
3 task_3     401728 done  &lt;NULL&gt;    3.0233221 secs &lt;fn&gt;   &lt;list [0]&gt;      
4 task_4     401773 done  &lt;NULL&gt;    1.9341383 secs &lt;fn&gt;   &lt;list [0]&gt;      
5 task_5     401792 done  &lt;dbl [1]&gt; 0.1577439 secs &lt;fn&gt;   &lt;named list [1]&gt;
# ℹ 10 more variables: created &lt;dttm&gt;, queued &lt;dttm&gt;, assigned &lt;dttm&gt;,
#   started &lt;dttm&gt;, finished &lt;dttm&gt;, code &lt;dbl&gt;, message &lt;chr&gt;,
#   stdout &lt;list&gt;, stderr &lt;list&gt;, error &lt;list&gt;</code></pre>
</div>
</div>
<p>It’s a little slower than we’d hope, but it does finish both valid tasks and returns nothing for the tasks that crashed their R sessions. What has happened in the background is that the queue runs a simple check to see if any of the R sessions have crashed, and attempts to replace them with a new worker whenever it detects that this has happened. It’s not in any sense optimised, but it does sort of work.</p>
</section>
<section id="design" class="level2">
<h2 class="anchored" data-anchor-id="design">Design</h2>
<p>Although my confidence in my ability to have a career in tech is at an all-time low, I have to admit that the work I’ve done over the last year has made me a better programmer. I didn’t much effort into writing queue, but the code feels cleaner and more modular than the code I was writing a year ago. Good practices have become habits, I suppose. That’s a nice feeling. I automatically write proper unit tests as I go, knowing that those tests will save me when I need to make changes later. I document properly as I go, knowing that I won’t remember a bloody thing about how my own code works six hours later – never mind six months. And, maybe most importantly of all, my code now seems to have this habit of organising itself into small, manageable abstractions. I have no idea when that happened, because I wasn’t actually part of a software engineering team. I was just the girl who wrote some docs and few little blog posts.<sup>8</sup></p>
<p>Here’s what I mean. If you take a look at the <a href="https://github.com/djnavarro/queue/blob/4c70aad373fd518250c6bd6c29cebccb6d16dc65/R/queue.R">source code for the <code>Queue</code></a> object, it’s actually not very long: the file is mostly devoted to the documentation, and the object doesn’t have very many methods. Honestly, we’ve already seen most of them:</p>
<ul>
<li><code>new()</code> creates a new queue</li>
<li><code>add()</code> adds a task to a queue</li>
<li><code>run()</code> sets the queue running</li>
</ul>
<p>If everything works smoothly you don’t need anything else, so why burden the user with extra details? Sure, there’s a little complexity to these methods which is of course documented on the <a href="https://queue.djnavarro.net/reference/Queue.html">relevant pkgdown page</a> because I’m not a jerk, but this isn’t a complicated package…</p>
<p>…when it’s working.</p>
<p>Of course, when things start to break, you start to care a lot more about the internals. Fair enough. There are two important data structures within the <code>Queue</code>:</p>
<ul>
<li>Internally, a <code>Queue</code> manages a <a href="https://queue.djnavarro.net/reference/WorkerPool.html"><code>WorkerPool</code></a> comprised of one or more <a href="https://queue.djnavarro.net/reference/Worker.html"><code>Worker</code></a> objects. As you’d expect given the names, these provide abstractions for managing the R sessions. A <code>Worker</code> object provides a wrapper around a callr R session, and tools that automate the interaction between that session and a task.</li>
<li>The <code>Queue</code> also holds a <a href="https://queue.djnavarro.net/reference/TaskList.html"><code>TaskList</code></a> comprised of one or more <a href="https://queue.djnavarro.net/reference/Task.html"><code>Task</code></a> objects. Again, as you might expect from the names, these are the storage classes. A <code>Task</code> object is a container that holds a function, its arguments, any results it might have returned, and any logged information about the process of its execution.</li>
</ul>
<p>In some situations it can be awfully handy to have access to these constituent data structures, particularly because those objects expose additional tools that I deliberately chose not to make available at the <code>Queue</code> level. From the <code>Queue</code> itself what you can do is return the objects:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">workers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_workers</span>()</span>
<span id="cb28-2">tasks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_tasks</span>()</span></code></pre></div>
</div>
<p>These objects are R6 classes: they have reference semantics so anything I do with <code>workers</code> and <code>tasks</code> will have corresponding effects on <code>queue</code>. For this blog post I don’t intend to dive into details of what I did when designing the <code>WorkerPool</code> and <code>TaskList</code> classes – especially because queue is only at version 0.0.2 and I don’t yet know what I’m going to do with this cute little package – but I’ll give one example.</p>
<p>Let’s take the workers. By default, a <code>Queue</code> cleans up after itself and closes any R sessions that it started. The <code>WorkerPool</code> object associated with a <code>Queue</code> has a <code>get_pool_state()</code> method that I can use to check the state of the workers, and some other methods to modify the workers if I so choose. Let’s have a go. I ask <code>workers</code> to report on the status of the R sessions, this is what I get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">workers<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pool_state</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    401792     401804 
"finished" "finished" </code></pre>
</div>
</div>
<p>Yes, as expected the workers have stopped. But I can replace them with live R sessions by calling the <code>refill_pool()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">workers<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">refill_pool</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>401820 401832 
"idle" "idle" </code></pre>
</div>
</div>
<p>And I can shut them down again by calling <code>shutdown_pool()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">workers<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shutdown_pool</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    401820     401832 
"finished" "finished" </code></pre>
</div>
</div>
<p>Along similar lines the <code>TaskList</code> object has some methods that let me manipulate the data storage associated with my <code>Queue</code>. Normally I don’t need to. Sometimes I do. It’s handy to have those tools lying around. At the moment the toolkit feels a little light, but the nice thing about writing your own package is that I can always add more if I need them :-)</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<div class="cell" data-hash="index_cache/html/austen-joke_faf2b96ff686ee96563e01788b849faf">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">queue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb35-2">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multithreading"</span>))</span>
<span id="cb35-3">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"it is"</span>))</span>
<span id="cb35-4">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acknowledged"</span>))</span>
<span id="cb35-5">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post"</span>))</span>
<span id="cb35-6">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"universally"</span>))</span>
<span id="cb35-7">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a truth"</span>))</span>
<span id="cb35-8">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"must be"</span>))</span>
<span id="cb35-9">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"about"</span>))</span>
<span id="cb35-10">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trick"</span>))</span>
<span id="cb35-11">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that a"</span>))</span>
<span id="cb35-12">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in want of"</span>))</span>
<span id="cb35-13">queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(wait, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"an async"</span>))</span>
<span id="cb35-14">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"verbose"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: IT IS finished in 0.172 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: A TRUTH finished in 0.169 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: UNIVERSALLY finished in 0.536 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: ACKNOWLEDGED finished in 0.776 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: THAT A finished in 0.173 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: POST finished in 1.07 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: ABOUT finished in 0.957 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: MULTITHREADING finished in 1.37 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: MUST BE finished in 1.25 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: IN WANT OF finished in 0.582 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: AN ASYNC finished in 1.06 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: TRICK finished in 1.66 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ Queue complete: 12 tasks done in 2.21 secs</code></pre>
</div>
</div>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Honestly, the whole reason this exists is that I was reading the callr blog post on writing <a href="https://www.tidyverse.org/blog/2019/09/callr-task-q/">multi-worker task queues</a> and decided to try doing it myself…↩︎</p></li>
<li id="fn2"><p>Note to self: Learn <a href="https://www.jottr.org/2022/12/05/avoid-detectcores/">parallelly</a>↩︎</p></li>
<li id="fn3"><p><code>kubectl auth can-i create chaos</code>↩︎</p></li>
<li id="fn4"><p>Longtime readers will have noticed that I have become a bit of a fangirl. I swear I’m not stalking him, but like, every time I think… gosh this is a really handy bit of infrastructure tooling, who do I have to thank for this… oh, of course it’s bloody Gábor again. Anyway.↩︎</p></li>
<li id="fn5"><p>I am a country girl, so FIFO means “fly-in fly-out”, and I shan’t be listening to any of you computer nerds who claim it has another meaning↩︎</p></li>
<li id="fn6"><p>Often↩︎</p></li>
<li id="fn7"><p>I mean, it was just a fun side project I did over the weekend because I have found myself quite unexpectedly unemployed, and my self-confidence is utterly shattered at the moment, and Stella needs to get her groove back slowly okay?↩︎</p></li>
<li id="fn8"><p>For the record, dear potential future employer, this is what is known as “self-deprecation”. Mistake not my awareness of the absurd cultural norms to which women are expected to conform with a literal claim about competence. In point of fact I am rather good at what I do.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Navarro, Danielle},
  title = {Queue},
  date = {2022-12-22},
  url = {https://blog.djnavarro.net/posts/2022-12-22_queue},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2022. <span>“Queue.”</span> December 22, 2022. <a href="https://blog.djnavarro.net/posts/2022-12-22_queue">https://blog.djnavarro.net/posts/2022-12-22_queue</a>.
</div></div></section></div> ]]></description>
  <category>Parallel Computing</category>
  <category>R</category>
  <category>Object-Oriented Programming</category>
  <guid>https://blog.djnavarro.net/posts/2022-12-22_queue/index.html</guid>
  <pubDate>Wed, 21 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_100.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Crayola crayon colours</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>What am I doing? Why am I here? Oh that’s right. So I was having coffee this morning reading the nerd news on mastodon as a girl likes to do and this <a href="https://mas.to/@kims/109525496705672156">this very cool post about crayon colours</a> by Kim Scheinberg caught my attention.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/crayola_toot.jpg" class="img-fluid figure-img" style="width:75.0%"></p>
</figure>
</div>
<p>The image comes from <a href="http://www.datapointed.net/2010/01/crayola-crayon-color-chart/">this blog post</a> by Stephen Von Worley – he has a <a href="http://www.datapointed.net/2010/10/crayola-color-chart-rainbow-style/">follow up</a> too. Interesting. I realise I am of course about to waste half a day on this…</p>
<section id="its-the-prologue-baby" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="its-the-prologue-baby">It’s the prologue, baby</h2>
<p>Having read the blog posts by Von Worley I worked out that the source of the data is the Wikipedia <a href="https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors">list of Crayola crayon colours</a>, and as it happens I know how to pull data from Wikipedia tables into R. Thanks to <a href="https://ivelasq.rbind.io/blog/politely-scraping/">this amazing post</a> by Isabella Velásquez, I’d learned all about using the <a href="https://dmi3kno.github.io/polite/">polite</a> package to make sure that my webscraping is appropriate and respectful, and using the <a href="https://rvest.tidyverse.org/">rvest</a> package to do the actual scraping. What I had assumed, is that reading the table into R was going to be a simple matter of writing some code like this…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors"</span></span>
<span id="cb1-2">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-3">  polite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bow</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-4">  polite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scrape</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-5">  rvest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_nodes</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table.wikitable"</span>)</span></code></pre></div>
</div>
<p>This scrapes all the tables from the page, but I only want the first one. That’s the big table with the listing of Crayolas standard colours. The table itself looks a little like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">raw[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_node}
&lt;table class="wikitable sortable"&gt;
[1] &lt;caption&gt;\n&lt;/caption&gt;
[2] &lt;tbody&gt;\n&lt;tr&gt;\n&lt;th width="10%" class="sortable"&gt;Color\n&lt;/th&gt;\n&lt;th wid ...</code></pre>
</div>
</div>
<p>I don’t want to parse the html myself, but the hope is that I can use something like the <code>html_table()</code> function to extract the table and return a data frame. Okay, let’s give it a go…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> rvest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_table</span>()</span></code></pre></div>
</div>
<p>Well it hasn’t thrown an error, but when I look at the <code>crayola</code> data frame…</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 9
   Color Name                    Hexadecimal in their website depicti…¹ Years in production[…² Notes `16-Box` `24-Box` `32-Box` `64-Box`
   &lt;lgl&gt; &lt;chr&gt;                   &lt;chr&gt;                                  &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;   
 1 NA    Red                     "#ED0A3F"                              1903–present           ""    "Yes"    "Yes"    "Yes"    "Yes"   
 2 NA    Maroon                  "#C32148"                              1949–present           "Kno… "No"     "No"     "No"     "No"    
 3 NA    Scarlet                 "#FD0E35"                              1998–present           "Kno… "No"     "Yes"    "Yes"    "Yes"   
 4 NA    Brick Red               "#C62D42"                              1958–present           ""    "No"     "No"     "No"     "Yes"   
 5 NA    English Vermilion       ""                                     1903–1935              "Als… ""       ""       ""       ""      
 6 NA    Madder Lake             ""                                     1903–1935              ""    ""       ""       ""       ""      
 7 NA    Permanent Geranium Lake ""                                     1903–circa 1910        ""    ""       ""       ""       ""      
 8 NA    Maximum Red             ""                                     1926–1944              "Par… ""       ""       ""       ""      
 9 NA    Chestnut                "#B94E48"                              1903–present           "Kno… "No"     "No"     "Yes"    "Yes"   
10 NA    Orange-Red              "#FF5349"                              1958–1990              ""    ""       ""       ""       ""      
# ℹ 158 more rows
# ℹ abbreviated names: ¹​`Hexadecimal in their website depiction[b]`, ²​`Years in production[2]`</code></pre>
</div>
</div>
<p>… I encounter a rather awkward problem. The <code>color</code> field, which renders on the Wikipedia page as a pretty block of colour showing what the crayon colour looks like, is empty. Sure, I do have text containing hex codes for some of the crayons, but the missing data isn’t missing at random. Old crayon colours are the ones systematically missing an official hex code. Okay, so I really would like to have some data in my <code>color</code> column.</p>
</section>
<section id="act-i-i-think-it-works-like-the-hanky-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-i-i-think-it-works-like-the-hanky-code">Act I: I think it works like the hanky code</h2>
<p>Look, that’s not a big deal right? Not having any colours for a post about colours? I guess the post will be short. Eh. Let’s set that aside and focus on the important things. Those column names need a little cleaning, so I’ll do the thing I always do and break out <a href="https://sfirke.github.io/janitor/">janitor</a> and <a href="https://dplyr.tidyverse.org/">dplyr</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">  janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">listed =</span> hexadecimal_in_their_website_depiction_b,</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">years =</span> years_in_production_2</span>
<span id="cb7-6">  )</span></code></pre></div>
</div>
<p>Much nicer:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 9
   color name                    listed    years           notes                                     x16_box x24_box x32_box x64_box
   &lt;lgl&gt; &lt;chr&gt;                   &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;                                     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 NA    Red                     "#ED0A3F" 1903–present    ""                                        "Yes"   "Yes"   "Yes"   "Yes"  
 2 NA    Maroon                  "#C32148" 1949–present    "Known as \"Dark Red\", 1949–1958.[2]"    "No"    "No"    "No"    "No"   
 3 NA    Scarlet                 "#FD0E35" 1998–present    "Known as \"Torch Red\", 1998.[2]"        "No"    "Yes"   "Yes"   "Yes"  
 4 NA    Brick Red               "#C62D42" 1958–present    ""                                        "No"    "No"    "No"    "Yes"  
 5 NA    English Vermilion       ""        1903–1935       "Also spelled \"Vermillion\".[2]"         ""      ""      ""      ""     
 6 NA    Madder Lake             ""        1903–1935       ""                                        ""      ""      ""      ""     
 7 NA    Permanent Geranium Lake ""        1903–circa 1910 ""                                        ""      ""      ""      ""     
 8 NA    Maximum Red             ""        1926–1944       "Part of the Munsell line.[2]"            ""      ""      ""      ""     
 9 NA    Chestnut                "#B94E48" 1903–present    "Known as \"Indian Red\" before 1999.[2]" "No"    "No"    "Yes"   "Yes"  
10 NA    Orange-Red              "#FF5349" 1958–1990       ""                                        ""      ""      ""      ""     
# ℹ 158 more rows</code></pre>
</div>
</div>
<p>Now where was I? What’s that maxim about never using background colour to encode substantive data in a table? I seem to have run afoul of that. Let’s take a look at the elements of the html table and see if I can work out where things went wrong…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> rvest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_elements</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"td"</span>)</span>
<span id="cb10-2">cells</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (1512)}
 [1] &lt;td style="background: #ED0A3F; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [2] &lt;td&gt;Red\n&lt;/td&gt;
 [3] &lt;td align="center" style="background:#E9E9E9"&gt;#ED0A3F\n&lt;/td&gt;
 [4] &lt;td&gt;1903–present\n&lt;/td&gt;
 [5] &lt;td&gt;\n&lt;/td&gt;
 [6] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
 [7] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
 [8] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
 [9] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
[10] &lt;td style="background: #C32148; color: white"&gt;&nbsp;\n&lt;/td&gt;
[11] &lt;td&gt;Maroon\n&lt;/td&gt;
[12] &lt;td align="center" style="background:#E9E9E9"&gt;#C32148\n&lt;/td&gt;
[13] &lt;td&gt;1949–present\n&lt;/td&gt;
[14] &lt;td&gt;Known as "Dark Red", 1949–1958.&lt;sup id="cite_ref-WelterColorName ...
[15] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[16] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[17] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[18] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[19] &lt;td style="background: #FD0E35; color: white"&gt;&nbsp;\n&lt;/td&gt;
[20] &lt;td&gt;Scarlet\n&lt;/td&gt;
...</code></pre>
</div>
</div>
<p>Okay yeah. You can see the problem looking at the 1st and 10th line of the output here. The piece of information we need is embedded in the css style attribute, and it’s <em>only</em> in the style metadata attribute. There’s no data in the actual “td” element for <code>html_table()</code> to capture. I’m going to have to fix that myself I guess. Sigh.</p>
<p>The first part of my process was to find the relevant subset of cells. There’s probably a better way to do it, but my approach was based on noting that (a) it’s really easy to find the cells containing the colour names (“Red”, “Maroon”, etc), and (b) the cell to the left of it is always the one that has the background colour that I’m looking for. So, my first step was to manually pull out the text in each cell. That’s easy to do with rvest thanks to the <code>html_text()</code> function, and just to make my life a little easier I used <a href="https://stringr.tidyverse.org/">stringr</a> to remove all the <code>\n</code> characters at the end of each cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">cell_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-2">  rvest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_text</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>)</span></code></pre></div>
</div>
<p>And here’s the text in the first 20 cells:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cell_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "&nbsp;"                                   
 [2] "Red"                                 
 [3] "#ED0A3F"                             
 [4] "1903–present"                        
 [5] ""                                    
 [6] "Yes"                                 
 [7] "Yes"                                 
 [8] "Yes"                                 
 [9] "Yes"                                 
[10] "&nbsp;"                                   
[11] "Maroon"                              
[12] "#C32148"                             
[13] "1949–present"                        
[14] "Known as \"Dark Red\", 1949–1958.[2]"
[15] "No"                                  
[16] "No"                                  
[17] "No"                                  
[18] "No"                                  
[19] "&nbsp;"                                   
[20] "Scarlet"                             </code></pre>
</div>
</div>
<p>So when I now match this text against the colour names stored in <code>crayola$name</code>, I’ll detect “Red” in cell 2, “Maroon” in cell 11, and so on. If I subtract 1 from each of these values, I now have the indices of the table cells that contain the style information I need.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(cell_text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> crayola<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>Here’s what those cells look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">cells[ind]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (168)}
 [1] &lt;td style="background: #ED0A3F; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [2] &lt;td style="background: #C32148; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [3] &lt;td style="background: #FD0E35; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [4] &lt;td style="background: #C62D42; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [5] &lt;td style="background: #CC474B; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [6] &lt;td style="background: #CC3336; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [7] &lt;td style="background: #E12C2C; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [8] &lt;td style="background: #D92121; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [9] &lt;td style="background: #B94E48; color: white"&gt;&nbsp;\n&lt;/td&gt;
[10] &lt;td style="background: #FF5349; color: white"&gt;&nbsp;\n&lt;/td&gt;
[11] &lt;td style="background: #FE4C40; color: white"&gt;&nbsp;\n&lt;/td&gt;
[12] &lt;td style="background: #FE6F5E; color: white"&gt;&nbsp;\n&lt;/td&gt;
[13] &lt;td style="background: #B33B24; color: white"&gt;&nbsp;\n&lt;/td&gt;
[14] &lt;td style="background: #CC553D; color: white"&gt;&nbsp;\n&lt;/td&gt;
[15] &lt;td style="background: #E6735C; color: white"&gt;&nbsp;\n&lt;/td&gt;
[16] &lt;td style="background: #FF9980; color: white"&gt;&nbsp;\n&lt;/td&gt;
[17] &lt;td style="background: #E58E73; color: white"&gt;&nbsp;\n&lt;/td&gt;
[18] &lt;td style="background: #FF7034; color: white"&gt;&nbsp;\n&lt;/td&gt;
[19] &lt;td style="background: #FF681F; color: white"&gt;&nbsp;\n&lt;/td&gt;
[20] &lt;td style="background: #FF8833; color: white"&gt;&nbsp;\n&lt;/td&gt;
...</code></pre>
</div>
</div>
<p>That’s much nicer. Now I have something with a consistent format that I can process without too much pain. The rvest package has a <code>html_attr()</code> function which I can use to pull out the contents of the style attribute as a string. So, after spending a few minutes trying to remember how regular expressions work, I used <code>str_extract()</code> to pull out the hexadecimal codes like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">background <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cells[ind] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  rvest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"style"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-3">  stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#[0-9ABCDEF]{6}"</span>)</span></code></pre></div>
</div>
<p>Let’s take a look:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">background</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "#ED0A3F" "#C32148" "#FD0E35" "#C62D42" "#CC474B" "#CC3336" "#E12C2C" "#D92121" "#B94E48" "#FF5349" "#FE4C40" "#FE6F5E" "#B33B24"
 [14] "#CC553D" "#E6735C" "#FF9980" "#E58E73" "#FF7034" "#FF681F" "#FF8833" "#FFB97B" "#ECAC76" "#E77200" "#FFAE42" "#F2BA49" "#FBE7B2"
 [27] "#F2C649" "#F8D568" "#FCD667" "#FED85D" "#FBE870" "#F1E788" "#FFEB00" "#B5B35C" "#ECEBBD" "#FAFA37" "#FFFF99" "#FFFF9F" "#D9E650"
 [40] "#ACBF60" "#AFE313" "#BEE64B" "#C5E17A" "#5E8C31" "#7BA05B" "#9DE093" "#63B76C" "#4D8C57" "#01A638" "#6CA67C" "#5FA777" "#93DFB8"
 [53] "#33CC99" "#1AB385" "#29AB87" "#00CC99" "#00755E" "#8DD9CC" "#01796F" "#30BFBF" "#00CCCC" "#008080" "#8FD8D8" "#95E0E8" "#6CDAE7"
 [66] "#2D383A" "#76D7EA" "#7ED4E6" "#0095B7" "#009DC4" "#02A4D3" "#47ABCC" "#2EB4E6" "#339ACC" "#93CCEA" "#2887C8" "#003366" "#0066CC"
 [79] "#1560BD" "#0066FF" "#A9B2C3" "#C3CDE6" "#4570E6" "#3C69E7" "#7A89B8" "#4F69C6" "#8D90A1" "#8C90C8" "#7070CC" "#9999CC" "#ACACE6"
 [92] "#766EC8" "#6456B7" "#3F26BF" "#8B72BE" "#652DC1" "#6B3FA0" "#8359A3" "#8F47B3" "#C9A0DC" "#BF8FCC" "#803790" "#733380" "#D6AEDD"
[105] "#C154C1" "#FC74FD" "#732E6C" "#E667CE" "#E29CD2" "#8E3179" "#D96CBE" "#D8BFD8" "#C8509B" "#BB3385" "#D982B5" "#A63A79" "#A50B5E"
[118] "#614051" "#F653A6" "#DA3287" "#FF3399" "#FBAED2" "#FFB7D5" "#FFA6C9" "#F7468A" "#E30B5C" "#FDD7E4" "#E62E6B" "#DB5079" "#FC80A5"
[131] "#F091A9" "#FF91A4" "#A55353" "#CA3435" "#FEBAAD" "#F7A38E" "#E97451" "#AF593E" "#9E5B40" "#87421F" "#926F5B" "#DEA681" "#D27D46"
[144] "#664228" "#FA9D5A" "#EDC9AF" "#FFCBA4" "#805533" "#FDD5B1" "#EED9C4" "#665233" "#837050" "#E6BC5C" "#92926E" "#E6BE8A" "#C9C0BB"
[157] "#DA8A67" "#C88A65" "#000000" "#736A62" "#8B8680" "#C8C8CD" "#D9D6CF" "#FFFFFF" "#F1D651" "#DDEBEC" "#D9DAD2" "#C0D5F0"</code></pre>
</div>
</div>
<p>Yay, those look like hex colours. Better yet, because I’ve been careful to ensure that I’ve matched everything to the correct colours and in the correct order, I can insert them into the <code>crayola</code> tibble where they should have been in the first place:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">crayola<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> background</span>
<span id="cb21-2">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 9
   color   name                    listed    years           notes                                     x16_box x24_box x32_box x64_box
   &lt;chr&gt;   &lt;chr&gt;                   &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;                                     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 #ED0A3F Red                     "#ED0A3F" 1903–present    ""                                        "Yes"   "Yes"   "Yes"   "Yes"  
 2 #C32148 Maroon                  "#C32148" 1949–present    "Known as \"Dark Red\", 1949–1958.[2]"    "No"    "No"    "No"    "No"   
 3 #FD0E35 Scarlet                 "#FD0E35" 1998–present    "Known as \"Torch Red\", 1998.[2]"        "No"    "Yes"   "Yes"   "Yes"  
 4 #C62D42 Brick Red               "#C62D42" 1958–present    ""                                        "No"    "No"    "No"    "Yes"  
 5 #CC474B English Vermilion       ""        1903–1935       "Also spelled \"Vermillion\".[2]"         ""      ""      ""      ""     
 6 #CC3336 Madder Lake             ""        1903–1935       ""                                        ""      ""      ""      ""     
 7 #E12C2C Permanent Geranium Lake ""        1903–circa 1910 ""                                        ""      ""      ""      ""     
 8 #D92121 Maximum Red             ""        1926–1944       "Part of the Munsell line.[2]"            ""      ""      ""      ""     
 9 #B94E48 Chestnut                "#B94E48" 1903–present    "Known as \"Indian Red\" before 1999.[2]" "No"    "No"    "Yes"   "Yes"  
10 #FF5349 Orange-Red              "#FF5349" 1958–1990       ""                                        ""      ""      ""      ""     
# ℹ 158 more rows</code></pre>
</div>
</div>
<p>Finally!</p>
</section>
<section id="act-ii-one-hundred-years-of-tidyr" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-ii-one-hundred-years-of-tidyr">Act II: One hundred years of tidyr</h2>
<p>If life were at all fair my data wrangling woes would now be over, but of course they are not. If I’m going to analyse the Crayola data by year it will be useful to me if the <code>year</code> column has nicely formatted data, and of course it does not:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">crayola<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>years</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1903–present"               "1949–present"               "1998–present"               "1958–present"              
  [5] "1903–1935"                  "1903–1935"                  "1903–circa 1910"            "1926–1944"                 
  [9] "1903–present"               "1958–1990"                  "1997–present"               "1958–present"              
 [13] "1903–circa 1910"            "1903–1944"                  "1903–circa 1910"            "1990–present"              
 [17] "1926–1944"                  "1958–present"               "1930–present"               "1903–present"              
 [21] "1993–present"               "1926–1944, 1949–1958"       "2003–present"               "1930–present"              
 [25] "1926–1944"                  "1998–present"               "1903–1990"                  "1958–1990"                 
 [29] "1903–present"               "1990–2017[2][3][4]"         "1903–present"               "1958–present"              
 [33] "1926–1944"                  "1903–present"               "1958–present"               "1926–1944"                 
 [37] "1998–present"               "1903–1990"                  "1926–1944"                  "1926–1944"                 
 [41] "2003–present"               "1903–1935"                  "1930–present"               "1926–1944"                 
 [45] "1993–present"               "1993–present"               "1998–present"               "1926–1944"                 
 [49] "1903–present"               "1903–1939"                  "1949–present"               "1949–present"              
 [53] "1993–present"               "1998–present"               "1990–present"               "1997–present"              
 [57] "1993–present"               "1926–1944"                  "1903–1949, 1958–present"    "1926–1944"                 
 [61] "1993–present"               "1990–2003"                  "1958"                       "1949–present"              
 [65] "1935–present"               "1998–present"               "1958–present"               "1926–1944"                 
 [69] "1949–present"               "1993–present"               "1990–present"               "1926–1958"                 
 [73] "1903–1958"                  "1949–1958"                  "1958–present"               "1958–1990"                 
 [77] "1903–present"               "1958–present"               "1993–present"               "1949–present"              
 [81] "1958–present"               "1958–present"               "1935–1958"                  "2017–present[5]"           
 [85] "2003–present"               "1999–present"               "1998–present"               "1903–1958"                 
 [89] "1903–circa 1910"            "1998–present"               "1926–1944"                  "1903–circa 1910, 1930–1990"
 [93] "1949–present"               "1903–1944"                  "1926–1944"                  "1998–present"              
 [97] "1990–present"               "1930–1949, 1958–present"    "1949–1958"                  "1993–present"              
[101] "1949–1958"                  "1997–present"               "1926–1944"                  "1993–present"              
[105] "1990–present"               "1997–present"               "1903–1930"                  "1949–1958"                 
[109] "1949–present"               "1958–present"               "1949–1958"                  "1949–1999"                 
[113] "1958–2003"                  "1930–present"               "1926–1944"                  "1926–1944"                 
[117] "2003–present"               "1998–present"               "1903–present"               "1993–present"              
[121] "1990–present"               "1958–present"               "1998–present"               "1903–present"              
[125] "1958–present"               "1993–present"               "1998–present"               "1935–1958"                 
[129] "1998–present"               "1993–present"               "1993–present"               "1949–present"              
[133] "1926–1944"                  "1949–present"               "1958–present"               "1998–present"              
[137] "1903–present"               "1903–present"               "1935–1944, 1958–present"    "1998–present"              
[141] "1998–present"               "1993–present"               "1958–present"               "1903–1910"                 
[145] "1958–present"               "1998–present"               "1903–present"               "1903–1944"                 
[149] "1958–present"               "1998–present"               "1903–1990"                  "1998–present"              
[153] "1903–circa 1910"            "1903–1944"                  "1953–present"               "1903–present"              
[157] "1903–1915, 1958–present"    "1998–present"               "1903–present"               "1903–1910"                 
[161] "1926–present"               "1958–1990"                  "1993–present"               "1903–present"              
[165] "2021, 2022"                 "2021, 2022"                 "2021, 2022"                 "2021, 2022"                </code></pre>
</div>
</div>
<p>There are several problems I’m going to need to solve to get this into a regular form:</p>
<ul>
<li>The “circa” text will have to be removed</li>
<li>White spaces will need to be removed</li>
<li>Footnote text will need to be removed</li>
<li>The word “present” will have to be replaced by “2022”</li>
<li>The single year “1958” will need to be replaced by an interval “1958-1958”</li>
<li>The comma separated list “2021,2022” will need to be an interval “2021-2022”</li>
</ul>
<p>Here’s a little bit of stringr code that does that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb25-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">years =</span> years <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-4">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-5">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-6">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circa"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-7">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"present"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-8">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^1958$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1958-1958"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-9">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021,2022"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-2022"</span>),</span>
<span id="cb25-10">  ) </span></code></pre></div>
</div>
<p>The <code>years</code> column now has a regular form. Each entry is either a contiguous interval like <code>"1903-2022"</code>, or a comma separated list of two such intervals like <code>"1903–1910,1930–1990"</code>:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">crayola<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>years</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1903–2022"           "1949–2022"           "1998–2022"           "1958–2022"           "1903–1935"          
  [6] "1903–1935"           "1903–1910"           "1926–1944"           "1903–2022"           "1958–1990"          
 [11] "1997–2022"           "1958–2022"           "1903–1910"           "1903–1944"           "1903–1910"          
 [16] "1990–2022"           "1926–1944"           "1958–2022"           "1930–2022"           "1903–2022"          
 [21] "1993–2022"           "1926–1944,1949–1958" "2003–2022"           "1930–2022"           "1926–1944"          
 [26] "1998–2022"           "1903–1990"           "1958–1990"           "1903–2022"           "1990–2017"          
 [31] "1903–2022"           "1958–2022"           "1926–1944"           "1903–2022"           "1958–2022"          
 [36] "1926–1944"           "1998–2022"           "1903–1990"           "1926–1944"           "1926–1944"          
 [41] "2003–2022"           "1903–1935"           "1930–2022"           "1926–1944"           "1993–2022"          
 [46] "1993–2022"           "1998–2022"           "1926–1944"           "1903–2022"           "1903–1939"          
 [51] "1949–2022"           "1949–2022"           "1993–2022"           "1998–2022"           "1990–2022"          
 [56] "1997–2022"           "1993–2022"           "1926–1944"           "1903–1949,1958–2022" "1926–1944"          
 [61] "1993–2022"           "1990–2003"           "1958-1958"           "1949–2022"           "1935–2022"          
 [66] "1998–2022"           "1958–2022"           "1926–1944"           "1949–2022"           "1993–2022"          
 [71] "1990–2022"           "1926–1958"           "1903–1958"           "1949–1958"           "1958–2022"          
 [76] "1958–1990"           "1903–2022"           "1958–2022"           "1993–2022"           "1949–2022"          
 [81] "1958–2022"           "1958–2022"           "1935–1958"           "2017–2022"           "2003–2022"          
 [86] "1999–2022"           "1998–2022"           "1903–1958"           "1903–1910"           "1998–2022"          
 [91] "1926–1944"           "1903–1910,1930–1990" "1949–2022"           "1903–1944"           "1926–1944"          
 [96] "1998–2022"           "1990–2022"           "1930–1949,1958–2022" "1949–1958"           "1993–2022"          
[101] "1949–1958"           "1997–2022"           "1926–1944"           "1993–2022"           "1990–2022"          
[106] "1997–2022"           "1903–1930"           "1949–1958"           "1949–2022"           "1958–2022"          
[111] "1949–1958"           "1949–1999"           "1958–2003"           "1930–2022"           "1926–1944"          
[116] "1926–1944"           "2003–2022"           "1998–2022"           "1903–2022"           "1993–2022"          
[121] "1990–2022"           "1958–2022"           "1998–2022"           "1903–2022"           "1958–2022"          
[126] "1993–2022"           "1998–2022"           "1935–1958"           "1998–2022"           "1993–2022"          
[131] "1993–2022"           "1949–2022"           "1926–1944"           "1949–2022"           "1958–2022"          
[136] "1998–2022"           "1903–2022"           "1903–2022"           "1935–1944,1958–2022" "1998–2022"          
[141] "1998–2022"           "1993–2022"           "1958–2022"           "1903–1910"           "1958–2022"          
[146] "1998–2022"           "1903–2022"           "1903–1944"           "1958–2022"           "1998–2022"          
[151] "1903–1990"           "1998–2022"           "1903–1910"           "1903–1944"           "1953–2022"          
[156] "1903–2022"           "1903–1915,1958–2022" "1998–2022"           "1903–2022"           "1903–1910"          
[161] "1926–2022"           "1958–1990"           "1993–2022"           "1903–2022"           "2021-2022"          
[166] "2021-2022"           "2021-2022"           "2021-2022"          </code></pre>
</div>
</div>
<p>That’s better because the data format is now consistent, but it’s not tidy. In the long run, what I really want is a nice tidy tibble: each row should correspond to a single observation. If “Red” was a colour in 1935, then there should be a row in my table for which <code>name = "Red"</code> and <code>year = 1935</code>. That’s not quite what I have here, so I have more data wrangling to do and this time <a href="https://tidyr.tidyverse.org/">tidyr</a> will be my best friend.</p>
<p>The first thing I’m going to do is use <code>tidyr::separate()</code> to split the <code>years</code> variable into two variables, <code>years_1</code> and <code>years_2</code>. The <code>years_1</code> variable will contain the first time interval for which a particular crayon colour was in production, and the <code>years_2</code> variable will contain the second interval in which it was in production. For almost all colours, <code>years_2</code> will be <code>NA</code>. It’s only those special cases like <code>"1903–1910,1930–1990"</code> that will have values in both.</p>
<p>Then, because I don’t really see a need to have two variables that both represent a period of time, I’ll use <code>tidyr::pivot_longer()</code> to give myself a data set in which there is one row for every continuous time interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(</span>
<span id="cb28-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> years,</span>
<span id="cb28-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years_2"</span>),</span>
<span id="cb28-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>,</span>
<span id="cb28-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span></span>
<span id="cb28-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-8">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb28-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years_"</span>),</span>
<span id="cb28-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years_"</span>,</span>
<span id="cb28-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval"</span>,</span>
<span id="cb28-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years"</span></span>
<span id="cb28-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(years))</span></code></pre></div>
</div>
<p>To give you a sense of what the data looks like in this form, I’ll pull out the rows corresponding to two different crayon colours, “Maroon” and “Violet-Blue”:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maroon"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Violet-Blue"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  color   name        listed  notes                                     x16_box x24_box x32_box x64_box interval years    
  &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;                                     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    
1 #C32148 Maroon      #C32148 "Known as \"Dark Red\", 1949–1958.[2]"    "No"    "No"    "No"    "No"    1        1949–2022
2 #766EC8 Violet-Blue #766EC8 "Known as \"Blue-Violet\", 1930–1958.[2]" ""      ""      ""      ""      1        1903–1910
3 #766EC8 Violet-Blue #766EC8 "Known as \"Blue-Violet\", 1930–1958.[2]" ""      ""      ""      ""      2        1930–1990</code></pre>
</div>
</div>
<p>The “Maroon” crayon has been in production continuously since 1949, so there is only one row in the table for that one. The “Violet-Blue” crayon was in production from 1903 to 1910, and again from 1930 to 1990. These two production periods are each represented as a row.</p>
<p>Excellent. Next, I’ll use <code>separate()</code> again to split the <code>years</code> interval into two columns, one for the <code>year_started</code> and another for the <code>year_ended</code>. Having done so, the year information is finally in a numeric format, so I can coerce it from character to integer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(</span>
<span id="cb31-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> years,</span>
<span id="cb31-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year_started"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year_ended"</span>)</span>
<span id="cb31-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-6">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb31-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interval =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(interval),</span>
<span id="cb31-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_started =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(year_started),</span>
<span id="cb31-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_ended =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(year_ended)</span>
<span id="cb31-10">  )</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 174 × 11
   color   name                    listed    notes                      x16_box x24_box x32_box x64_box interval year_started year_ended
   &lt;chr&gt;   &lt;chr&gt;                   &lt;chr&gt;     &lt;chr&gt;                      &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt;        &lt;int&gt;      &lt;int&gt;
 1 #ED0A3F Red                     "#ED0A3F" ""                         "Yes"   "Yes"   "Yes"   "Yes"          1         1903       2022
 2 #C32148 Maroon                  "#C32148" "Known as \"Dark Red\", 1… "No"    "No"    "No"    "No"           1         1949       2022
 3 #FD0E35 Scarlet                 "#FD0E35" "Known as \"Torch Red\", … "No"    "Yes"   "Yes"   "Yes"          1         1998       2022
 4 #C62D42 Brick Red               "#C62D42" ""                         "No"    "No"    "No"    "Yes"          1         1958       2022
 5 #CC474B English Vermilion       ""        "Also spelled \"Vermillio… ""      ""      ""      ""             1         1903       1935
 6 #CC3336 Madder Lake             ""        ""                         ""      ""      ""      ""             1         1903       1935
 7 #E12C2C Permanent Geranium Lake ""        ""                         ""      ""      ""      ""             1         1903       1910
 8 #D92121 Maximum Red             ""        "Part of the Munsell line… ""      ""      ""      ""             1         1926       1944
 9 #B94E48 Chestnut                "#B94E48" "Known as \"Indian Red\" … "No"    "No"    "Yes"   "Yes"          1         1903       2022
10 #FF5349 Orange-Red              "#FF5349" ""                         ""      ""      ""      ""             1         1958       1990
# ℹ 164 more rows</code></pre>
</div>
</div>
<p>We’re getting close. At this point the last bit of work I have to do to fix the year data is unpack it. Instead of representing the data for Maroon crayons with one row with a <code>year_started</code> value of 1949 and <code>year_ended</code> value of 2022, I want to have a single column called <code>year</code>, and the data should contain one row for every year in which Maroon was in production. Somewhere in the back of my head there is the thought that there must be an easy way to do this with tidyr, but my ingenuity failed me this time and I fell back on my usual solution… <a href="https://purrr.tidyverse.org/">purrr</a>.</p>
<p>It’s a two-step process. Step one: write a little function that expects to receive the values stored in one row of the existing data frame, and returns a new data frame in the format I want. In this case, I want a tibble that has one row for each <code>year</code> in range starting <code>year_started</code> and ending <code>year_ended</code>, but otherwise has the same structure as the existing data. The <code>unpack_row()</code> function below does that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">unpack_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(color, name, year_started, year_ended, ...) {</span>
<span id="cb34-2">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb34-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> name,</span>
<span id="cb34-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> color,</span>
<span id="cb34-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> year_started<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year_ended,</span>
<span id="cb34-6">    ...</span>
<span id="cb34-7">  )</span>
<span id="cb34-8">}</span></code></pre></div>
</div>
<p>So now I’ll do the unpacking with <code>purrr::pmap_dfr()</code>, sort the rows into a nice order using <code>dplyr::arrange()</code>, and add an <code>id</code> column to ensure that every row in the table has a unique identifier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-2">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(unpack_row) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(year, color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>())</span></code></pre></div>
</div>
<p>Voilà!</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7,749 × 11
   name                color    year listed    notes                                      x16_box x24_box x32_box x64_box interval    id
   &lt;chr&gt;               &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;                                      &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt;
 1 Black               #000000  1903 "#000000" ""                                         "Yes"   "Yes"   "Yes"   "Yes"          1     1
 2 Midnight Blue       #003366  1903 "#003366" "Known as \"Prussian Blue\", 1903–1958.[2… "No"    "No"    "No"    "No"           1     2
 3 Pine Green          #01796F  1903 "#01796F" "Known as \"Dark Chrome Green\" (\"Chrome… "No"    "No"    "No"    "No"           1     3
 4 Green               #01A638  1903 "#01A638" ""                                         "Yes"   "Yes"   "Yes"   "Yes"          1     4
 5 Blue (I)            #2EB4E6  1903 ""        "Known as \"Celestial Blue\", 1935–1949, … ""      ""      ""      ""             1     5
 6 Ultramarine Blue    #3F26BF  1903 ""        ""                                         ""      ""      ""      ""             1     6
 7 Van Dyke Brown      #664228  1903 ""        "Same color as \"Brown\" (1903–1910).[2]"  ""      ""      ""      ""             1     7
 8 Raw Umber           #665233  1903 "#665233" ""                                         ""      ""      ""      ""             1     8
 9 Medium Chrome Green #6CA67C  1903 ""        "\"Chrome Green, Medium\" on labels. Prod… ""      ""      ""      ""             1     9
10 Celestial Blue      #7070CC  1903 ""        ""                                         ""      ""      ""      ""             1    10
# ℹ 7,739 more rows</code></pre>
</div>
</div>
</section>
<section id="act-iii-i-said-pet-i-said-luv-i-said-pet" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-iii-i-said-pet-i-said-luv-i-said-pet">Act III: I said pet, I said LUV, I said pet…</h2>
<p>Okay I have one last thing to do before I’m done with the data wrangling. Having hex strings associated with each crayon colour is nice and is exactly what I need for plotting, but you can’t construct a nice ordering of colours since colour space is three dimensional, more or less. I’m trying my very best to forget everything I ever learned about the psychophysics of human colour perception, but even so I’m not silly enough to try to work with raw RGB values. Instead I’ll use the <a href="http://colorspace.r-forge.r-project.org/">colorspace</a> package to convert extract hue/saturation/value coordinates, as well as my slightly-preferred method, <a href="https://en.wikipedia.org/wiki/CIELUV">CIELUV color coordinates</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">HSV <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> colorspace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coords</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span>(colorspace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hex2RGB</span>(crayola<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>color), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HSV"</span>))</span>
<span id="cb38-2">LUV <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> colorspace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coords</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span>(colorspace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hex2RGB</span>(crayola<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>color), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LUV"</span>))</span></code></pre></div>
</div>
<p>Each of these commands returns a matrix with three columns and the same number of rows as the <code>crayola</code> data frame. The first few rows of the <code>HSV</code> matrix look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">HSV[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              H         S         V
 [1,]   0.00000 0.0000000 0.0000000
 [2,] 210.00000 1.0000000 0.4000000
 [3,] 175.00000 0.9917355 0.4745098
 [4,] 140.00000 0.9939759 0.6509804
 [5,] 196.30435 0.8000000 0.9019608
 [6,] 249.80392 0.8010471 0.7490196
 [7,]  25.16129 0.6078431 0.4000000
 [8,]  36.47059 0.5000000 0.4000000
 [9,] 136.55172 0.3493976 0.6509804
[10,] 240.00000 0.4509804 0.8000000</code></pre>
</div>
</div>
<p>So now I can store all six coordinates in the <code>crayola</code> dataframe, along with the LUV-space version of “hue” which I compute in the last line here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">crayola <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb41-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hue =</span> HSV[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>],</span>
<span id="cb41-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sat =</span> HSV[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"S"</span>],</span>
<span id="cb41-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">val =</span> HSV[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"V"</span>],</span>
<span id="cb41-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">L =</span> LUV[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>],</span>
<span id="cb41-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">U =</span> LUV[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>],</span>
<span id="cb41-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">V =</span> LUV[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"V"</span>],</span>
<span id="cb41-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hue2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">atan2</span>(V, U)</span>
<span id="cb41-10">  )</span></code></pre></div>
</div>
<p>The Wikipedia page on CIELUV has a little more information on this, but really the thing that matters is that the <code>hue2</code> column is the variable I’m going to use to arrange the crayon colours when plotting them later. And so the moment arrives that, at long last, I have the data…</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7,749 × 18
   name            color  year listed notes x16_box x24_box x32_box x64_box interval    id   hue   sat   val     L      U       V   hue2
   &lt;chr&gt;           &lt;chr&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
 1 Black           #000…  1903 "#000… ""    "Yes"   "Yes"   "Yes"   "Yes"          1     1   0   0     0       0     0      0     -3.14 
 2 Midnight Blue   #003…  1903 "#003… "Kno… "No"    "No"    "No"    "No"           1     2 210   1     0.4    21.3 -11.9  -40.1   -1.86 
 3 Pine Green      #017…  1903 "#017… "Kno… "No"    "No"    "No"    "No"           1     3 175   0.992 0.475  45.4 -36.1    0.638  3.12 
 4 Green           #01A…  1903 "#01A… ""    "Yes"   "Yes"   "Yes"   "Yes"          1     4 140   0.994 0.651  59.5 -54.9   61.6    2.30 
 5 Blue (I)        #2EB…  1903 ""     "Kno… ""      ""      ""      ""             1     5 196.  0.8   0.902  68.7 -44.6  -53.4   -2.27 
 6 Ultramarine Bl… #3F2…  1903 ""     ""    ""      ""      ""      ""             1     6 250.  0.801 0.749  29.9  -2.77 -96.9   -1.60 
 7 Van Dyke Brown  #664…  1903 ""     "Sam… ""      ""      ""      ""             1     7  25.2 0.608 0.4    31.5  25.9   19.9    0.655
 8 Raw Umber       #665…  1903 "#665… ""    ""      ""      ""      ""             1     8  36.5 0.5   0.4    36.2  14.7   22.3    0.987
 9 Medium Chrome … #6CA…  1903 ""     "\"C… ""      ""      ""      ""             1     9 137.  0.349 0.651  63.3 -28.3   26.3    2.39 
10 Celestial Blue  #707…  1903 ""     ""    ""      ""      ""      ""             1    10 240   0.451 0.8    51.1  -5.49 -76.1   -1.64 
# ℹ 7,739 more rows</code></pre>
</div>
</div>
</section>
<section id="the-intermission-is-late-so-what" class="level2">
<h2 class="anchored" data-anchor-id="the-intermission-is-late-so-what">The intermission is late, so what?</h2>
<p>As a rule I make it a habit to assume that, while the internet never forgets anything at all in the general sense, it doesn’t remember anything <em>specific</em> for any interval longer than I’d trust a man not to have conveniently lost my phone number. Moreover, while I also make it a habit not to care greatly about the archival properties of What Went Down In The Stalls At The Duke On Friday, I’m slightly more invested in, um … crayons, I guess. Or data science practices in R. Whatever.</p>
<p>My point here is that the table on wikipedia isn’t an archival source so there’s no guarantee that anything I’ve done up to this point is reproducible unless I do a bit of extra work myself and save a copy of the data…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">folder <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-12-18_crayola-crayon-colours"</span>)</span>
<span id="cb44-2">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(crayola, fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(folder, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crayola.csv"</span>))</span></code></pre></div>
</div>
<p>As a convenient side benefit, you can download a copy of <a href="https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-12-18_crayola-crayon-colours/crayola.csv">the crayola colours</a> data as a csv file from github should you feel so inclined. There’s even a script containing most of the <a href="https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-12-18_crayola-crayon-colours/crayola.R">code for this post</a> too :-)</p>
</section>
<section id="act-iv-not-even-chekhov-expects-it-to-go-off" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-iv-not-even-chekhov-expects-it-to-go-off">Act IV: Not even Chekhov expects it to go off</h2>
<p>In any case, the final act of our little drama has arrived at last. Time to make a plot. The drums roll and the audience holds their breath in antici–</p>
<p>Oh let’s just get on with it and load <a href="https://ggplot2.tidyverse.org/">ggplot2</a> already. Here’s a stacked bar chart showing the number of distinct crayon colours in the Crayola standard set every year from 1903 to 2022. It has grown over time but the growth looks linear, not exponential:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb45-2">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb45-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> forcats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(color, hue2)</span>
<span id="cb45-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb45-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> year,</span>
<span id="cb45-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> color,</span>
<span id="cb45-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> color</span>
<span id="cb45-10">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-12">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb45-13"></span>
<span id="cb45-14">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/first-plot-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But let’s be honest, shall we? No-one at all (least of all me) is interested in determining whether the rate of growth of Crayola crayon colours in the standard set is exponential or linear. It’s just fun. The real reason we all love the Crayola post was that the image was so terribly pretty, so let’s start making something pretty, yes?</p>
<p>We can start getting something a little closer to the original if we set <code>position = "fill"</code>, and I’m going to use <code>theme_void()</code> because honestly it’s just prettier without the words and numbers getting in the way…</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(</span>
<span id="cb46-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span>,</span>
<span id="cb46-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blank"</span>,</span>
<span id="cb46-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb46-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb46-8">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>It’s pretty, but it’s noticeably different from the original one. In my version, there are 39 separate colours depicted on the left hand side, whereas the version that was going around on mastodon (and appears in the original blog posts) has only 8. Out of paranoia, I decided to check the counts in my data…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1903</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2003</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 2
    year     n
   &lt;int&gt; &lt;int&gt;
 1  1903    40
 2  1913    32
 3  1923    31
 4  1933    57
 5  1943    57
 6  1953    49
 7  1963    64
 8  1973    64
 9  1983    64
10  1993    80
11  2003   108</code></pre>
</div>
</div>
<p>…which does seem consistent with what the <a href="https://en.wikipedia.org/wiki/History_of_Crayola_crayons">history of Crayola crayons</a> wikipedia article has to say on the topic too:</p>
<blockquote class="blockquote">
<p>Early Crayola advertising mentions thirty different colors, although there is no official list; in fact thirty-eight different crayons are known from Crayola boxes of this period. The largest labeled assortment was box No.&nbsp;51, titled Crayola Young Artists’ Drawing Crayons, which included twenty-eight different crayons. Other colors were found in different boxes, including the “Rubens” No.&nbsp;500, a twenty-four crayon assortment.</p>
</blockquote>
<p>Okay, so if I haven’t made a mistake, what is going on? It turns out that although Steven Von Worley’s blog post still manages to point to the “same” Wikipedia page 12 years later, the contents of the page have changed considerably. The original post was published January 15th 2010. Conveniently the wayback machine has a <a href="http://web.archive.org/web/20100209002742/https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors">snapshot of that page</a> from only a few weeks later, on February 9th. I have a very different version of the Crayola colours data than Steven’s friend Velociraptor had.</p>
<p>There are 133 colours listed in the 2010 version, and it’s missing all the colours that had gone out of production earlier than 1990. “English Vermillion”, for example, was in production from 1903 to 1935. It appears in the 2022 version of the Wikipedia data (and so it’s represented in my plots above), but it was omitted in the 2010 version of the Wikipedia data and so doesn’t appear in the version of the image that went around on Mastodon yesterday.</p>
<p>Hm. So what happens to my data if I crudely simulate a censoring process a little bit like the one that applied to the 2010 version of the Wikipedia page? Let’s simply ignore all crayon colours that were out of production earlier than 1990, shall we?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(</span>
<span id="cb49-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span>  crayola <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-5">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-6">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-7">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-8">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> forcats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(color, hue2)),</span>
<span id="cb49-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span>,</span>
<span id="cb49-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blank"</span>,</span>
<span id="cb49-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb49-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb49-13">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/second-plot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Still not exactly equivalent, but it’s closer.</p>
<p>More to the point however, I think we all have to admit that this is really the kind of data set that desperately needs to be plotted with the aid of <code>coord_polar()</code>, no?</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb50-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(</span>
<span id="cb50-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span>,</span>
<span id="cb50-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blank"</span>,</span>
<span id="cb50-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb50-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb50-9">  ) </span></code></pre></div>
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/third-plot-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
<p>I mean… not that anyone really cares what this represents, but each concentric ring represents a year of data: 1903 is in the middle, and 2022 is on the outside. Within each annual ring there is an equal-angle segment for every crayon colour in the data for that year. Whenever the crayons changed, the rings shift a bit. The colours are arranged around the circle by hue. Well, the hue-like quantity computed from the chromaticity components of the LUV coordinates. Whatever.</p>
<p>Alternatively, we could turn this into a racetrack plot, where each individual colour fills an angular section of constant size, and so only the year with the most crayon colours (2022) wraps the full way round the circle. That gives us this:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(</span>
<span id="cb51-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blank"</span>,</span>
<span id="cb51-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb51-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb51-8">  ) </span></code></pre></div>
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/fourth-plot-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
<p>I’m not sure it has a lot of value as a data visualisation but it is so very pretty!</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Navarro, Danielle},
  title = {Crayola Crayon Colours},
  date = {2022-12-18},
  url = {https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2022. <span>“Crayola Crayon Colours.”</span> December
18, 2022. <a href="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours">https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Wrangling</category>
  <category>Data Visualisation</category>
  <guid>https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index.html</guid>
  <pubDate>Sat, 17 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/crayola.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
